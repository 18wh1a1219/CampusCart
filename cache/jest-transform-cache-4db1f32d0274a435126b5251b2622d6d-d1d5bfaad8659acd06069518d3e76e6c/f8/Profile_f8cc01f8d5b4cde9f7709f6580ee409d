cbce1cd5c7a8332e91d8401cd8750ac4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Profile;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _firebase = _interopRequireDefault(require("firebase"));

var _firebaseMethods = require("../API/firebaseMethods");

var _reactNativeRatings = require("react-native-ratings");

var _reactNativeStepIndicator = _interopRequireDefault(require("react-native-step-indicator"));

var _reactNativePaper = require("react-native-paper");

var _track = _interopRequireDefault(require("./track"));

var _native = require("@react-navigation/native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Profile(_ref) {
  var navigation = _ref.navigation;

  var _useState = (0, _react.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      fullName = _useState2[0],
      setFullName = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      phone = _useState4[0],
      setPhone = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      email = _useState6[0],
      setEmail = _useState6[1];

  var _useState7 = (0, _react.useState)('AllPosts'),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      type = _useState8[0],
      setType = _useState8[1];

  var _useState9 = (0, _react.useState)(''),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      address = _useState10[0],
      setAddress = _useState10[1];

  var isFocused = (0, _native.useIsFocused)();

  var _useState11 = (0, _react.useState)(0),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      rating = _useState12[0],
      setRating = _useState12[1];

  var _useState13 = (0, _react.useState)(0),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      count = _useState14[0],
      setCount = _useState14[1];

  var _useState15 = (0, _react.useState)(0),
      _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
      avgrating = _useState16[0],
      setAvgRating = _useState16[1];

  var _useState17 = (0, _react.useState)([]),
      _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
      user = _useState18[0],
      setUser = _useState18[1];

  var _useState19 = (0, _react.useState)([]),
      _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
      mypost = _useState20[0],
      setMyPost = _useState20[1];

  var _useState21 = (0, _react.useState)([]),
      _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
      bought = _useState22[0],
      setBought = _useState22[1];

  (0, _react.useEffect)(function () {
    function fetchUserPosts() {
      var data = _firebase.default.firestore().collection("users").doc(_firebase.default.auth().currentUser.uid).get().then(function (querySnapshot) {
        var data = querySnapshot.data();
        setFullName(data.fullName);
        setEmail(data.email);
        setPhone(data.phone);
        setAddress(data.address);
        setRating(data.rating);
        setCount(data.count);
        setAvgRating(data.rating / data.count);
        setUser(data);
      });
    }

    isFocused && fetchUserPosts();
  }, [isFocused]);
  (0, _react.useEffect)(function () {
    function fetchUserPosts() {
      _firebase.default.firestore().collection("posts").where("userId", "==", _firebase.default.auth().currentUser.uid).orderBy("createdAt", "desc").get().then(function (snapshot) {
        var posts = snapshot.docs.map(function (doc) {
          var data = doc.data();

          _firebase.default.storage().ref('/' + data.image).getDownloadURL().then(function (url) {});

          return (0, _extends2.default)({}, data);
        });
        setMyPost(posts);
      });

      _firebase.default.firestore().collection("posts").where("buyer", "==", _firebase.default.auth().currentUser.uid).orderBy("createdAt", "desc").get().then(function (snapshot) {
        var posts = snapshot.docs.map(function (doc) {
          var data = doc.data();

          _firebase.default.storage().ref('/' + data.image).getDownloadURL().then(function (url) {});

          return (0, _extends2.default)({}, data);
        });
        setBought(posts);
      });
    }

    isFocused && fetchUserPosts();
  }, [isFocused]);

  var ratingCompleted = function ratingCompleted(rating) {
    setRating(rating);
  };

  var rate = function rate(image, userId) {
    alert('Rating submitted');
    navigation.replace('Profile');

    _firebase.default.firestore().collection('posts').where("image", "==", image).get().then(function (querySnapshot) {
      var id = 0;
      querySnapshot.forEach(function (doc) {
        return id = doc.id;
      });

      _firebase.default.firestore().collection('posts').doc(id).update({
        rating: rating
      });

      var data = _firebase.default.firestore().collection("users").doc(userId).get().then(function (querySnapshot) {
        var data = querySnapshot.data();
        var r = data.rating + rating;
        var c = data.count + 1;

        _firebase.default.firestore().collection("users").doc(userId).update({
          rating: r,
          count: c
        });

        _firebase.default.firestore().collection("posts").where("userId", "==", userId).get().then(function (snapshot) {
          snapshot.forEach(function (x) {
            _firebase.default.firestore().collection("posts").doc(x.id).update({
              userRating: ((data.rating + rating) / (data.count + 1)).toFixed(2)
            });
          });
        });
      }).catch(function (error) {
        console.log("Error getting documents: ", error);
      });
    });
  };

  var changed = function changed(value) {
    if (value === "AllPosts") {
      setType(value);

      _firebase.default.firestore().collection("posts").where("userId", "==", _firebase.default.auth().currentUser.uid).orderBy("createdAt", "desc").get().then(function (snapshot) {
        var posts = snapshot.docs.map(function (doc) {
          var data = doc.data();

          _firebase.default.storage().ref('/' + data.image).getDownloadURL().then(function (url) {});

          return (0, _extends2.default)({}, data);
        });
        setMyPost(posts);
      });
    } else {
      setType(value);

      _firebase.default.firestore().collection("posts").where("buyer", "==", _firebase.default.auth().currentUser.uid).orderBy("createdAt", "desc").get().then(function (snapshot) {
        var posts = snapshot.docs.map(function (doc) {
          var data = doc.data();

          _firebase.default.storage().ref('/' + data.image).getDownloadURL().then(function (url) {});

          return (0, _extends2.default)({}, data);
        });
        setBought(posts);
      });
    }
  };

  var handlePress = function handlePress() {
    (0, _firebaseMethods.loggingOut)();
    navigation.replace('Home');
  };

  var handlePresss = function handlePresss() {
    _firebase.default.firestore().collection('users').doc(_firebase.default.auth().currentUser.uid).update({
      fullName: fullName,
      email: email,
      phone: phone,
      address: address
    }).then(function () {
      _reactNative.Alert.alert('Profile Updated!', 'Your profile has been updated successfully.');
    });

    _firebase.default.firestore().collection('posts').where("userId", "==", _firebase.default.auth().currentUser.uid).get().then(function (snapshot) {
      snapshot.forEach(function (x) {
        _firebase.default.firestore().collection('posts').doc(x.id).update({
          userName: fullName
        });
      });
    });
  };

  return _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.View, {
    style: styles.div
  }, _react.default.createElement(_reactNative.Image, {
    style: styles.card_image,
    source: require('../assets/human.png')
  }), _react.default.createElement(_reactNative.Text, {
    style: styles.name
  }, "Hi ", fullName, "!! ", _react.default.createElement(_reactNative.Image, {
    style: styles.img,
    source: require('../assets/star.png')
  }), avgrating.toFixed(2).toString(), "  "), _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {
    style: styles.button2,
    onPress: handlePress
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.buttonText
  }, "Logout")), _react.default.createElement(_reactNative.View, {
    style: styles.input
  }, _react.default.createElement(_reactNative.View, {
    style: styles.box
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.heading
  }, "Update your Details"), _react.default.createElement(_reactNative.TextInput, {
    style: styles.formInput,
    placeholder: "Full Name*",
    value: fullName,
    onChangeText: function onChangeText(fullName) {
      return setFullName(fullName);
    }
  }), _react.default.createElement(_reactNative.TextInput, {
    style: styles.formInput,
    placeholder: "Phone Number*",
    value: phone,
    onChangeText: function onChangeText(phone) {
      return setPhone(phone);
    },
    autoCapitalize: "none"
  }), _react.default.createElement(_reactNative.TextInput, {
    style: styles.formInput,
    placeholder: "Email*",
    value: email,
    onChangeText: function onChangeText(email) {
      return setEmail(email);
    },
    keyboardType: "email-address",
    autoCapitalize: "none"
  }), _react.default.createElement(_reactNative.TextInput, {
    style: styles.formInput,
    placeholder: "Address*",
    value: address,
    onChangeText: function onChangeText(address) {
      return setAddress(address);
    }
  }), _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {
    style: styles.button,
    onPress: handlePresss
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.buttonText
  }, "Update")))), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, null, _react.default.createElement(_reactNativePaper.Button, {
    style: {
      flexDirection: "row",
      marginLeft: '-3%',
      marginTop: '7%',
      alignSelf: 'flex-start',
      justifyContent: 'space-evenly'
    },
    onPress: function onPress() {
      return changed("AllPosts");
    }
  }, "My posts"), _react.default.createElement(_reactNativePaper.Button, {
    style: {
      flexDirection: "row",
      marginRight: '25%',
      marginTop: '-9%',
      alignSelf: 'flex-end',
      justifyContent: 'space-around'
    },
    onPress: function onPress() {
      return changed("Bought");
    }
  }, "Bought"))), type === "AllPosts" ? _react.default.createElement(_reactNative.View, {
    style: styles.b1
  }, mypost.map(function (item, key) {
    return _react.default.createElement(_reactNative.Text, {
      key: key
    }, _react.default.createElement(_reactNative.View, {
      style: {
        padding: 5
      }
    }, _react.default.createElement(_reactNative.View, {
      style: styles.card_template1
    }, _react.default.createElement(_reactNativePaper.Card, {
      style: styles.card_template1
    }, _react.default.createElement(_reactNativePaper.Card.Content, null, _react.default.createElement(_reactNativePaper.Title, null, item.productName)), _react.default.createElement(_reactNativePaper.Card.Cover, {
      style: styles.card_image1,
      source: {
        uri: item.image
      }
    }), _react.default.createElement(_reactNative.Text, {
      style: {
        top: '-70%',
        left: '2%',
        color: "black",
        fontStyle: 'italic',
        fontSize: 15
      }
    }, " ", item.desc, " "), _react.default.createElement(_reactNative.Text, {
      style: {
        top: '-70%',
        left: '3%',
        color: "black",
        fontStyle: 'italic',
        fontSize: 15
      }
    }, "\u20B9", " ", item.price), item.status === "sold" ? _react.default.createElement(_reactNative.Text, {
      style: {
        top: '-70%',
        left: '2%',
        borderRadius: 10,
        color: "black",
        height: 30,
        fontStyle: 'italic',
        padding: 4,
        paddingLeft: 4,
        fontSize: 15,
        backgroundColor: 'red',
        color: 'white',
        width: '23%'
      }
    }, "SOLD OUT") : null))));
  })) : _react.default.createElement(_reactNative.View, {
    style: styles.b1
  }, bought.map(function (item, key) {
    return _react.default.createElement(_reactNative.Text, {
      key: key
    }, _react.default.createElement(_reactNative.View, {
      style: {
        padding: 5
      }
    }, _react.default.createElement(_reactNative.View, {
      style: styles.card_template1
    }, _react.default.createElement(_reactNativePaper.Card, {
      style: styles.card_template1
    }, _react.default.createElement(_reactNativePaper.Card.Content, null, _react.default.createElement(_reactNativePaper.Title, null, item.productName)), item.rating == 0 ? _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNativeRatings.Rating, {
      showRating: true,
      fractions: 1,
      onFinishRating: ratingCompleted,
      readonly: false,
      style: {
        alignSelf: 'flex-end',
        top: '6%'
      }
    }), _react.default.createElement(_reactNativePaper.Button, {
      onPress: function onPress() {
        return rate(item.image, item.userId);
      }
    }, "submit")) : _react.default.createElement(_reactNativeRatings.Rating, {
      fractions: 1,
      onFinishRating: ratingCompleted,
      readonly: true,
      startingValue: item.rating,
      style: {
        alignSelf: 'flex-end',
        top: '6%'
      }
    }), _react.default.createElement(_reactNative.View, {
      style: {
        alignItems: 'flex-start'
      }
    }, _react.default.createElement(_reactNative.View, {
      style: styles.con
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.card_title1
    }, " ", item.userName, " "), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title1
    }, item.desc, " "), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title1
    }, "\u20B9", " ", item.price))), _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {
      style: {
        left: '2%',
        top: '-80%',
        alignSelf: 'flex-start',
        backgroundColor: '#ffd60a'
      },
      onPress: function onPress() {
        return navigation.navigate('Track');
      }
    }, _react.default.createElement(_reactNativePaper.Button, {
      style: {}
    }, "track"))))));
  }))));
}

var styles = _reactNative.StyleSheet.create({
  img: {
    height: 24,
    width: 24
  },
  con: {
    top: 40
  },
  name: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    marginTop: -80,
    marginLeft: 80,
    marginBottom: 35
  },
  Sold: {
    color: 'white'
  },
  box: {
    backgroundColor: '#ffffff',
    width: 450,
    height: 360,
    marginLeft: -60,
    paddingLeft: 20
  },
  heading: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    marginTop: 19,
    marginLeft: 100
  },
  b1: {
    top: '0.5%',
    left: '-12%',
    marginTop: 20
  },
  card_template1: {
    width: 380,
    height: 200
  },
  card_image1: {
    left: '-6%',
    bottom: '6%',
    width: '45%',
    height: 150,
    borderRadius: 10,
    alignSelf: 'flex-end'
  },
  text_container1: {
    position: "absolute",
    width: 250,
    height: 100,
    bottom: 0,
    padding: 5,
    backgroundColor: "rgba(0,0,0, 0.3)",
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10
  },
  card_title1: {
    top: -80,
    left: '2%',
    color: "black",
    fontStyle: 'italic',
    fontSize: 15
  },
  background1: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  button1: {
    left: 250,
    width: 120,
    padding: 0,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 10,
    alignSelf: 'center'
  },
  buttonText1: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    textAlign: 'center',
    width: 365
  },
  container1: {
    height: '100%',
    width: '100%',
    backgroundColor: '#c0f3ff',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text1: {
    textAlign: 'center',
    fontSize: 20,
    fontStyle: 'italic',
    marginTop: '2%',
    marginBottom: '10%',
    fontWeight: 'bold',
    color: 'black'
  },
  titleText1: {
    textAlign: 'center',
    fontSize: 20,
    fontWeight: 'bold',
    color: 'black',
    top: '-23%',
    left: '-30%'
  },
  input: {
    top: '2%'
  },
  div: {
    left: '15%',
    alignContent: 'center',
    height: '100%'
  },
  formInput: {
    width: 365,
    fontSize: 15,
    borderBottomColor: 'black',
    borderBottomWidth: 1,
    borderColor: '#48494B',
    padding: 10,
    margin: 5
  },
  b: {
    top: '5%',
    left: '18%'
  },
  card_template: {
    width: 250,
    height: 900
  },
  card_image: {
    width: 100,
    height: 100,
    borderRadius: 80,
    left: '-10%',
    top: '3%',
    backgroundColor: '#ffffff'
  },
  text_container: {
    position: "absolute",
    width: 250,
    height: 100,
    bottom: 0,
    padding: 5,
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10
  },
  card_title: {
    color: "black"
  },
  background: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  button: {
    top: '35%',
    left: '-15%',
    width: 370,
    padding: 10,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: '#ffd60a',
    borderRadius: 15,
    alignSelf: 'center',
    height: 50,
    marginLeft: 70
  },
  button2: {
    top: '-19%',
    width: 250,
    padding: 10,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: '#ffd60a',
    borderRadius: 15,
    alignSelf: 'center',
    height: 50,
    marginRight: 270,
    marginLeft: 250,
    marginTop: -10
  },
  button3: {
    top: '-35%',
    width: 120,
    padding: 5,
    backgroundColor: 'red',
    borderWidth: 2,
    borderColor: 'red',
    marginTop: 10,
    borderRadius: 15,
    alignSelf: 'center',
    height: 50,
    color: 'white',
    marginRight: 290,
    marginLeft: 170
  },
  buttonText: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    textAlign: 'center'
  },
  container: {
    height: '100%',
    width: '100%',
    backgroundColor: '#ECF3FB',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    textAlign: 'center',
    fontSize: 20,
    fontStyle: 'italic',
    marginTop: '2%',
    marginBottom: '10%',
    fontWeight: 'bold',
    color: 'black'
  },
  titleText: {
    textAlign: 'center',
    fontSize: 20,
    fontWeight: 'bold',
    color: 'black',
    top: '-23%',
    left: '-30%'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,