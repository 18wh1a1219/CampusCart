2c78c8669e991729f184de265652033d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var React = require('react');

var ReactNative = require('react-native');

var PropTypes = require('prop-types');

var Text = ReactNative.Text,
    TouchableWithoutFeedback = ReactNative.TouchableWithoutFeedback,
    View = ReactNative.View;
var propTypes = {
  options: PropTypes.array.isRequired,
  testOptionEqual: PropTypes.func,
  renderOption: PropTypes.func,
  renderContainer: PropTypes.func,
  onSelection: PropTypes.func
};

var RadioButtons = function (_React$Component) {
  (0, _inherits2.default)(RadioButtons, _React$Component);

  var _super = _createSuper(RadioButtons);

  function RadioButtons() {
    var _this;

    (0, _classCallCheck2.default)(this, RadioButtons);
    _this = _super.call(this);
    _this.state = {
      selectedOption: null,
      selectedIndex: null
    };
    return _this;
  }

  (0, _createClass2.default)(RadioButtons, [{
    key: "copySelectedOptionFromProps",
    value: function copySelectedOptionFromProps(_ref) {
      var selectedOption = _ref.selectedOption,
          selectedIndex = _ref.selectedIndex;
      this.setState({
        selectedOption: selectedOption,
        selectedIndex: selectedIndex
      });
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.copySelectedOptionFromProps(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      this.copySelectedOptionFromProps(newProps);
    }
  }, {
    key: "selectOption",
    value: function selectOption(selectedOption, selectedIndex) {
      this.setState({
        selectedOption: selectedOption,
        selectedIndex: selectedIndex
      });
      this.props.onSelection(selectedOption, selectedIndex);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          selectedOption = _this$state.selectedOption,
          selectedIndex = _this$state.selectedIndex;
      var children = this.props.options.map(function (option, index) {
        var isSelected = selectedIndex === index || this.props.testOptionEqual(selectedOption, option);
        var onSelection = this.selectOption.bind(this, option, index);
        return this.props.renderOption(option, isSelected, onSelection, index);
      }.bind(this));
      return this.props.renderContainer(children);
    }
  }], [{
    key: "getTextOptionRenderer",
    value: function getTextOptionRenderer(normalStyle, selectedStyle, extractText) {
      return function renderOption(option, selected, onSelect, index) {
        var style = selected ? selectedStyle : normalStyle;
        var label = extractText ? extractText(option) : option;
        return React.createElement(TouchableWithoutFeedback, {
          onPress: onSelect,
          key: index
        }, React.createElement(Text, {
          style: style
        }, label));
      };
    }
  }, {
    key: "getViewContainerRenderer",
    value: function getViewContainerRenderer(style) {
      return function renderContainer(options) {
        return React.createElement(View, {
          style: style
        }, options);
      };
    }
  }]);
  return RadioButtons;
}(React.Component);

RadioButtons.renderHorizontalContainer = RadioButtons.getViewContainerRenderer({
  flexDirection: 'row'
});
RadioButtons.renderVerticalContainer = RadioButtons.getViewContainerRenderer({
  flexDirection: 'column'
});
RadioButtons.defaultProps = {
  testOptionEqual: function testOptionEqual(a, b) {
    return a === b;
  },
  renderOption: RadioButtons.getTextOptionRenderer({}, {
    fontWeight: 'bold'
  }),
  renderContainer: RadioButtons.renderVerticalContainer,
  onSelection: function onSelection(option) {}
};
RadioButtons.propTypes = propTypes;
module.exports = RadioButtons;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,