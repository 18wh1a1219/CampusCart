{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYqBA,a;;;;;EAAqD;IAAA;;IAAA;IAAA;;IAAAC,sEACzD;MACbC,OAAO,EAAE;IADI,CADyD;;IAAAD,sEAKhE,UAACE,GAAD,EAAcC,QAAd,EAA4C;MAClD,MAAKC,QAAL,CAAeC,eAAD;QAAA,OAAY;UACxBJ,OAAO,6CAAMI,KAAK,CAACJ,OAAZ,IAAqB;YAAEC,GAAF,EAAEA,GAAF;YAAOC;UAAP,CAArB;QADiB,CAAZ;MAAA,CAAd;IANsE;;IAAAH,uEAW/D,UAACE,GAAD,EAAcC,QAAd;MAAA,OACP,MAAKC,QAAL,CAAeC,eAAD;QAAA,OAAY;UACxBJ,OAAO,EAAEI,KAAK,CAACJ,OAANI,CAAcC,GAAdD,CAAmBE,cAAD,EAAU;YACnC,IAAIA,IAAI,CAACL,GAALK,KAAaL,GAAjB,EAAsB;cACpB,kCAAYK,IAAZ;gBAAkBJ;cAAlB;YACD;;YACD,OAAOI,IAAP;UAJO;QADe,CAAZ;MAAA,CAAd,CADO;IAAA,CAX+D;;IAAAP,wEAqB7DE,aAAD;MAAA,OACR,MAAKE,QAAL,CAAeC,eAAD;QAAA,OAAY;UACxBJ,OAAO,EAAEI,KAAK,CAACJ,OAANI,CAAcG,MAAdH,CAAsBE,cAAD;YAAA,OAAUA,IAAI,CAACL,GAALK,KAAaL,GAAvB;UAAA,CAArBG;QADe,CAAZ;MAAA,CAAd,CADQ;IAAA,CArB8D;;IAAA;EAAA;;;;WA0BxEI,kBAAS;MACP,OAAO,KAAKJ,KAAL,CAAWJ,OAAX,CAAmBK,GAAnB,CAAuB;QAAA,IAAGJ,GAAH,QAAGA,GAAH;QAAA,IAAQC,QAAR,QAAQA,QAAR;QAAA,OAC5BO,oBAACC,iBAAD;UACET,GAAG,EAAEA,GADP;UAEEU,WAAW,EACT,KAHJ;UAKEC,aAAa,EAAC,UALhB;UAMEC,KAAK,EAAEC,wBAAWC;QANpB,GAQGb,QARH,CAD4B;MAAvB,EAAP;IAYD;;;EAvCwCO,KAAK,CAACO,a","names":["PortalManager","_defineProperty","portals","key","children","setState","state","map","item","filter","render","React","_reactNative","collapsable","pointerEvents","style","StyleSheet","absoluteFill","PureComponent"],"sources":["PortalManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\ntype State = {\n  portals: Array<{\n    key: number;\n    children: React.ReactNode;\n  }>;\n};\n\n/**\n * Portal host is the component which actually renders all Portals.\n */\nexport default class PortalManager extends React.PureComponent<{}, State> {\n  state: State = {\n    portals: [],\n  };\n\n  mount = (key: number, children: React.ReactNode) => {\n    this.setState((state) => ({\n      portals: [...state.portals, { key, children }],\n    }));\n  };\n\n  update = (key: number, children: React.ReactNode) =>\n    this.setState((state) => ({\n      portals: state.portals.map((item) => {\n        if (item.key === key) {\n          return { ...item, children };\n        }\n        return item;\n      }),\n    }));\n\n  unmount = (key: number) =>\n    this.setState((state) => ({\n      portals: state.portals.filter((item) => item.key !== key),\n    }));\n\n  render() {\n    return this.state.portals.map(({ key, children }) => (\n      <View\n        key={key}\n        collapsable={\n          false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        }\n        pointerEvents=\"box-none\"\n        style={StyleSheet.absoluteFill}\n      >\n        {children}\n      </View>\n    ));\n  }\n}\n"]}