{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAAuD;EAAA,IAApDC,KAAoD,QAApDA,KAAoD;EAAA,IAA7CC,KAA6C,QAA7CA,KAA6C;EAAA,IAAtCC,QAAsC,QAAtCA,QAAsC;EAAA,IAA5BC,KAA4B,QAA5BA,KAA4B;EAAA,IAAlBC,IAAkB;EACzE,IAAMC,KAAK,GAAG,sBAAd;EACA,IAAMC,KAAK,GAAG,sBAAd;EAEA,IAAIC,YAAJ,EAAkBC,IAAlB,EAAwBC,IAAxB;;EAEA,IAAI,OAAOT,KAAP,KAAiB,QAAjB,IAA6BE,QAAjC,EAA2C;IACzCM,IAAI,GAAGN,QAAQ,CAACF,KAAK,GAAG,CAAT,CAAfQ;IACAC,IAAI,GAAGP,QAAQ,CAACF,KAAK,GAAG,CAAT,CAAfS;EACD;;EAED,IACGD,IAAI,KAAKH,KAATG,IAAkBC,IAAI,KAAKJ,KAA3BG,IACAA,IAAI,KAAKF,KAATE,IAAkBC,IAAI,KAAKH,KAD3BE,IAEDP,KAAK,KAAK,CAHZ,EAIE;IACAM,YAAY,GAAGG,MAAM,CAACC,IAAtBJ;EALF,OAMO,IAAIP,KAAK,KAAK,CAAd,EAAiB;IACtB,IAAIS,IAAI,KAAKJ,KAATI,IAAkBA,IAAI,KAAKH,KAA/B,EAAsC;MACpCC,YAAY,GAAGG,MAAM,CAACC,IAAtBJ;IADF,OAEO;MACLA,YAAY,GAAGG,MAAM,CAACE,KAAtBL;IACD;EALI,OAMA,IAAI,OAAON,KAAP,KAAiB,QAAjB,IAA6BD,KAAK,KAAKC,KAAK,GAAG,CAAnD,EAAsD;IAC3D,IAAIO,IAAI,KAAKH,KAATG,IAAkBA,IAAI,KAAKF,KAA/B,EAAsC;MACpCC,YAAY,GAAGG,MAAM,CAACC,IAAtBJ;IADF,OAEO;MACLA,YAAY,GAAGG,MAAM,CAACG,IAAtBN;IACD;EALI,OAMA,IAAIC,IAAI,KAAKH,KAATG,IAAkBA,IAAI,KAAKF,KAA/B,EAAsC;IAC3CC,YAAY,GAAGG,MAAM,CAACE,KAAtBL;EADK,OAEA,IAAIE,IAAI,KAAKJ,KAATI,IAAkBA,IAAI,KAAKH,KAA/B,EAAsC;IAC3CC,YAAY,GAAGG,MAAM,CAACG,IAAtBN;EACD;;EAED,OAAOO,oBAACC,iBAAD,eAAUX,IAAV;IAAgBD,KAAK,EAAE,CAACO,MAAM,CAACM,SAAR,EAAmBT,YAAnB,EAAiCJ,KAAjC;EAAvB,GAAP;AAnCF;;AAsCAJ,WAAW,CAACkB,WAAZlB,GAA0B,cAA1BA;;AAEA,IAAMW,MAAM,GAAGQ,wBAAWC,MAAXD,CAAkB;EAC/BF,SAAS,EAAE;IACTI,iBAAiB,EAAE;EADV,CADoB;EAI/BR,KAAK,EAAE;IACLS,UAAU,EAAE;EADP,CAJwB;EAO/BR,IAAI,EAAE;IACJS,aAAa,EAAE;EADX,CAPyB;EAU/BX,IAAI,EAAE;IACJY,eAAe,EAAE;EADb;AAVyB,CAAlBL,CAAf;;eAeenB","names":["CardContent","index","total","siblings","style","rest","cover","title","contentStyle","prev","next","styles","only","first","last","React","_reactNative","container","displayName","StyleSheet","create","paddingHorizontal","paddingTop","paddingBottom","paddingVertical"],"sources":["CardContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Items inside the `Card.Content`.\n   */\n  children: React.ReactNode;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  /**\n   * @internal\n   */\n  siblings?: Array<string>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show content inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-content-example.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Title, Paragraph } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardContent = ({ index, total, siblings, style, ...rest }: Props) => {\n  const cover = 'withTheme(CardCover)';\n  const title = 'withTheme(CardTitle)';\n\n  let contentStyle, prev, next;\n\n  if (typeof index === 'number' && siblings) {\n    prev = siblings[index - 1];\n    next = siblings[index + 1];\n  }\n\n  if (\n    (prev === cover && next === cover) ||\n    (prev === title && next === title) ||\n    total === 1\n  ) {\n    contentStyle = styles.only;\n  } else if (index === 0) {\n    if (next === cover || next === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.first;\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    if (prev === cover || prev === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.last;\n    }\n  } else if (prev === cover || prev === title) {\n    contentStyle = styles.first;\n  } else if (next === cover || next === title) {\n    contentStyle = styles.last;\n  }\n\n  return <View {...rest} style={[styles.container, contentStyle, style]} />;\n};\n\nCardContent.displayName = 'Card.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  first: {\n    paddingTop: 16,\n  },\n  last: {\n    paddingBottom: 16,\n  },\n  only: {\n    paddingVertical: 16,\n  },\n});\n\nexport default CardContent;\n"]}