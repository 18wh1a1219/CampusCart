{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAMA,YAAY,GAAG,CAArB;;AAkBA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAQd;EAAA,IAPXC,QAOW,QAPXA,QAOW;EAAA,IANXC,OAMW,QANXA,OAMW;EAAA,IALXC,KAKW,QALXA,KAKW;EAAA,IAJXC,KAIW,QAJXA,KAIW;EAAA,IAHXC,MAGW,QAHXA,MAGW;EAAA,IAFXC,MAEW,QAFXA,MAEW;EAAA,IADRC,IACQ;;EACX,oBAAgCC,KAAK,CAACC,MAAND,CAC9B,IAAIE,sBAASC,KAAb,CAAmBZ,YAAnB,CAD8BS,CAAhC;EAAA,IAAiBI,UAAjB,iBAAQC,OAAR;;EAIA,qBAA+BL,KAAK,CAACC,MAAND,CAC7B,IAAIE,sBAASC,KAAb,CAAmB,CAAnB,CAD6BH,CAA/B;EAAA,IAAiBM,SAAjB,kBAAQD,OAAR;;EAIA,IAAME,gBAAgB,GAAGP,KAAK,CAACC,MAAND,CAAsB,IAAtBA,CAAzB;EAEA,IAAQQ,KAAR,GAAkBb,KAAK,CAACc,SAAxB,CAAQD,KAAR;EAEAR,KAAK,CAACU,SAANV,CAAgB,YAAM;IAEpB,IAAIO,gBAAgB,CAACF,OAArB,EAA8B;MAC5BE,gBAAgB,CAACF,OAAjBE,GAA2B,KAA3BA;MACA;IACD;;IAED,IAAIV,MAAM,KAAK,SAAf,EAA0B;MACxBS,SAAS,CAACK,QAAVL,CAAmB,GAAnBA;;MAEAJ,sBAASU,MAATV,CAAgBI,SAAhBJ,EAA2B;QACzBW,OAAO,EAAE,CADgB;QAEzBC,QAAQ,EAAE,MAAMN,KAFS;QAGzBO,eAAe,EAAE;MAHQ,CAA3Bb,EAIGc,KAJHd;IAHF,OAQO;MACLE,UAAU,CAACO,QAAXP,CAAoB,EAApBA;;MAEAF,sBAASU,MAATV,CAAgBE,UAAhBF,EAA4B;QAC1BW,OAAO,EAAEtB,YADiB;QAE1BuB,QAAQ,EAAE,MAAMN,KAFU;QAG1BO,eAAe,EAAE;MAHS,CAA5Bb,EAIGc,KAJHd;IAKD;EAvBH,GAwBG,CAACL,MAAD,EAASO,UAAT,EAAqBE,SAArB,EAAgCE,KAAhC,CAxBHR;EA0BA,IAAMiB,YAAY,GAAGlB,IAAI,CAACmB,KAALnB,IAAcJ,KAAK,CAACwB,MAANxB,CAAayB,MAAhD;EACA,IAAMC,cAAc,GAClBtB,IAAI,CAACsB,cAALtB,IACA,oBAAMJ,KAAK,CAACwB,MAANxB,CAAa2B,IAAnB,EACGC,KADH,CACS5B,KAAK,CAAC6B,IAAN7B,GAAa,GAAbA,GAAmB,IAD5B,EAEG8B,GAFH,GAGGC,MAHH,EAFF;EAOA,IAAIC,WAAJ,EAAyBC,UAAzB;EAEA,OACE5B,oBAAC6B,qCAAmBC,QAApB,QACIC,iBAAD,EAAsC;IACrC,IAAMC,OAAO,GACX,sBAAU;MACRC,YAAY,EAAEF,OAAF,SAAEA,WAAF,WAAEA,GAAF,MAAEA,UAAO,CAAEnC,KADf;MAERC,MAFQ,EAERA,MAFQ;MAGRD;IAHQ,CAAV,MAIO,SALT;;IAOA,IAAIH,QAAJ,EAAc;MACZkC,WAAW,GAAG,oBAAMhC,KAAK,CAACwB,MAANxB,CAAa2B,IAAnB,EAAyBC,KAAzB,CAA+B,IAA/B,EAAqCE,GAArC,GAA2CC,MAA3C,EAAdC;MACAC,UAAU,GAAGjC,KAAK,CAACwB,MAANxB,CAAaF,QAA1BmC;IAFF,OAGO;MACLD,WAAW,GAAG,oBAAMV,YAAN,EAAoBiB,IAApB,CAAyB,IAAzB,EAA+BT,GAA/B,GAAqCC,MAArC,EAAdC;MACAC,UAAU,GAAGI,OAAO,GAAGf,YAAH,GAAkBI,cAAtCO;IACD;;IAED,OACE5B,oBAACmC,wBAAD,eACMpC,IADN;MAEEqC,UAAU,MAFZ;MAGET,WAAW,EAAEA,WAHf;MAIEjC,OAAO,EACLD,QAAQ,GACJ4C,SADI,GAEJ,YAAM;QACJ,wBAAY;UACV3C,OADU,EACVA,OADU;UAEV4C,aAAa,EAAEP,OAAF,SAAEA,WAAF,WAAEA,GAAF,MAAEA,UAAO,CAAEO,aAFd;UAGV1C;QAHU,CAAZ;MARV;MAgBE2C,mBAAmB,EAAE9C,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAhB3D;MAiBE+C,0BAA0B,EACxBR,OAAO,GAAG,qBAAH,GAA2B,uBAlBtC;MAoBES,iBAAiB,EAAC,OApBpB;MAqBEC,kBAAkB,EAAE;QAAEjD,QAAF,EAAEA,QAAF;QAAYuC;MAAZ,CArBtB;MAsBEW,uBAAuB,EAAC,QAtB1B;MAuBEC,KAAK,EAAEC,MAAM,CAACC,SAvBhB;MAwBEhD,MAAM,EAAEA;IAxBV,IA0BEE,oBAAC+C,sBAASC,IAAV;MACEJ,KAAK,EAAE,CACLC,MAAM,CAACI,KADF,EAEL;QACEC,WAAW,EAAEtB,UADf;QAEEuB,WAAW,EAAE/C;MAFf,CAFK;IADT,GASG4B,OAAO,GACNhC,oBAAC+C,iBAAD;MAAMH,KAAK,EAAE,CAACQ,wBAAWC,YAAZ,EAA0BR,MAAM,CAACS,cAAjC;IAAb,GACEtD,oBAAC+C,sBAASC,IAAV;MACEJ,KAAK,EAAE,CACLC,MAAM,CAACU,GADF,EAEL;QACEC,eAAe,EAAE5B,UADnB;QAEE6B,SAAS,EAAE,CAAC;UAAEjD,KAAK,EAAEF;QAAT,CAAD;MAFb,CAFK;IADT,EADF,CADM,GAYJ,IArBN,CA1BF,CADF;EAjBJ,EADF;AAzDF;;AAoIAd,kBAAkB,CAACkE,WAAnBlE,GAAiC,qBAAjCA;;AAEA,IAAMqD,MAAM,GAAGO,wBAAWO,MAAXP,CAAkB;EAC/BN,SAAS,EAAE;IACTc,YAAY,EAAE;EADL,CADoB;EAI/BN,cAAc,EAAE;IACdO,UAAU,EAAE,QADE;IAEdC,cAAc,EAAE;EAFF,CAJe;EAQ/Bb,KAAK,EAAE;IACLc,MAAM,EAAE,EADH;IAELC,KAAK,EAAE,EAFF;IAGLJ,YAAY,EAAE,EAHT;IAILK,MAAM,EAAE;EAJH,CARwB;EAc/BV,GAAG,EAAE;IACHQ,MAAM,EAAE,EADL;IAEHC,KAAK,EAAE,EAFJ;IAGHJ,YAAY,EAAE;EAHX;AAd0B,CAAlBR,CAAf;;eAqBe,wBAAU5D,kBAAV;;;AAGf,IAAM0E,2BAA2B,GAAG,wBAAU1E,kBAAV,CAApC","names":["BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","testID","rest","React","useRef","Animated","Value","borderAnim","current","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","_RadioButtonGroup","Consumer","context","checked","contextValue","fade","_TouchableRipple","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","_reactNative","View","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"sources":["RadioButtonAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]}