{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AAWA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,wBAAwB,GAAG,EAAjC;AACA,IAAMC,mBAAmB,GAAG,EAA5B;;AAcA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAUX;EAAA,IATXC,KASW,QATXA,KASW;EAAA,IARXC,UAQW,QARXA,UAQW;EAAA,2BAPXC,UAOW;EAAA,IAPXA,UAOW,gCAPE,KAOF;EAAA,IANDC,YAMC,QANXC,QAMW;EAAA,IALXC,WAKW,QALXA,WAKW;EAAA,IAJXC,aAIW,QAJXA,aAIW;EAAA,IAHXC,QAGW,QAHXA,QAGW;EAAA,IAFXC,KAEW,QAFXA,KAEW;EAAA,IADRC,IACQ;EACX,IAAQC,IAAR,GAAyBF,KAAzB,CAAQE,IAAR;EAAA,IAAcC,MAAd,GAAyBH,KAAzB,CAAcG,MAAd;EACA,IAAMP,QAAQ,GAAGD,YAAY,IAAI,CAACM,IAAI,CAACG,OAAvC;EACA,IAAMC,qBAAqB,GACzBR,WAAW,IACX,oBAAMM,MAAM,CAACG,IAAb,EACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF;EASA,IAAMC,aAAa,GACjBC,sBAASC,EAATD,KAAgB,SAAhBA,IACAA,sBAASE,OAATF,IAAoBrB,mBADpBqB,IAEAjB,UAHF;;EAKA,IAAIH,eAAe,CAACuB,SAApB,EAA+B;IAC7B,OACEC,oBAACC,oCAAD,eACMf,IADN;MAEEL,QAAQ,EAAEA,QAFZ;MAGEc,aAAa,EAAEA,aAHjB;MAIEjB,UAAU,EACRA,UAAU,IAAI,IAAdA,GACIA,UADJA,GAEIwB,qCAAwBC,MAAxBD,CAA+BZ,qBAA/BY,EAAsDvB,UAAtDuB;IAPR,IAUEF,oBAACC,iBAAD;MAAMxB,KAAK,EAAE,CAACE,UAAU,IAAIyB,MAAM,CAACC,cAAtB,EAAsC5B,KAAtC;IAAb,GACGuB,KAAK,CAACM,QAANN,CAAeO,IAAfP,CAAoBhB,QAApBgB,CADH,CAVF,CADF;EAgBD;;EAED,OACEA,oBAACC,+BAAD,eACMf,IADN;IAEEL,QAAQ,EAAEA,QAFZ;IAGEJ,KAAK,EAAE,CAACE,UAAU,IAAIyB,MAAM,CAACC,cAAtB,EAAsC5B,KAAtC,CAHT;IAIEM,aAAa,EACXA,aAAa,IAAI,IAAjBA,GACIA,aADJA,GAEI,oBAAMO,qBAAN,EAA6BkB,IAA7B,CAAkC,GAAlC,EAAuCf,GAAvC,GAA6CC,MAA7C;EAPR,IAUGM,KAAK,CAACM,QAANN,CAAeO,IAAfP,CAAoBhB,QAApBgB,CAVH,CADF;AA9CF;;AA8DAxB,eAAe,CAACuB,SAAhBvB,GACEoB,sBAASC,EAATD,KAAgB,SAAhBA,IAA6BA,sBAASE,OAATF,IAAoBtB,wBADnDE;;AAGA,IAAM4B,MAAM,GAAGK,wBAAWC,MAAXD,CAAkB;EAC/BJ,cAAc,EAAE;IACdM,QAAQ,EAAE;EADI;AADe,CAAlBF,CAAf;;eAMe,wBAAUjC,eAAV","names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","style","background","borderless","disabledProp","disabled","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","Platform","OS","Version","supported","React","_reactNative","TouchableNativeFeedback","Ripple","styles","overflowHidden","Children","only","fade","StyleSheet","create","overflow"],"sources":["TouchableRipple.native.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const { dark, colors } = theme;\n  const disabled = disabledProp || !rest.onPress;\n  const calculatedRippleColor =\n    rippleColor ||\n    color(colors.text)\n      .alpha(dark ? 0.32 : 0.2)\n      .rgb()\n      .string();\n\n  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n  // https://github.com/facebook/react-native/issues/6480\n  const useForeground =\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_PIE &&\n    borderless;\n\n  if (TouchableRipple.supported) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        disabled={disabled}\n        useForeground={useForeground}\n        background={\n          background != null\n            ? background\n            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\n        }\n      >\n        <View style={[borderless && styles.overflowHidden, style]}>\n          {React.Children.only(children)}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableHighlight\n      {...rest}\n      disabled={disabled}\n      style={[borderless && styles.overflowHidden, style]}\n      underlayColor={\n        underlayColor != null\n          ? underlayColor\n          : color(calculatedRippleColor).fade(0.5).rgb().string()\n      }\n    >\n      {React.Children.only(children)}\n    </TouchableHighlight>\n  );\n};\n\nTouchableRipple.supported =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}