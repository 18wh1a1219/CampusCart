{"version":3,"mappings":"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","names":["ANIMATION_DURATION","CheckboxAndroid","status","theme","disabled","onPress","testID","rest","React","useRef","Animated","Value","scaleAnim","current","isFirstRendering","scale","animation","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","_TouchableRipple","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","_reactNative","View","transform","_MaterialCommunityIcon","allowFontScaling","name","size","direction","StyleSheet","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent","CheckboxAndroidWithTheme"],"sources":["CheckboxAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]}