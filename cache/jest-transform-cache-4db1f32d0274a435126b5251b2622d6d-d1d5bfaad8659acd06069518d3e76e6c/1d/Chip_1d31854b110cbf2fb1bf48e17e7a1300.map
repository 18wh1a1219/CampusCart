{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AAWA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA,IAAMA,IAAI,GAAG,SAAPA,IAAO,OAoBA;EAAA,qBAnBXC,IAmBW;EAAA,IAnBXA,IAmBW,0BAnBJ,MAmBI;EAAA,IAlBXC,QAkBW,QAlBXA,QAkBW;EAAA,IAjBXC,IAiBW,QAjBXA,IAiBW;EAAA,IAhBXC,MAgBW,QAhBXA,MAgBW;EAAA,yBAfXC,QAeW;EAAA,IAfXA,QAeW,8BAfA,KAeA;EAAA,yBAdXC,QAcW;EAAA,IAdXA,QAcW,8BAdA,KAcA;EAAA,IAbXC,kBAaW,QAbXA,kBAaW;EAAA,iCAZXC,2BAYW;EAAA,IAZXA,2BAYW,sCAZmB,OAYnB;EAAA,IAXXC,OAWW,QAXXA,OAWW;EAAA,IAVXC,WAUW,QAVXA,WAUW;EAAA,IATXC,OASW,QATXA,OASW;EAAA,IARXC,SAQW,QARXA,SAQW;EAAA,IAPXC,SAOW,QAPXA,SAOW;EAAA,IANXC,KAMW,QANXA,KAMW;EAAA,IALXC,KAKW,QALXA,KAKW;EAAA,IAJXC,MAIW,QAJXA,MAIW;EAAA,IAHXC,aAGW,QAHXA,aAGW;EAAA,IAFXC,aAEW,QAFXA,aAEW;EAAA,IADRC,IACQ;;EACX,oBAA+BC,KAAK,CAACC,MAAND,CAC7B,IAAIE,sBAASC,KAAb,CAAmB,CAAnB,CAD6BH,CAA/B;EAAA,IAAiBI,SAAjB,iBAAQC,OAAR;;EAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;IAC1B,IAAQC,KAAR,GAAkBZ,KAAK,CAACa,SAAxB,CAAQD,KAAR;;IACAL,sBAASO,MAATP,CAAgBE,SAAhBF,EAA2B;MACzBQ,OAAO,EAAE,CADgB;MAEzBC,QAAQ,EAAE,MAAMJ,KAFS;MAGzBK,eAAe,EAAE;IAHQ,CAA3BV,EAIGW,KAJHX;EAFF;;EASA,IAAMY,cAAc,GAAG,SAAjBA,cAAiB,GAAM;IAC3B,IAAQP,KAAR,GAAkBZ,KAAK,CAACa,SAAxB,CAAQD,KAAR;;IACAL,sBAASO,MAATP,CAAgBE,SAAhBF,EAA2B;MACzBQ,OAAO,EAAE,CADgB;MAEzBC,QAAQ,EAAE,MAAMJ,KAFS;MAGzBK,eAAe,EAAE;IAHQ,CAA3BV,EAIGW,KAJHX;EAFF;;EASA,IAAQa,IAAR,GAAyBpB,KAAzB,CAAQoB,IAAR;EAAA,IAAcC,MAAd,GAAyBrB,KAAzB,CAAcqB,MAAd;EACA,IAAMC,sBAAsB,GAC1BpC,IAAI,KAAK,UAATA,GAAsBmC,MAAM,CAACE,OAA7BrC,GAAuCkC,IAAI,GAAG,SAAH,GAAe,SAD5D;;EAGA,YACGI,wBAAWC,OAAXD,CAAmBzB,KAAnByB,KAA6B,EADhC;EAAA,kCAAQE,eAAR;EAAA,IAAQA,eAAR,sCAA0BJ,sBAA1B;EAAA,+BAAkDK,YAAlD;EAAA,IAAkDA,YAAlD,mCAAiE,EAAjE;;EAGA,IAAMC,WAAW,GACf1C,IAAI,KAAK,UAATA,GACI,oBACEgB,aAAa,KAAK2B,SAAlB3B,GACIA,aADJA,GAEI,oBAAMkB,IAAI,GAAGU,aAAH,GAAWC,aAArB,CAHN,EAKGC,KALH,CAKS,IALT,EAMGC,GANH,GAOGC,MAPH,EADJhD,GASIwC,eAVN;EAWA,IAAMS,SAAS,GAAG5C,QAAQ,GACtB8B,MAAM,CAAC9B,QADe,GAEtB,oBAAMW,aAAa,KAAK2B,SAAlB3B,GAA8BA,aAA9BA,GAA8CmB,MAAM,CAACe,IAA3D,EACGJ,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EAFJ;EAMA,IAAMG,SAAS,GAAG9C,QAAQ,GACtB8B,MAAM,CAAC9B,QADe,GAEtB,oBAAMW,aAAa,KAAK2B,SAAlB3B,GAA8BA,aAA9BA,GAA8CmB,MAAM,CAACe,IAA3D,EACGJ,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EAFJ;EAOA,IAAMI,qBAAqB,GACzB,OAAOZ,eAAP,KAA2B,QAA3B,GACIA,eADJ,GAEIJ,sBAHN;EAIA,IAAMiB,uBAAuB,GAAG,CAC9BnB,IAAI,GACA,oBAAMkB,qBAAN,EAA6BE,OAA7B,CAAqCtD,IAAI,KAAK,UAATA,GAAsB,GAAtBA,GAA4B,GAAjE,CADA,GAEA,oBAAMoD,qBAAN,EAA6BG,MAA7B,CAAoCvD,IAAI,KAAK,UAATA,GAAsB,IAAtBA,GAA6B,GAAjE,CAH0B,EAK7B+C,GAL6B,GAM7BC,MAN6B,EAAhC;EAQA,IAAMQ,aAAa,GAAGxC,aAAa,GAC/B,oBAAMA,aAAN,EAAqByC,IAArB,CAA0B,GAA1B,EAA+BV,GAA/B,GAAqCC,MAArC,EAD+B,GAE/BK,uBAFJ;EAIA,IAAMK,mBAAmB,GAAG,CAAC,QAAD,CAA5B;EACA,IAAMC,kBAAsC,GAAG;IAC7CvD,QAD6C,EAC7CA,QAD6C;IAE7CC;EAF6C,CAA/C;;EAKA,IAAID,QAAJ,EAAc;IACZsD,mBAAmB,CAACE,IAApBF,CAAyB,UAAzBA;EACD;;EAED,IAAIrD,QAAJ,EAAc;IACZqD,mBAAmB,CAACE,IAApBF,CAAyB,UAAzBA;EACD;;EAED,OACEvC,oBAAC0C,gBAAD;IACEhD,KAAK,EACH,CACEiD,MAAM,CAACC,SADT,EAEE;MACExC,SAAS,EAAEyC,sBAASC,EAATD,KAAgB,SAAhBA,GAA4BzC,SAA5ByC,GAAwC,CADrD;MAEExB,eAAe,EAAEpC,QAAQ,GACrBiD,uBADqB,GAErBb,eAJN;MAKEE,WALF,EAKEA,WALF;MAMED;IANF,CAFF,EAUE5B,KAVF;EAFJ,GAeMK,IAfN,GAiBEC,oBAAC+C,wBAAD;IACEC,UAAU,MADZ;IAEEC,YAAY,EAAE,CAFhB;IAGEvD,KAAK,EAAE,CAAC;MAAE4B;IAAF,CAAD,EAAmBqB,MAAM,CAACO,SAA1B,CAHT;IAIE7D,OAAO,EAAEA,OAJX;IAKEC,WAAW,EAAEA,WALf;IAME6D,SAAS,EAAE7C,aANb;IAOE8C,UAAU,EAAEtC,cAPd;IAQEuB,aAAa,EAAEA,aARjB;IASEnD,QAAQ,EAAEA,QATZ;IAUEC,kBAAkB,EAAEA,kBAVtB;IAYEoD,mBAAmB,EAAEA,mBAZvB;IAaEc,0BAA0B,EAAC,QAb7B;IAcEC,iBAAiB,EAAC,QAdpB;IAeEd,kBAAkB,EAAEA,kBAftB;IAgBE5C,MAAM,EAAEA;EAhBV,GAkBEI,oBAACuD,iBAAD;IAAM7D,KAAK,EAAE,CAACiD,MAAM,CAACa,OAAR,EAAiB;MAAEC,YAAY,EAAElE,OAAO,GAAG,EAAH,GAAQ;IAA/B,CAAjB;EAAb,GACGP,MAAM,IAAI,CAACD,IAAXC,GACCgB,oBAACuD,iBAAD;IAAM7D,KAAK,EAAE,CAACiD,MAAM,CAACe,aAAR,EAAuBxE,QAAQ,IAAI;MAAEyE,OAAO,EAAE;IAAX,CAAnC;EAAb,GACG3D,KAAK,CAAC4D,cAAN5D,CAAqBhB,MAArBgB,IACGA,KAAK,CAAC6D,YAAN7D,CAAmBhB,MAAnBgB,EAA2B;IACzBN,KAAK,EAAE,CAACiD,MAAM,CAAC3D,MAAR,EAAgBA,MAAM,CAAC8E,KAAP9E,CAAaU,KAA7B;EADkB,CAA3BM,CADHA,GAIGhB,MALN,CADDA,GAQG,IATN,EAUGD,IAAI,IAAIE,QAARF,GACCiB,oBAACuD,iBAAD;IACE7D,KAAK,EAAE,CACLiD,MAAM,CAAC5D,IADF,EAELC,MAAM,GAAG,CAAC2D,MAAM,CAAC3D,MAAR,EAAgB2D,MAAM,CAACoB,cAAvB,CAAH,GAA4C,IAF7C;EADT,GAMGhF,IAAI,GACHiB,oBAACgE,aAAD;IACEC,MAAM,EAAElF,IADV;IAEEmF,KAAK,EAAElF,MAAM,GAAGyC,aAAH,GAAWO,SAF1B;IAGEmC,IAAI,EAAE;EAHR,EADG,GAOHnE,oBAACoE,8BAAD;IACEC,IAAI,EAAC,OADP;IAEEH,KAAK,EAAElF,MAAM,GAAGyC,aAAH,GAAWO,SAF1B;IAGEmC,IAAI,EAAE,EAHR;IAIEG,SAAS,EAAC;EAJZ,EAbJ,CADDvF,GAsBG,IAhCN,EAiCEiB,oBAACuE,aAAD;IACEC,UAAU,EAAE,KADd;IAEEC,aAAa,EAAE,CAFjB;IAGE/E,KAAK,EAAE,CACLiD,MAAM,CAACZ,IADF,6BAGApC,KAAK,CAAC+E,KAAN/E,CAAYgF,OAHZ;MAIHT,KAAK,EAAEpC,SAJJ;MAKH8C,WAAW,EAAErF,OAAO,GAAG,CAAH,GAAO,CALxB;MAMHsF,UAAU,EAAE7F,MAAM,IAAID,IAAVC,IAAkBC,QAAlBD,GAA6B,CAA7BA,GAAiC;IAN1C,IAQLS,SARK,CAHT;IAaEK,aAAa,EAAEA;EAbjB,GAeGhB,QAfH,CAjCF,CAlBF,CAjBF,EAuFGS,OAAO,GACNS,oBAACuD,iBAAD;IAAM7D,KAAK,EAAEiD,MAAM,CAACmC;EAApB,GACE9E,oBAACuD,qCAAD;IACElE,OAAO,EAAEE,OADX;IAGEgD,mBAAmB,EAAC,QAHtB;IAIEc,0BAA0B,EAAC,QAJ7B;IAKEC,iBAAiB,EAAC,QALpB;IAMEnE,kBAAkB,EAAEC;EANtB,GAQEY,oBAACuD,iBAAD;IAAM7D,KAAK,EAAE,CAACiD,MAAM,CAAC5D,IAAR,EAAc4D,MAAM,CAACnD,SAArB;EAAb,GACGA,SAAS,GACRQ,oBAACgE,aAAD;IAAMC,MAAM,EAAEzE,SAAd;IAAyB0E,KAAK,EAAElC,SAAhC;IAA2CmC,IAAI,EAAE;EAAjD,EADQ,GAGRnE,oBAACoE,8BAAD;IACEC,IAAI,EAAC,cADP;IAEEF,IAAI,EAAE,EAFR;IAGED,KAAK,EAAElC,SAHT;IAIEsC,SAAS,EAAC;EAJZ,EAJJ,CARF,CADF,CADM,GAwBJ,IA/GN,CADF;AAxGF;;AA6NA,IAAM3B,MAAM,GAAGxB,wBAAW4D,MAAX5D,CAAkB;EAC/ByB,SAAS,EAAE;IACToC,WAAW,EAAE7D,wBAAW8D,aADf;IAETC,WAAW,EAAE,OAFJ;IAGTC,aAAa,EAAEtC,sBAASuC,MAATvC,CAAgB;MAAEwC,OAAO,EAAE,QAAX;MAAqBC,GAAG,EAAE;IAA1B,CAAhBzC;EAHN,CADoB;EAM/BW,OAAO,EAAE;IACP2B,aAAa,EAAE,KADR;IAEPI,UAAU,EAAE,QAFL;IAGPC,WAAW,EAAE,CAHN;IAIPC,QAAQ,EAAE,UAJH;IAKPC,QAAQ,EAAE;EALH,CANsB;EAa/B3G,IAAI,EAAE;IACJ4G,OAAO,EAAE,CADL;IAEJC,SAAS,EAAE;EAFP,CAbyB;EAiB/BpG,SAAS,EAAE;IACToF,WAAW,EAAE;EADJ,CAjBoB;EAoB/B7C,IAAI,EAAE;IACJ8D,SAAS,EAAE,EADP;IAEJC,UAAU,EAAE,EAFR;IAGJC,iBAAiB,EAAE,QAHf;IAIJC,cAAc,EAAE;EAJZ,CApByB;EA0B/BhH,MAAM,EAAE;IACNiH,KAAK,EAAE,EADD;IAENC,MAAM,EAAE,EAFF;IAGN5E,YAAY,EAAE;EAHR,CA1BuB;EA+B/BoC,aAAa,EAAE;IACbkB,WAAW,EAAE;EADA,CA/BgB;EAkC/Bb,cAAc,EAAE;IACd0B,QAAQ,EAAE,UADI;IAEdU,GAAG,EAAE,CAFS;IAGdC,IAAI,EAAE,CAHQ;IAId/E,eAAe,EAAE;EAJH,CAlCe;EAwC/ByD,gBAAgB,EAAE;IAChBW,QAAQ,EAAE,UADM;IAEhBY,KAAK,EAAE,CAFS;IAGhBH,MAAM,EAAE,MAHQ;IAIhBI,cAAc,EAAE,QAJA;IAKhBf,UAAU,EAAE;EALI,CAxCa;EA+C/BrC,SAAS,EAAE;IACTwC,QAAQ,EAAE;EADD;AA/CoB,CAAlBvE,CAAf;;eAoDe,wBAAUvC,IAAV","names":["Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","ellipsizeMode","rest","React","useRef","Animated","Value","elevation","current","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","dark","colors","defaultBackgroundColor","surface","StyleSheet","flatten","backgroundColor","borderRadius","borderColor","undefined","white","black","alpha","rgb","string","textColor","text","iconColor","backgroundColorString","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","_Surface","styles","container","Platform","OS","_TouchableRipple","borderless","delayPressIn","touchable","onPressIn","onPressOut","accessibilityComponentType","accessibilityRole","_reactNative","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","_Icon","source","color","size","_MaterialCommunityIcon","name","direction","_Text","selectable","numberOfLines","fonts","regular","marginRight","marginLeft","closeButtonStyle","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n  const defaultBackgroundColor =\n    mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n\n  const { backgroundColor = defaultBackgroundColor, borderRadius = 16 } =\n    (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n\n  const backgroundColorString =\n    typeof backgroundColor === 'string'\n      ? backgroundColor\n      : defaultBackgroundColor;\n  const selectedBackgroundColor = (\n    dark\n      ? color(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={16} />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"close-circle\"\n                  size={16}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Chip);\n"]}