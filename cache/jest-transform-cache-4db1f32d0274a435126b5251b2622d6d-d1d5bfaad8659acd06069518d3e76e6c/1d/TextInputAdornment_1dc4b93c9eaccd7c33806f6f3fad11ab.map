{"version":3,"mappings":"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","names":["getAdornmentConfig","left","right","adornmentConfig","side","AdornmentSide","Left","adornment","Right","forEach","React","isValidElement","type","TextInputAffix","AdornmentType","Affix","TextInputIcon","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","InputMode","Outlined","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","_react","inputAdornmentComponent","commonProps","key","testID","_TextInputIcon","icon","_TextInputAffix","affix","onLayout"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]}