{"version":3,"names":["Text","React","forwardRef","props","forwardedRef","accessible","allowFontScaling","ellipsizeMode","onLongPress","onPress","onPressIn","onPressOut","onResponderGrant","onResponderMove","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","pressRetentionOffset","suppressHighlighting","restProps","isHighlighted","setHighlighted","isPressable","disabled","initialized","useLazyInitialization","config","pressRectOffset","event","onResponderTerminationRequest_DEPRECATED","onStartShouldSetResponder_DEPRECATED","eventHandlers","eventHandlersForText","selectionColor","style","__DEV__","PressabilityDebug","isEnabled","StyleSheet","compose","color","numberOfLines","console","error","hasTextAncestor","TextAncestor","displayName","propTypes","require","TextPropTypes","newValue","oldValue","setValue","module","exports"],"sources":["Text.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport StyleSheet from '../StyleSheet/StyleSheet';\nimport processColor from '../StyleSheet/processColor';\nimport TextAncestor from './TextAncestor';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\nimport {type TextProps} from './TextProps';\nimport * as React from 'react';\nimport {useContext, useMemo, useState} from 'react';\n\n/**\n * Text is the fundamental component for displaying text.\n *\n * @see https://reactnative.dev/docs/text\n */\nconst Text: React.AbstractComponent<\n  TextProps,\n  React.ElementRef<typeof NativeText | typeof NativeVirtualText>,\n> = React.forwardRef((props: TextProps, forwardedRef) => {\n  const {\n    accessible,\n    allowFontScaling,\n    ellipsizeMode,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onResponderGrant,\n    onResponderMove,\n    onResponderRelease,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onStartShouldSetResponder,\n    pressRetentionOffset,\n    suppressHighlighting,\n    ...restProps\n  } = props;\n\n  const [isHighlighted, setHighlighted] = useState(false);\n\n  const isPressable =\n    (onPress != null ||\n      onLongPress != null ||\n      onStartShouldSetResponder != null) &&\n    restProps.disabled !== true;\n\n  const initialized = useLazyInitialization(isPressable);\n  const config = useMemo(\n    () =>\n      initialized\n        ? {\n            disabled: !isPressable,\n            pressRectOffset: pressRetentionOffset,\n            onLongPress,\n            onPress,\n            onPressIn(event) {\n              setHighlighted(!suppressHighlighting);\n              onPressIn?.(event);\n            },\n            onPressOut(event) {\n              setHighlighted(false);\n              onPressOut?.(event);\n            },\n            onResponderTerminationRequest_DEPRECATED:\n              onResponderTerminationRequest,\n            onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder,\n          }\n        : null,\n    [\n      initialized,\n      isPressable,\n      pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      suppressHighlighting,\n    ],\n  );\n\n  const eventHandlers = usePressability(config);\n  const eventHandlersForText = useMemo(\n    () =>\n      eventHandlers == null\n        ? null\n        : {\n            onResponderGrant(event) {\n              eventHandlers.onResponderGrant(event);\n              if (onResponderGrant != null) {\n                onResponderGrant(event);\n              }\n            },\n            onResponderMove(event) {\n              eventHandlers.onResponderMove(event);\n              if (onResponderMove != null) {\n                onResponderMove(event);\n              }\n            },\n            onResponderRelease(event) {\n              eventHandlers.onResponderRelease(event);\n              if (onResponderRelease != null) {\n                onResponderRelease(event);\n              }\n            },\n            onResponderTerminate(event) {\n              eventHandlers.onResponderTerminate(event);\n              if (onResponderTerminate != null) {\n                onResponderTerminate(event);\n              }\n            },\n            onResponderTerminationRequest:\n              eventHandlers.onResponderTerminationRequest,\n            onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder,\n          },\n    [\n      eventHandlers,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n    ],\n  );\n\n  // TODO: Move this processing to the view configuration.\n  const selectionColor =\n    restProps.selectionColor == null\n      ? null\n      : processColor(restProps.selectionColor);\n\n  let style = restProps.style;\n  if (__DEV__) {\n    if (PressabilityDebug.isEnabled() && onPress != null) {\n      style = StyleSheet.compose(restProps.style, {\n        color: 'magenta',\n      });\n    }\n  }\n\n  let numberOfLines = restProps.numberOfLines;\n  if (numberOfLines != null && !(numberOfLines >= 0)) {\n    console.error(\n      `'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`,\n    );\n    numberOfLines = 0;\n  }\n\n  const hasTextAncestor = useContext(TextAncestor);\n\n  return hasTextAncestor ? (\n    <NativeVirtualText\n      {...restProps}\n      {...eventHandlersForText}\n      isHighlighted={isHighlighted}\n      isPressable={isPressable}\n      numberOfLines={numberOfLines}\n      selectionColor={selectionColor}\n      style={style}\n      ref={forwardedRef}\n    />\n  ) : (\n    <TextAncestor.Provider value={true}>\n      <NativeText\n        {...restProps}\n        {...eventHandlersForText}\n        accessible={accessible !== false}\n        allowFontScaling={allowFontScaling !== false}\n        ellipsizeMode={ellipsizeMode ?? 'tail'}\n        isHighlighted={isHighlighted}\n        numberOfLines={numberOfLines}\n        selectionColor={selectionColor}\n        style={style}\n        ref={forwardedRef}\n      />\n    </TextAncestor.Provider>\n  );\n});\n\nText.displayName = 'Text';\n\n/**\n * Switch to `deprecated-react-native-prop-types` for compatibility with future\n * releases. This is deprecated and will be removed in the future.\n */\nText.propTypes = require('deprecated-react-native-prop-types').TextPropTypes;\n\n/**\n * Returns false until the first time `newValue` is true, after which this will\n * always return true. This is necessary to lazily initialize `Pressability` so\n * we do not eagerly create one for every pressable `Text` component.\n */\nfunction useLazyInitialization(newValue: boolean): boolean {\n  const [oldValue, setValue] = useState(newValue);\n  if (!oldValue && newValue) {\n    setValue(newValue);\n  }\n  return oldValue;\n}\n\nmodule.exports = Text;\n"],"mappings":"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"}