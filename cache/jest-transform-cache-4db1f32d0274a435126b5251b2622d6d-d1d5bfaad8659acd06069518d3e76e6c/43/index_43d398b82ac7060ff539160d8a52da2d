0121e845640eb6800dcd3c793bab3ef7
"use strict";

exports.__esModule = true;
exports.default = void 0;
var unitlessNumbers = {
  animationIterationCount: true,
  aspectRatio: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexOrder: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  fontWeight: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowGap: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnGap: true,
  gridColumnStart: true,
  lineClamp: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  scaleZ: true,
  shadowOpacity: true
};
var prefixes = ['ms', 'Moz', 'O', 'Webkit'];

var prefixKey = function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
};

Object.keys(unitlessNumbers).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    unitlessNumbers[prefixKey(prefix, prop)] = unitlessNumbers[prop];
  });
});
var _default = unitlessNumbers;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ1bml0bGVzc051bWJlcnMiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhPcmRlciIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmb250V2VpZ2h0IiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93R2FwIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uR2FwIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUNsYW1wIiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJzY2FsZVoiLCJzaGFkb3dPcGFjaXR5IiwicHJlZml4ZXMiLCJwcmVmaXhLZXkiLCJwcmVmaXgiLCJrZXkiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0cmluZyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwicHJvcCIsIl9kZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBOaWNvbGFzIEdhbGxhZ2hlci5cbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG52YXIgdW5pdGxlc3NOdW1iZXJzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcbiAgYXNwZWN0UmF0aW86IHRydWUsXG4gIGJvcmRlckltYWdlT3V0c2V0OiB0cnVlLFxuICBib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuICBib3JkZXJJbWFnZVdpZHRoOiB0cnVlLFxuICBib3hGbGV4OiB0cnVlLFxuICBib3hGbGV4R3JvdXA6IHRydWUsXG4gIGJveE9yZGluYWxHcm91cDogdHJ1ZSxcbiAgY29sdW1uQ291bnQ6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4T3JkZXI6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBncmlkUm93OiB0cnVlLFxuICBncmlkUm93RW5kOiB0cnVlLFxuICBncmlkUm93R2FwOiB0cnVlLFxuICBncmlkUm93U3RhcnQ6IHRydWUsXG4gIGdyaWRDb2x1bW46IHRydWUsXG4gIGdyaWRDb2x1bW5FbmQ6IHRydWUsXG4gIGdyaWRDb2x1bW5HYXA6IHRydWUsXG4gIGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG4gIC8vIFNWRy1yZWxhdGVkXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBmbG9vZE9wYWNpdHk6IHRydWUsXG4gIHN0b3BPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNoYXJyYXk6IHRydWUsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IHRydWUsXG4gIHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG4gIHN0cm9rZU9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZVdpZHRoOiB0cnVlLFxuICAvLyB0cmFuc2Zvcm0gdHlwZXNcbiAgc2NhbGU6IHRydWUsXG4gIHNjYWxlWDogdHJ1ZSxcbiAgc2NhbGVZOiB0cnVlLFxuICBzY2FsZVo6IHRydWUsXG4gIC8vIFJOIHByb3BlcnRpZXNcbiAgc2hhZG93T3BhY2l0eTogdHJ1ZVxufTtcbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cblxudmFyIHByZWZpeGVzID0gWydtcycsICdNb3onLCAnTycsICdXZWJraXQnXTtcblxudmFyIHByZWZpeEtleSA9IGZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn07XG5cbk9iamVjdC5rZXlzKHVuaXRsZXNzTnVtYmVycykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICB1bml0bGVzc051bWJlcnNbcHJlZml4S2V5KHByZWZpeCwgcHJvcCldID0gdW5pdGxlc3NOdW1iZXJzW3Byb3BdO1xuICB9KTtcbn0pO1xudmFyIF9kZWZhdWx0ID0gdW5pdGxlc3NOdW1iZXJzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPLENBQUNDLFVBQVIsR0FBcUIsSUFBckI7QUFDQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7QUFXQSxJQUFJQyxlQUFlLEdBQUc7RUFDcEJDLHVCQUF1QixFQUFFLElBREw7RUFFcEJDLFdBQVcsRUFBRSxJQUZPO0VBR3BCQyxpQkFBaUIsRUFBRSxJQUhDO0VBSXBCQyxnQkFBZ0IsRUFBRSxJQUpFO0VBS3BCQyxnQkFBZ0IsRUFBRSxJQUxFO0VBTXBCQyxPQUFPLEVBQUUsSUFOVztFQU9wQkMsWUFBWSxFQUFFLElBUE07RUFRcEJDLGVBQWUsRUFBRSxJQVJHO0VBU3BCQyxXQUFXLEVBQUUsSUFUTztFQVVwQkMsSUFBSSxFQUFFLElBVmM7RUFXcEJDLFFBQVEsRUFBRSxJQVhVO0VBWXBCQyxTQUFTLEVBQUUsSUFaUztFQWFwQkMsWUFBWSxFQUFFLElBYk07RUFjcEJDLFVBQVUsRUFBRSxJQWRRO0VBZXBCQyxZQUFZLEVBQUUsSUFmTTtFQWdCcEJDLFVBQVUsRUFBRSxJQWhCUTtFQWlCcEJDLE9BQU8sRUFBRSxJQWpCVztFQWtCcEJDLFVBQVUsRUFBRSxJQWxCUTtFQW1CcEJDLFVBQVUsRUFBRSxJQW5CUTtFQW9CcEJDLFlBQVksRUFBRSxJQXBCTTtFQXFCcEJDLFVBQVUsRUFBRSxJQXJCUTtFQXNCcEJDLGFBQWEsRUFBRSxJQXRCSztFQXVCcEJDLGFBQWEsRUFBRSxJQXZCSztFQXdCcEJDLGVBQWUsRUFBRSxJQXhCRztFQXlCcEJDLFNBQVMsRUFBRSxJQXpCUztFQTBCcEJDLE9BQU8sRUFBRSxJQTFCVztFQTJCcEJDLEtBQUssRUFBRSxJQTNCYTtFQTRCcEJDLE9BQU8sRUFBRSxJQTVCVztFQTZCcEJDLE9BQU8sRUFBRSxJQTdCVztFQThCcEJDLE1BQU0sRUFBRSxJQTlCWTtFQStCcEJDLE1BQU0sRUFBRSxJQS9CWTtFQWdDcEJDLElBQUksRUFBRSxJQWhDYztFQWtDcEJDLFdBQVcsRUFBRSxJQWxDTztFQW1DcEJDLFlBQVksRUFBRSxJQW5DTTtFQW9DcEJDLFdBQVcsRUFBRSxJQXBDTztFQXFDcEJDLGVBQWUsRUFBRSxJQXJDRztFQXNDcEJDLGdCQUFnQixFQUFFLElBdENFO0VBdUNwQkMsZ0JBQWdCLEVBQUUsSUF2Q0U7RUF3Q3BCQyxhQUFhLEVBQUUsSUF4Q0s7RUF5Q3BCQyxXQUFXLEVBQUUsSUF6Q087RUEyQ3BCQyxLQUFLLEVBQUUsSUEzQ2E7RUE0Q3BCQyxNQUFNLEVBQUUsSUE1Q1k7RUE2Q3BCQyxNQUFNLEVBQUUsSUE3Q1k7RUE4Q3BCQyxNQUFNLEVBQUUsSUE5Q1k7RUFnRHBCQyxhQUFhLEVBQUU7QUFoREssQ0FBdEI7QUF1REEsSUFBSUMsUUFBUSxHQUFHLENBQUMsSUFBRCxFQUFPLEtBQVAsRUFBYyxHQUFkLEVBQW1CLFFBQW5CLENBQWY7O0FBRUEsSUFBSUMsU0FBUyxHQUFHLFNBQVNBLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQTJCQyxHQUEzQixFQUFnQztFQUM5QyxPQUFPRCxNQUFNLEdBQUdDLEdBQUcsQ0FBQ0MsTUFBSixDQUFXLENBQVgsRUFBY0MsV0FBZCxFQUFULEdBQXVDRixHQUFHLENBQUNHLFNBQUosQ0FBYyxDQUFkLENBQTlDO0FBQ0QsQ0FGRDs7QUFJQUMsTUFBTSxDQUFDQyxJQUFQLENBQVl0RCxlQUFaLEVBQTZCdUQsT0FBN0IsQ0FBcUMsVUFBVUMsSUFBVixFQUFnQjtFQUNuRFYsUUFBUSxDQUFDUyxPQUFULENBQWlCLFVBQVVQLE1BQVYsRUFBa0I7SUFDakNoRCxlQUFlLENBQUMrQyxTQUFTLENBQUNDLE1BQUQsRUFBU1EsSUFBVCxDQUFWLENBQWYsR0FBMkN4RCxlQUFlLENBQUN3RCxJQUFELENBQTFEO0VBQ0QsQ0FGRDtBQUdELENBSkQ7QUFLQSxJQUFJQyxRQUFRLEdBQUd6RCxlQUFmO0FBQ0FILE9BQU8sQ0FBQ0UsT0FBUixHQUFrQjBELFFBQWxCO0FBQ0FDLE1BQU0sQ0FBQzdELE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIifQ==