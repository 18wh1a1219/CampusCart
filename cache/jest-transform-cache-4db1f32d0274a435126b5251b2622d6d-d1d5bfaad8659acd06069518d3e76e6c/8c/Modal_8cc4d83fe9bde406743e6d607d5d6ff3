fa1d484f5cb5a066d4858159cbf04aee
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Modal;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeIphoneXHelper = require("react-native-iphone-x-helper");

var _Surface = _interopRequireDefault(require("./Surface"));

var _theming = require("../core/theming");

var _useAnimatedValue = _interopRequireDefault(require("../utils/useAnimatedValue"));

var _addEventListener = require("../utils/addEventListener");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var DEFAULT_DURATION = 220;
var TOP_INSET = (0, _reactNativeIphoneXHelper.getStatusBarHeight)(true);
var BOTTOM_INSET = (0, _reactNativeIphoneXHelper.getBottomSpace)();

function Modal(_ref) {
  var _ref$dismissable = _ref.dismissable,
      dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,
      _ref$visible = _ref.visible,
      visible = _ref$visible === void 0 ? false : _ref$visible,
      _ref$overlayAccessibi = _ref.overlayAccessibilityLabel,
      overlayAccessibilityLabel = _ref$overlayAccessibi === void 0 ? 'Close modal' : _ref$overlayAccessibi,
      onDismiss = _ref.onDismiss,
      children = _ref.children,
      contentContainerStyle = _ref.contentContainerStyle,
      style = _ref.style;
  var visibleRef = React.useRef(visible);
  React.useEffect(function () {
    visibleRef.current = visible;
  });

  var _ref3 = (0, _theming.useTheme)(),
      colors = _ref3.colors,
      animation = _ref3.animation;

  var opacity = (0, _useAnimatedValue.default)(visible ? 1 : 0);

  var _React$useState = React.useState(visible),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      rendered = _React$useState2[0],
      setRendered = _React$useState2[1];

  if (visible && !rendered) {
    setRendered(true);
  }

  var handleBack = function handleBack() {
    if (dismissable) {
      hideModal();
    }

    return true;
  };

  var subscription = React.useRef(undefined);

  var showModal = function showModal() {
    var _subscription$current;

    (_subscription$current = subscription.current) === null || _subscription$current === void 0 ? void 0 : _subscription$current.remove();
    subscription.current = (0, _addEventListener.addEventListener)(_reactNative.BackHandler, 'hardwareBackPress', handleBack);
    var scale = animation.scale;

    _reactNative.Animated.timing(opacity, {
      toValue: 1,
      duration: scale * DEFAULT_DURATION,
      easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
      useNativeDriver: true
    }).start();
  };

  var removeListeners = function removeListeners() {
    var _subscription$current2;

    if ((_subscription$current2 = subscription.current) !== null && _subscription$current2 !== void 0 && _subscription$current2.remove) {
      var _subscription$current3;

      (_subscription$current3 = subscription.current) === null || _subscription$current3 === void 0 ? void 0 : _subscription$current3.remove();
    } else {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', handleBack);
    }
  };

  var hideModal = function hideModal() {
    removeListeners();
    var scale = animation.scale;

    _reactNative.Animated.timing(opacity, {
      toValue: 0,
      duration: scale * DEFAULT_DURATION,
      easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
      useNativeDriver: true
    }).start(function (_ref2) {
      var finished = _ref2.finished;

      if (!finished) {
        return;
      }

      if (visible && onDismiss) {
        onDismiss();
      }

      if (visibleRef.current) {
        showModal();
      } else {
        setRendered(false);
      }
    });
  };

  var prevVisible = React.useRef(null);
  React.useEffect(function () {
    if (prevVisible.current !== visible) {
      if (visible) {
        showModal();
      } else {
        hideModal();
      }
    }

    prevVisible.current = visible;
  });
  React.useEffect(function () {
    return removeListeners;
  }, []);
  if (!rendered) return null;
  return React.createElement(_reactNative.Animated.View, {
    pointerEvents: visible ? 'auto' : 'none',
    accessibilityViewIsModal: true,
    accessibilityLiveRegion: "polite",
    style: _reactNative.StyleSheet.absoluteFill,
    onAccessibilityEscape: hideModal
  }, React.createElement(_reactNative.TouchableWithoutFeedback, {
    accessibilityLabel: overlayAccessibilityLabel,
    accessibilityRole: "button",
    disabled: !dismissable,
    onPress: dismissable ? hideModal : undefined,
    importantForAccessibility: "no"
  }, React.createElement(_reactNative.Animated.View, {
    style: [styles.backdrop, {
      backgroundColor: colors.backdrop,
      opacity: opacity
    }]
  })), React.createElement(_reactNative.View, {
    style: [styles.wrapper, {
      marginTop: TOP_INSET,
      marginBottom: BOTTOM_INSET
    }, style],
    pointerEvents: "box-none"
  }, React.createElement(_Surface.default, {
    style: [{
      opacity: opacity
    }, styles.content, contentContainerStyle]
  }, children)));
}

var styles = _reactNative.StyleSheet.create({
  backdrop: {
    flex: 1
  },
  wrapper: (0, _extends2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
    justifyContent: 'center'
  }),
  content: {
    backgroundColor: 'transparent',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,