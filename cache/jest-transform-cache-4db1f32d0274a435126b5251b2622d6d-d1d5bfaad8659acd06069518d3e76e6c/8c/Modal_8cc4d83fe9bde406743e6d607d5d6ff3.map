{"version":3,"mappings":"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","names":["DEFAULT_DURATION","TOP_INSET","BOTTOM_INSET","Modal","dismissable","visible","overlayAccessibilityLabel","onDismiss","children","contentContainerStyle","style","visibleRef","React","useRef","useEffect","current","colors","animation","opacity","useState","rendered","setRendered","handleBack","hideModal","subscription","undefined","showModal","remove","BackHandler","scale","Animated","timing","toValue","duration","easing","Easing","out","cubic","useNativeDriver","start","removeListeners","_subscription$current2","removeEventListener","finished","prevVisible","_reactNative","View","pointerEvents","accessibilityViewIsModal","accessibilityLiveRegion","StyleSheet","absoluteFill","onAccessibilityEscape","accessibilityLabel","accessibilityRole","disabled","onPress","importantForAccessibility","styles","backdrop","backgroundColor","wrapper","marginTop","marginBottom","_Surface","content","create","flex","absoluteFillObject","justifyContent"],"sources":["Modal.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  View,\n  NativeEventSubscription,\n} from 'react-native';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { useTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\nimport { addEventListener } from '../utils/addEventListener';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style for the wrapper of the modal.\n   * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nexport default function Modal({\n  dismissable = true,\n  visible = false,\n  overlayAccessibilityLabel = 'Close modal',\n  onDismiss,\n  children,\n  contentContainerStyle,\n  style,\n}: Props) {\n  const visibleRef = React.useRef(visible);\n\n  React.useEffect(() => {\n    visibleRef.current = visible;\n  });\n\n  const { colors, animation } = useTheme();\n\n  const opacity = useAnimatedValue(visible ? 1 : 0);\n\n  const [rendered, setRendered] = React.useState(visible);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  const handleBack = () => {\n    if (dismissable) {\n      hideModal();\n    }\n    return true;\n  };\n\n  const subscription = React.useRef<NativeEventSubscription | undefined>(\n    undefined\n  );\n\n  const showModal = () => {\n    subscription.current?.remove();\n    subscription.current = addEventListener(\n      BackHandler,\n      'hardwareBackPress',\n      handleBack\n    );\n\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const removeListeners = () => {\n    if (subscription.current?.remove) {\n      subscription.current?.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n  };\n\n  const hideModal = () => {\n    removeListeners();\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  const prevVisible = React.useRef<boolean | null>(null);\n\n  React.useEffect(() => {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n    prevVisible.current = visible;\n  });\n\n  React.useEffect(() => {\n    return removeListeners;\n  }, []);\n\n  if (!rendered) return null;\n\n  return (\n    <Animated.View\n      pointerEvents={visible ? 'auto' : 'none'}\n      accessibilityViewIsModal\n      accessibilityLiveRegion=\"polite\"\n      style={StyleSheet.absoluteFill}\n      onAccessibilityEscape={hideModal}\n    >\n      <TouchableWithoutFeedback\n        accessibilityLabel={overlayAccessibilityLabel}\n        accessibilityRole=\"button\"\n        disabled={!dismissable}\n        onPress={dismissable ? hideModal : undefined}\n        importantForAccessibility=\"no\"\n      >\n        <Animated.View\n          style={[\n            styles.backdrop,\n            { backgroundColor: colors.backdrop, opacity },\n          ]}\n        />\n      </TouchableWithoutFeedback>\n      <View\n        style={[\n          styles.wrapper,\n          { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\n          style,\n        ]}\n        pointerEvents=\"box-none\"\n      >\n        <Surface\n          style={\n            [\n              { opacity },\n              styles.content,\n              contentContainerStyle,\n            ] as StyleProp<ViewStyle>\n          }\n        >\n          {children}\n        </Surface>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]}