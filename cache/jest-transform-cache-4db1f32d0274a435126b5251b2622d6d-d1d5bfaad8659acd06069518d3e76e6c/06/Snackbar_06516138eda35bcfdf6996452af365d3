16ef095d9f6a3f346b59516f329a8d7f
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["visible", "action", "duration", "onDismiss", "children", "wrapperStyle", "style", "theme"],
    _excluded2 = ["style", "label", "onPress"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Button = _interopRequireDefault(require("./Button"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _theming = require("../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var DURATION_SHORT = 4000;
var DURATION_MEDIUM = 7000;
var DURATION_LONG = 10000;

var Snackbar = function Snackbar(_ref) {
  var visible = _ref.visible,
      action = _ref.action,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? DURATION_MEDIUM : _ref$duration,
      onDismiss = _ref.onDismiss,
      children = _ref.children,
      wrapperStyle = _ref.wrapperStyle,
      style = _ref.style,
      theme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(0.0)),
      opacity = _React$useRef.current;

  var _React$useState = React.useState(!visible),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      hidden = _React$useState2[0],
      setHidden = _React$useState2[1];

  var hideTimeout = React.useRef(undefined);
  var scale = theme.animation.scale;
  React.useEffect(function () {
    return function () {
      if (hideTimeout.current) clearTimeout(hideTimeout.current);
    };
  }, []);
  React.useLayoutEffect(function () {
    if (visible) {
      if (hideTimeout.current) clearTimeout(hideTimeout.current);
      setHidden(false);

      _reactNative.Animated.timing(opacity, {
        toValue: 1,
        duration: 200 * scale,
        useNativeDriver: true
      }).start(function (_ref2) {
        var finished = _ref2.finished;

        if (finished) {
          var isInfinity = duration === Number.POSITIVE_INFINITY || duration === Number.NEGATIVE_INFINITY;

          if (finished && !isInfinity) {
            hideTimeout.current = setTimeout(onDismiss, duration);
          }
        }
      });
    } else {
      if (hideTimeout.current) clearTimeout(hideTimeout.current);

      _reactNative.Animated.timing(opacity, {
        toValue: 0,
        duration: 100 * scale,
        useNativeDriver: true
      }).start(function (_ref3) {
        var finished = _ref3.finished;
        if (finished) setHidden(true);
      });
    }
  }, [visible, duration, opacity, scale, onDismiss]);
  var colors = theme.colors,
      roundness = theme.roundness;
  if (hidden) return null;

  var _ref4 = action || {},
      actionStyle = _ref4.style,
      actionLabel = _ref4.label,
      onPressAction = _ref4.onPress,
      actionProps = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);

  return React.createElement(_reactNative.SafeAreaView, {
    pointerEvents: "box-none",
    style: [styles.wrapper, wrapperStyle]
  }, React.createElement(_Surface.default, _extends({
    pointerEvents: "box-none",
    accessibilityLiveRegion: "polite",
    style: [styles.container, {
      borderRadius: roundness,
      opacity: opacity,
      transform: [{
        scale: visible ? opacity.interpolate({
          inputRange: [0, 1],
          outputRange: [0.9, 1]
        }) : 1
      }]
    }, {
      backgroundColor: colors.onSurface
    }, style]
  }, rest), React.createElement(_Text.default, {
    style: [styles.content, {
      marginRight: action ? 0 : 16,
      color: colors.surface
    }]
  }, children), action ? React.createElement(_Button.default, _extends({
    onPress: function onPress() {
      onPressAction === null || onPressAction === void 0 ? void 0 : onPressAction();
      onDismiss();
    },
    style: [styles.button, actionStyle],
    color: colors.accent,
    compact: true,
    mode: "text"
  }, actionProps), actionLabel) : null));
};

Snackbar.DURATION_SHORT = DURATION_SHORT;
Snackbar.DURATION_MEDIUM = DURATION_MEDIUM;
Snackbar.DURATION_LONG = DURATION_LONG;

var styles = _reactNative.StyleSheet.create({
  wrapper: {
    position: 'absolute',
    bottom: 0,
    width: '100%'
  },
  container: {
    elevation: 6,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    margin: 8,
    borderRadius: 4
  },
  content: {
    marginLeft: 16,
    marginVertical: 14,
    flexWrap: 'wrap',
    flex: 1
  },
  button: {
    marginHorizontal: 8,
    marginVertical: 6
  }
});

var _default = (0, _theming.withTheme)(Snackbar);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,