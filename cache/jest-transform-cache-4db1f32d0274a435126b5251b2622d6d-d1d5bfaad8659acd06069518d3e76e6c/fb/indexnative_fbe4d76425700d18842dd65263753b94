6d9381428eccd1e4994914a76713722d
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _excluded = ["children"],
    _excluded2 = ["enabled"],
    _excluded3 = ["active", "activityState", "children", "isNativeStack", "statusBarColor"],
    _excluded4 = ["active", "activityState", "style", "onComponentRef"],
    _excluded5 = ["enabled", "hasTwoStates"];

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactFreeze = require("react-freeze");

var _processColor = _interopRequireDefault(require("react-native/Libraries/StyleSheet/processColor"));

var _package = require("react-native/package.json");

var _TransitionProgressContext = _interopRequireDefault(require("./TransitionProgressContext"));

var _useTransitionProgress = _interopRequireDefault(require("./useTransitionProgress"));

var _utils = require("./utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var isPlatformSupported = _reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'windows';
var ENABLE_SCREENS = isPlatformSupported;

function enableScreens() {
  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;

  if (ENABLE_SCREENS && !_reactNative.UIManager.getViewManagerConfig('RNSScreen')) {
    console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details");
  }
}

var ENABLE_FREEZE = false;

function enableFreeze() {
  var shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var minor = parseInt(_package.version.split('.')[1]);

  if (!(minor === 0 || minor >= 64) && shouldEnableReactFreeze) {
    console.warn('react-freeze library requires at least react-native 0.64. Please upgrade your react-native version in order to use this feature.');
  }

  ENABLE_FREEZE = shouldEnableReactFreeze;
}

var shouldUseActivityState = true;

function screensEnabled() {
  return ENABLE_SCREENS;
}

var NativeScreenValue;
var NativeScreenContainerValue;
var NativeScreenNavigationContainerValue;
var NativeScreenStack;
var NativeScreenStackHeaderConfig;
var NativeScreenStackHeaderSubview;
var AnimatedNativeScreen;
var NativeSearchBar;
var NativeFullWindowOverlay;
var ScreensNativeModules = {
  get NativeScreen() {
    NativeScreenValue = NativeScreenValue || (0, _reactNative.requireNativeComponent)('RNSScreen');
    return NativeScreenValue;
  },

  get NativeScreenContainer() {
    NativeScreenContainerValue = NativeScreenContainerValue || (0, _reactNative.requireNativeComponent)('RNSScreenContainer');
    return NativeScreenContainerValue;
  },

  get NativeScreenNavigationContainer() {
    NativeScreenNavigationContainerValue = NativeScreenNavigationContainerValue || (_reactNative.Platform.OS === 'ios' ? (0, _reactNative.requireNativeComponent)('RNSScreenNavigationContainer') : this.NativeScreenContainer);
    return NativeScreenNavigationContainerValue;
  },

  get NativeScreenStack() {
    NativeScreenStack = NativeScreenStack || (0, _reactNative.requireNativeComponent)('RNSScreenStack');
    return NativeScreenStack;
  },

  get NativeScreenStackHeaderConfig() {
    NativeScreenStackHeaderConfig = NativeScreenStackHeaderConfig || (0, _reactNative.requireNativeComponent)('RNSScreenStackHeaderConfig');
    return NativeScreenStackHeaderConfig;
  },

  get NativeScreenStackHeaderSubview() {
    NativeScreenStackHeaderSubview = NativeScreenStackHeaderSubview || (0, _reactNative.requireNativeComponent)('RNSScreenStackHeaderSubview');
    return NativeScreenStackHeaderSubview;
  },

  get NativeSearchBar() {
    NativeSearchBar = NativeSearchBar || (0, _reactNative.requireNativeComponent)('RNSSearchBar');
    return NativeSearchBar;
  },

  get NativeFullWindowOverlay() {
    NativeFullWindowOverlay = NativeFullWindowOverlay || (0, _reactNative.requireNativeComponent)('RNSFullWindowOverlay');
    return NativeFullWindowOverlay;
  }

};

function DelayedFreeze(_ref) {
  var freeze = _ref.freeze,
      children = _ref.children;

  var _react$default$useSta = _react.default.useState(false),
      _react$default$useSta2 = (0, _slicedToArray2.default)(_react$default$useSta, 2),
      freezeState = _react$default$useSta2[0],
      setFreezeState = _react$default$useSta2[1];

  if (freeze !== freezeState) {
    setImmediate(function () {
      setFreezeState(freeze);
    });
  }

  return _react.default.createElement(_reactFreeze.Freeze, {
    freeze: freeze ? freezeState : false
  }, children);
}

function MaybeFreeze(_ref2) {
  var freeze = _ref2.freeze,
      children = _ref2.children;

  if (ENABLE_FREEZE) {
    return _react.default.createElement(DelayedFreeze, {
      freeze: freeze
    }, children);
  } else {
    return _react.default.createElement(_react.default.Fragment, null, children);
  }
}

function ScreenStack(props) {
  if (ENABLE_FREEZE) {
    var children = props.children,
        rest = (0, _objectWithoutProperties2.default)(props, _excluded);

    var size = _react.default.Children.count(children);

    var childrenWithFreeze = _react.default.Children.map(children, function (child, index) {
      return _react.default.createElement(DelayedFreeze, {
        freeze: size - index > 1
      }, child);
    });

    return _react.default.createElement(ScreensNativeModules.NativeScreenStack, rest, childrenWithFreeze);
  }

  return _react.default.createElement(ScreensNativeModules.NativeScreenStack, props);
}

var Screen = function (_react$default$Compon) {
  (0, _inherits2.default)(Screen, _react$default$Compon);

  var _super = _createSuper(Screen);

  function Screen() {
    var _this;

    (0, _classCallCheck2.default)(this, Screen);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "ref", null);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "closing", new _reactNative.Animated.Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "progress", new _reactNative.Animated.Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "goingForward", new _reactNative.Animated.Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "setRef", function (ref) {
      var _this$props$onCompone, _this$props;

      _this.ref = ref;
      (_this$props$onCompone = (_this$props = _this.props).onComponentRef) === null || _this$props$onCompone === void 0 ? void 0 : _this$props$onCompone.call(_this$props, ref);
    });

    return _this;
  }

  (0, _createClass2.default)(Screen, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var _this$ref;

      (_this$ref = this.ref) === null || _this$ref === void 0 ? void 0 : _this$ref.setNativeProps(props);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          _this$props2$enabled = _this$props2.enabled,
          enabled = _this$props2$enabled === void 0 ? ENABLE_SCREENS : _this$props2$enabled,
          rest = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);

      if (enabled && isPlatformSupported) {
        AnimatedNativeScreen = AnimatedNativeScreen || _reactNative.Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);
        var active = rest.active,
            activityState = rest.activityState,
            children = rest.children,
            isNativeStack = rest.isNativeStack,
            statusBarColor = rest.statusBarColor,
            props = (0, _objectWithoutProperties2.default)(rest, _excluded3);

        if (active !== undefined && activityState === undefined) {
          console.warn('It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens');
          activityState = active !== 0 ? 2 : 0;
        }

        var processedColor = (0, _processColor.default)(statusBarColor);
        return _react.default.createElement(MaybeFreeze, {
          freeze: activityState === 0
        }, _react.default.createElement(AnimatedNativeScreen, _extends({}, props, {
          statusBarColor: processedColor,
          activityState: activityState,
          ref: function ref(_ref3) {
            var _ref$viewConfig, _ref$viewConfig$valid;

            if (_ref3 !== null && _ref3 !== void 0 && (_ref$viewConfig = _ref3.viewConfig) !== null && _ref$viewConfig !== void 0 && (_ref$viewConfig$valid = _ref$viewConfig.validAttributes) !== null && _ref$viewConfig$valid !== void 0 && _ref$viewConfig$valid.style) {
              _ref3.viewConfig.validAttributes.style = (0, _extends3.default)({}, _ref3.viewConfig.validAttributes.style, {
                display: false
              });
            }

            _this2.setRef(_ref3);
          },
          onTransitionProgress: !isNativeStack ? undefined : _reactNative.Animated.event([{
            nativeEvent: {
              progress: this.progress,
              closing: this.closing,
              goingForward: this.goingForward
            }
          }], {
            useNativeDriver: true
          })
        }), !isNativeStack ? children : _react.default.createElement(_TransitionProgressContext.default.Provider, {
          value: {
            progress: this.progress,
            closing: this.closing,
            goingForward: this.goingForward
          }
        }, children)));
      } else {
        var _active = rest.active,
            _activityState = rest.activityState,
            style = rest.style,
            onComponentRef = rest.onComponentRef,
            _props = (0, _objectWithoutProperties2.default)(rest, _excluded4);

        if (_active !== undefined && _activityState === undefined) {
          _activityState = _active !== 0 ? 2 : 0;
        }

        return _react.default.createElement(_reactNative.Animated.View, _extends({
          style: [style, {
            display: _activityState !== 0 ? 'flex' : 'none'
          }],
          ref: this.setRef
        }, _props));
      }
    }
  }]);
  return Screen;
}(_react.default.Component);

function ScreenContainer(props) {
  var _props$enabled = props.enabled,
      enabled = _props$enabled === void 0 ? ENABLE_SCREENS : _props$enabled,
      hasTwoStates = props.hasTwoStates,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded5);

  if (enabled && isPlatformSupported) {
    if (hasTwoStates) {
      return _react.default.createElement(ScreensNativeModules.NativeScreenNavigationContainer, rest);
    }

    return _react.default.createElement(ScreensNativeModules.NativeScreenContainer, rest);
  }

  return _react.default.createElement(_reactNative.View, rest);
}

var styles = _reactNative.StyleSheet.create({
  headerSubview: {
    position: 'absolute',
    top: 0,
    right: 0,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  }
});

var ScreenStackHeaderBackButtonImage = function ScreenStackHeaderBackButtonImage(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, {
    type: "back",
    style: styles.headerSubview
  }, _react.default.createElement(_reactNative.Image, _extends({
    resizeMode: "center",
    fadeDuration: 0
  }, props)));
};

var ScreenStackHeaderRightView = function ScreenStackHeaderRightView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({}, props, {
    type: "right",
    style: styles.headerSubview
  }));
};

var ScreenStackHeaderLeftView = function ScreenStackHeaderLeftView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({}, props, {
    type: "left",
    style: styles.headerSubview
  }));
};

var ScreenStackHeaderCenterView = function ScreenStackHeaderCenterView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({}, props, {
    type: "center",
    style: styles.headerSubview
  }));
};

var ScreenStackHeaderSearchBarView = function ScreenStackHeaderSearchBarView(props) {
  return _react.default.createElement(ScreensNativeModules.NativeScreenStackHeaderSubview, _extends({}, props, {
    type: "searchBar",
    style: styles.headerSubview
  }));
};

var ScreenContext = _react.default.createContext(Screen);

module.exports = {
  Screen: Screen,
  ScreenContainer: ScreenContainer,
  ScreenContext: ScreenContext,
  ScreenStack: ScreenStack,

  get NativeScreen() {
    return ScreensNativeModules.NativeScreen;
  },

  get NativeScreenContainer() {
    return ScreensNativeModules.NativeScreenContainer;
  },

  get NativeScreenNavigationContainer() {
    return ScreensNativeModules.NativeScreenNavigationContainer;
  },

  get ScreenStackHeaderConfig() {
    return ScreensNativeModules.NativeScreenStackHeaderConfig;
  },

  get ScreenStackHeaderSubview() {
    return ScreensNativeModules.NativeScreenStackHeaderSubview;
  },

  get SearchBar() {
    if (!_utils.isSearchBarAvailableForCurrentPlatform) {
      console.warn('Importing SearchBar is only valid on iOS and Android devices.');
      return _reactNative.View;
    }

    return ScreensNativeModules.NativeSearchBar;
  },

  get FullWindowOverlay() {
    if (_reactNative.Platform.OS !== 'ios') {
      console.warn('Importing FullWindowOverlay is only valid on iOS devices.');
      return _reactNative.View;
    }

    return ScreensNativeModules.NativeFullWindowOverlay;
  },

  ScreenStackHeaderBackButtonImage: ScreenStackHeaderBackButtonImage,
  ScreenStackHeaderRightView: ScreenStackHeaderRightView,
  ScreenStackHeaderLeftView: ScreenStackHeaderLeftView,
  ScreenStackHeaderCenterView: ScreenStackHeaderCenterView,
  ScreenStackHeaderSearchBarView: ScreenStackHeaderSearchBarView,
  enableScreens: enableScreens,
  enableFreeze: enableFreeze,
  screensEnabled: screensEnabled,
  shouldUseActivityState: shouldUseActivityState,
  useTransitionProgress: _useTransitionProgress.default,
  isSearchBarAvailableForCurrentPlatform: _utils.isSearchBarAvailableForCurrentPlatform,
  executeNativeBackPress: _utils.executeNativeBackPress
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YUFwRGUsRUFvRGZBLGFBcERlO0VBcURmTyxZQXJEZSxFQXFEZkEsWUFyRGU7RUFzRGZRLGNBdERlLEVBc0RmQSxjQXREZTtFQXVEZkQsc0JBdkRlLEVBdURmQSxzQkF2RGU7RUF3RGZzRyxxQkFBcUIsRUFBckJBLDhCQXhEZTtFQTBEZkYsc0NBQXNDLEVBQXRDQSw2Q0ExRGU7RUEyRGZHLHNCQUFzQixFQUF0QkE7QUEzRGUsQ0FBakJSIiwibmFtZXMiOlsiaXNQbGF0Zm9ybVN1cHBvcnRlZCIsIlBsYXRmb3JtIiwiT1MiLCJFTkFCTEVfU0NSRUVOUyIsImVuYWJsZVNjcmVlbnMiLCJzaG91bGRFbmFibGVTY3JlZW5zIiwiVUlNYW5hZ2VyIiwiZ2V0Vmlld01hbmFnZXJDb25maWciLCJjb25zb2xlIiwiZXJyb3IiLCJFTkFCTEVfRlJFRVpFIiwiZW5hYmxlRnJlZXplIiwic2hvdWxkRW5hYmxlUmVhY3RGcmVlemUiLCJtaW5vciIsInBhcnNlSW50IiwidmVyc2lvbiIsInNwbGl0Iiwid2FybiIsInNob3VsZFVzZUFjdGl2aXR5U3RhdGUiLCJzY3JlZW5zRW5hYmxlZCIsIk5hdGl2ZVNjcmVlblZhbHVlIiwiTmF0aXZlU2NyZWVuQ29udGFpbmVyVmFsdWUiLCJOYXRpdmVTY3JlZW5OYXZpZ2F0aW9uQ29udGFpbmVyVmFsdWUiLCJOYXRpdmVTY3JlZW5TdGFjayIsIk5hdGl2ZVNjcmVlblN0YWNrSGVhZGVyQ29uZmlnIiwiTmF0aXZlU2NyZWVuU3RhY2tIZWFkZXJTdWJ2aWV3IiwiQW5pbWF0ZWROYXRpdmVTY3JlZW4iLCJOYXRpdmVTZWFyY2hCYXIiLCJOYXRpdmVGdWxsV2luZG93T3ZlcmxheSIsIlNjcmVlbnNOYXRpdmVNb2R1bGVzIiwiTmF0aXZlU2NyZWVuIiwiTmF0aXZlU2NyZWVuQ29udGFpbmVyIiwiTmF0aXZlU2NyZWVuTmF2aWdhdGlvbkNvbnRhaW5lciIsIkRlbGF5ZWRGcmVlemUiLCJmcmVlemUiLCJjaGlsZHJlbiIsIlJlYWN0IiwidXNlU3RhdGUiLCJmcmVlemVTdGF0ZSIsInNldEZyZWV6ZVN0YXRlIiwic2V0SW1tZWRpYXRlIiwiX3JlYWN0IiwiX3JlYWN0RnJlZXplIiwiTWF5YmVGcmVlemUiLCJTY3JlZW5TdGFjayIsInByb3BzIiwicmVzdCIsInNpemUiLCJDaGlsZHJlbiIsImNvdW50IiwiY2hpbGRyZW5XaXRoRnJlZXplIiwibWFwIiwiY2hpbGQiLCJpbmRleCIsIlNjcmVlbiIsImFyZ3MiLCJfZGVmaW5lUHJvcGVydHkiLCJBbmltYXRlZCIsIlZhbHVlIiwicmVmIiwib25Db21wb25lbnRSZWYiLCJzZXROYXRpdmVQcm9wcyIsInJlbmRlciIsImVuYWJsZWQiLCJjcmVhdGVBbmltYXRlZENvbXBvbmVudCIsImFjdGl2ZSIsImFjdGl2aXR5U3RhdGUiLCJpc05hdGl2ZVN0YWNrIiwic3RhdHVzQmFyQ29sb3IiLCJ1bmRlZmluZWQiLCJwcm9jZXNzZWRDb2xvciIsInZpZXdDb25maWciLCJfcmVmJHZpZXdDb25maWciLCJ2YWxpZEF0dHJpYnV0ZXMiLCJfcmVmJHZpZXdDb25maWckdmFsaWQiLCJzdHlsZSIsImRpc3BsYXkiLCJzZXRSZWYiLCJvblRyYW5zaXRpb25Qcm9ncmVzcyIsImV2ZW50IiwibmF0aXZlRXZlbnQiLCJwcm9ncmVzcyIsImNsb3NpbmciLCJnb2luZ0ZvcndhcmQiLCJ1c2VOYXRpdmVEcml2ZXIiLCJfVHJhbnNpdGlvblByb2dyZXNzQ29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJfcmVhY3ROYXRpdmUiLCJWaWV3IiwiQ29tcG9uZW50IiwiU2NyZWVuQ29udGFpbmVyIiwiaGFzVHdvU3RhdGVzIiwic3R5bGVzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImhlYWRlclN1YnZpZXciLCJwb3NpdGlvbiIsInRvcCIsInJpZ2h0IiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsIlNjcmVlblN0YWNrSGVhZGVyQmFja0J1dHRvbkltYWdlIiwidHlwZSIsInJlc2l6ZU1vZGUiLCJmYWRlRHVyYXRpb24iLCJTY3JlZW5TdGFja0hlYWRlclJpZ2h0VmlldyIsIlNjcmVlblN0YWNrSGVhZGVyTGVmdFZpZXciLCJTY3JlZW5TdGFja0hlYWRlckNlbnRlclZpZXciLCJTY3JlZW5TdGFja0hlYWRlclNlYXJjaEJhclZpZXciLCJTY3JlZW5Db250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIm1vZHVsZSIsImV4cG9ydHMiLCJTY3JlZW5TdGFja0hlYWRlckNvbmZpZyIsIlNjcmVlblN0YWNrSGVhZGVyU3VidmlldyIsIlNlYXJjaEJhciIsImlzU2VhcmNoQmFyQXZhaWxhYmxlRm9yQ3VycmVudFBsYXRmb3JtIiwiRnVsbFdpbmRvd092ZXJsYXkiLCJ1c2VUcmFuc2l0aW9uUHJvZ3Jlc3MiLCJleGVjdXRlTmF0aXZlQmFja1ByZXNzIl0sInNvdXJjZXMiOlsiaW5kZXgubmF0aXZlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQW5pbWF0ZWQsXG4gIEltYWdlLFxuICBJbWFnZVByb3BzLFxuICBQbGF0Zm9ybSxcbiAgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCxcbiAgU3R5bGVTaGVldCxcbiAgVUlNYW5hZ2VyLFxuICBWaWV3LFxuICBWaWV3UHJvcHMsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBGcmVlemUgfSBmcm9tICdyZWFjdC1mcmVlemUnO1xuLy8gQHRzLWlnbm9yZSBHZXR0aW5nIHByaXZhdGUgY29tcG9uZW50XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L2RlZmF1bHRcbmltcG9ydCBwcm9jZXNzQ29sb3IgZnJvbSAncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcic7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAncmVhY3QtbmF0aXZlL3BhY2thZ2UuanNvbic7XG5cbmltcG9ydCBUcmFuc2l0aW9uUHJvZ3Jlc3NDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvblByb2dyZXNzQ29udGV4dCc7XG5pbXBvcnQgdXNlVHJhbnNpdGlvblByb2dyZXNzIGZyb20gJy4vdXNlVHJhbnNpdGlvblByb2dyZXNzJztcbmltcG9ydCB7XG4gIFN0YWNrUHJlc2VudGF0aW9uVHlwZXMsXG4gIFN0YWNrQW5pbWF0aW9uVHlwZXMsXG4gIEJsdXJFZmZlY3RUeXBlcyxcbiAgU2NyZWVuUmVwbGFjZVR5cGVzLFxuICBTY3JlZW5PcmllbnRhdGlvblR5cGVzLFxuICBIZWFkZXJTdWJ2aWV3VHlwZXMsXG4gIFNjcmVlblByb3BzLFxuICBTY3JlZW5Db250YWluZXJQcm9wcyxcbiAgU2NyZWVuU3RhY2tQcm9wcyxcbiAgU2NyZWVuU3RhY2tIZWFkZXJDb25maWdQcm9wcyxcbiAgU2VhcmNoQmFyUHJvcHMsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgaXNTZWFyY2hCYXJBdmFpbGFibGVGb3JDdXJyZW50UGxhdGZvcm0sXG4gIGV4ZWN1dGVOYXRpdmVCYWNrUHJlc3MsXG59IGZyb20gJy4vdXRpbHMnO1xuXG4vLyB3ZWIgaW1wbGVtZW50YXRpb24gaXMgdGFrZW4gZnJvbSBgaW5kZXgudHN4YFxuY29uc3QgaXNQbGF0Zm9ybVN1cHBvcnRlZCA9XG4gIFBsYXRmb3JtLk9TID09PSAnaW9zJyB8fFxuICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnIHx8XG4gIFBsYXRmb3JtLk9TID09PSAnd2luZG93cyc7XG5cbmxldCBFTkFCTEVfU0NSRUVOUyA9IGlzUGxhdGZvcm1TdXBwb3J0ZWQ7XG5cbmZ1bmN0aW9uIGVuYWJsZVNjcmVlbnMoc2hvdWxkRW5hYmxlU2NyZWVucyA9IHRydWUpOiB2b2lkIHtcbiAgRU5BQkxFX1NDUkVFTlMgPSBpc1BsYXRmb3JtU3VwcG9ydGVkICYmIHNob3VsZEVuYWJsZVNjcmVlbnM7XG4gIGlmIChFTkFCTEVfU0NSRUVOUyAmJiAhVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKCdSTlNTY3JlZW4nKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgU2NyZWVuIG5hdGl2ZSBtb2R1bGUgaGFzbid0IGJlZW4gbGlua2VkLiBQbGVhc2UgY2hlY2sgdGhlIHJlYWN0LW5hdGl2ZS1zY3JlZW5zIFJFQURNRSBmb3IgbW9yZSBkZXRhaWxzYFxuICAgICk7XG4gIH1cbn1cblxubGV0IEVOQUJMRV9GUkVFWkUgPSBmYWxzZTtcblxuZnVuY3Rpb24gZW5hYmxlRnJlZXplKHNob3VsZEVuYWJsZVJlYWN0RnJlZXplID0gdHJ1ZSk6IHZvaWQge1xuICBjb25zdCBtaW5vciA9IHBhcnNlSW50KHZlcnNpb24uc3BsaXQoJy4nKVsxXSk7IC8vIGVnLiB0YWtlcyA2NiBmcm9tICcwLjY2LjAnXG5cbiAgLy8gcmVhY3QtZnJlZXplIHJlcXVpcmVzIHJlYWN0LW5hdGl2ZSA+PTAuNjQsIHJlYWN0LW5hdGl2ZSBmcm9tIG1haW4gaXMgMC4wLjBcbiAgaWYgKCEobWlub3IgPT09IDAgfHwgbWlub3IgPj0gNjQpICYmIHNob3VsZEVuYWJsZVJlYWN0RnJlZXplKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ3JlYWN0LWZyZWV6ZSBsaWJyYXJ5IHJlcXVpcmVzIGF0IGxlYXN0IHJlYWN0LW5hdGl2ZSAwLjY0LiBQbGVhc2UgdXBncmFkZSB5b3VyIHJlYWN0LW5hdGl2ZSB2ZXJzaW9uIGluIG9yZGVyIHRvIHVzZSB0aGlzIGZlYXR1cmUuJ1xuICAgICk7XG4gIH1cblxuICBFTkFCTEVfRlJFRVpFID0gc2hvdWxkRW5hYmxlUmVhY3RGcmVlemU7XG59XG5cbi8vIGNvbnN0IHRoYXQgdGVsbHMgaWYgdGhlIGxpYnJhcnkgc2hvdWxkIHVzZSBuZXcgaW1wbGVtZW50YXRpb24sIHdpbGwgYmUgdW5kZWZpbmVkIGZvciBvbGRlciB2ZXJzaW9uc1xuY29uc3Qgc2hvdWxkVXNlQWN0aXZpdHlTdGF0ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHNjcmVlbnNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gRU5BQkxFX1NDUkVFTlM7XG59XG5cbi8vIFdlIGluaXRpYWxpemUgdGhlc2UgbGF6aWx5IHNvIHRoYXQgaW1wb3J0aW5nIHRoZSBtb2R1bGUgZG9lc24ndCB0aHJvdyBlcnJvciB3aGVuIG5vdCBsaW5rZWRcbi8vIFRoaXMgaXMgbmVjZXNzYXJ5IGNveiBsaWJyYXJpZXMgc3VjaCBhcyBSZWFjdCBOYXZpZ2F0aW9uIGltcG9ydCB0aGUgbGlicmFyeSB3aGVyZSBpdCBtYXkgbm90IGJlIGVuYWJsZWRcbmxldCBOYXRpdmVTY3JlZW5WYWx1ZTogUmVhY3QuQ29tcG9uZW50VHlwZTxTY3JlZW5Qcm9wcz47XG5sZXQgTmF0aXZlU2NyZWVuQ29udGFpbmVyVmFsdWU6IFJlYWN0LkNvbXBvbmVudFR5cGU8U2NyZWVuQ29udGFpbmVyUHJvcHM+O1xubGV0IE5hdGl2ZVNjcmVlbk5hdmlnYXRpb25Db250YWluZXJWYWx1ZTogUmVhY3QuQ29tcG9uZW50VHlwZTxTY3JlZW5Db250YWluZXJQcm9wcz47XG5sZXQgTmF0aXZlU2NyZWVuU3RhY2s6IFJlYWN0LkNvbXBvbmVudFR5cGU8U2NyZWVuU3RhY2tQcm9wcz47XG5sZXQgTmF0aXZlU2NyZWVuU3RhY2tIZWFkZXJDb25maWc6IFJlYWN0LkNvbXBvbmVudFR5cGU8U2NyZWVuU3RhY2tIZWFkZXJDb25maWdQcm9wcz47XG5sZXQgTmF0aXZlU2NyZWVuU3RhY2tIZWFkZXJTdWJ2aWV3OiBSZWFjdC5Db21wb25lbnRUeXBlPFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPFxuICBWaWV3UHJvcHMgJiB7IHR5cGU/OiBIZWFkZXJTdWJ2aWV3VHlwZXMgfVxuPj47XG5sZXQgQW5pbWF0ZWROYXRpdmVTY3JlZW46IFJlYWN0LkNvbXBvbmVudFR5cGU8U2NyZWVuUHJvcHM+O1xubGV0IE5hdGl2ZVNlYXJjaEJhcjogUmVhY3QuQ29tcG9uZW50VHlwZTxTZWFyY2hCYXJQcm9wcz47XG5sZXQgTmF0aXZlRnVsbFdpbmRvd092ZXJsYXk6IFJlYWN0LkNvbXBvbmVudFR5cGU8Vmlldz47XG5cbmNvbnN0IFNjcmVlbnNOYXRpdmVNb2R1bGVzID0ge1xuICBnZXQgTmF0aXZlU2NyZWVuKCkge1xuICAgIE5hdGl2ZVNjcmVlblZhbHVlID1cbiAgICAgIE5hdGl2ZVNjcmVlblZhbHVlIHx8IHJlcXVpcmVOYXRpdmVDb21wb25lbnQoJ1JOU1NjcmVlbicpO1xuICAgIHJldHVybiBOYXRpdmVTY3JlZW5WYWx1ZTtcbiAgfSxcblxuICBnZXQgTmF0aXZlU2NyZWVuQ29udGFpbmVyKCkge1xuICAgIE5hdGl2ZVNjcmVlbkNvbnRhaW5lclZhbHVlID1cbiAgICAgIE5hdGl2ZVNjcmVlbkNvbnRhaW5lclZhbHVlIHx8XG4gICAgICByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCdSTlNTY3JlZW5Db250YWluZXInKTtcbiAgICByZXR1cm4gTmF0aXZlU2NyZWVuQ29udGFpbmVyVmFsdWU7XG4gIH0sXG5cbiAgZ2V0IE5hdGl2ZVNjcmVlbk5hdmlnYXRpb25Db250YWluZXIoKSB7XG4gICAgTmF0aXZlU2NyZWVuTmF2aWdhdGlvbkNvbnRhaW5lclZhbHVlID1cbiAgICAgIE5hdGl2ZVNjcmVlbk5hdmlnYXRpb25Db250YWluZXJWYWx1ZSB8fFxuICAgICAgKFBsYXRmb3JtLk9TID09PSAnaW9zJ1xuICAgICAgICA/IHJlcXVpcmVOYXRpdmVDb21wb25lbnQoJ1JOU1NjcmVlbk5hdmlnYXRpb25Db250YWluZXInKVxuICAgICAgICA6IHRoaXMuTmF0aXZlU2NyZWVuQ29udGFpbmVyKTtcbiAgICByZXR1cm4gTmF0aXZlU2NyZWVuTmF2aWdhdGlvbkNvbnRhaW5lclZhbHVlO1xuICB9LFxuXG4gIGdldCBOYXRpdmVTY3JlZW5TdGFjaygpIHtcbiAgICBOYXRpdmVTY3JlZW5TdGFjayA9XG4gICAgICBOYXRpdmVTY3JlZW5TdGFjayB8fCByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCdSTlNTY3JlZW5TdGFjaycpO1xuICAgIHJldHVybiBOYXRpdmVTY3JlZW5TdGFjaztcbiAgfSxcblxuICBnZXQgTmF0aXZlU2NyZWVuU3RhY2tIZWFkZXJDb25maWcoKSB7XG4gICAgTmF0aXZlU2NyZWVuU3RhY2tIZWFkZXJDb25maWcgPVxuICAgICAgTmF0aXZlU2NyZWVuU3RhY2tIZWFkZXJDb25maWcgfHxcbiAgICAgIHJlcXVpcmVOYXRpdmVDb21wb25lbnQoJ1JOU1NjcmVlblN0YWNrSGVhZGVyQ29uZmlnJyk7XG4gICAgcmV0dXJuIE5hdGl2ZVNjcmVlblN0YWNrSGVhZGVyQ29uZmlnO1xuICB9LFxuXG4gIGdldCBOYXRpdmVTY3JlZW5TdGFja0hlYWRlclN1YnZpZXcoKSB7XG4gICAgTmF0aXZlU2NyZWVuU3RhY2tIZWFkZXJTdWJ2aWV3ID1cbiAgICAgIE5hdGl2ZVNjcmVlblN0YWNrSGVhZGVyU3VidmlldyB8fFxuICAgICAgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCgnUk5TU2NyZWVuU3RhY2tIZWFkZXJTdWJ2aWV3Jyk7XG4gICAgcmV0dXJuIE5hdGl2ZVNjcmVlblN0YWNrSGVhZGVyU3VidmlldztcbiAgfSxcblxuICBnZXQgTmF0aXZlU2VhcmNoQmFyKCkge1xuICAgIE5hdGl2ZVNlYXJjaEJhciA9IE5hdGl2ZVNlYXJjaEJhciB8fCByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCdSTlNTZWFyY2hCYXInKTtcbiAgICByZXR1cm4gTmF0aXZlU2VhcmNoQmFyO1xuICB9LFxuXG4gIGdldCBOYXRpdmVGdWxsV2luZG93T3ZlcmxheSgpIHtcbiAgICBOYXRpdmVGdWxsV2luZG93T3ZlcmxheSA9XG4gICAgICBOYXRpdmVGdWxsV2luZG93T3ZlcmxheSB8fCByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCdSTlNGdWxsV2luZG93T3ZlcmxheScpO1xuICAgIHJldHVybiBOYXRpdmVGdWxsV2luZG93T3ZlcmxheTtcbiAgfSxcbn07XG5cbmludGVyZmFjZSBGcmVlemVXcmFwcGVyUHJvcHMge1xuICBmcmVlemU6IGJvb2xlYW47XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbi8vIFRoaXMgY29tcG9uZW50IGFsbG93cyBvbmUgbW9yZSByZW5kZXIgYmVmb3JlIGZyZWV6aW5nIHRoZSBzY3JlZW4uXG4vLyBBbGxvd3MgYWN0aXZpdHlTdGF0ZSB0byByZWFjaCB0aGUgbmF0aXZlIHNpZGUgYW5kIHVzZUlzRm9jdXNlZCB0byB3b3JrIGNvcnJlY3RseS5cbmZ1bmN0aW9uIERlbGF5ZWRGcmVlemUoeyBmcmVlemUsIGNoaWxkcmVuIH06IEZyZWV6ZVdyYXBwZXJQcm9wcykge1xuICAvLyBmbGFnIHVzZWQgZm9yIGRldGVybWluaW5nIHdoZXRoZXIgZnJlZXplIHNob3VsZCBiZSBlbmFibGVkXG4gIGNvbnN0IFtmcmVlemVTdGF0ZSwgc2V0RnJlZXplU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGlmIChmcmVlemUgIT09IGZyZWV6ZVN0YXRlKSB7XG4gICAgLy8gc2V0SW1tZWRpYXRlIGlzIGV4ZWN1dGVkIGF0IHRoZSBlbmQgb2YgdGhlIEpTIGV4ZWN1dGlvbiBibG9jay5cbiAgICAvLyBVc2VkIGhlcmUgZm9yIGNoYW5naW5nIHRoZSBzdGF0ZSByaWdodCBhZnRlciB0aGUgcmVuZGVyLlxuICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICBzZXRGcmVlemVTdGF0ZShmcmVlemUpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIDxGcmVlemUgZnJlZXplPXtmcmVlemUgPyBmcmVlemVTdGF0ZSA6IGZhbHNlfT57Y2hpbGRyZW59PC9GcmVlemU+O1xufVxuXG5mdW5jdGlvbiBNYXliZUZyZWV6ZSh7IGZyZWV6ZSwgY2hpbGRyZW4gfTogRnJlZXplV3JhcHBlclByb3BzKSB7XG4gIGlmIChFTkFCTEVfRlJFRVpFKSB7XG4gICAgcmV0dXJuIDxEZWxheWVkRnJlZXplIGZyZWV6ZT17ZnJlZXplfT57Y2hpbGRyZW59PC9EZWxheWVkRnJlZXplPjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gPD57Y2hpbGRyZW59PC8+O1xuICB9XG59XG5cbmZ1bmN0aW9uIFNjcmVlblN0YWNrKHByb3BzOiBTY3JlZW5TdGFja1Byb3BzKSB7XG4gIGlmIChFTkFCTEVfRlJFRVpFKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgY29uc3Qgc2l6ZSA9IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKTtcbiAgICAvLyBmcmVlemVzIGFsbCBzY3JlZW5zIGV4Y2VwdCB0aGUgdG9wIG9uZVxuICAgIGNvbnN0IGNoaWxkcmVuV2l0aEZyZWV6ZSA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGNoaWxkLCBpbmRleCkgPT4gKFxuICAgICAgPERlbGF5ZWRGcmVlemUgZnJlZXplPXtzaXplIC0gaW5kZXggPiAxfT57Y2hpbGR9PC9EZWxheWVkRnJlZXplPlxuICAgICkpO1xuICAgIHJldHVybiAoXG4gICAgICA8U2NyZWVuc05hdGl2ZU1vZHVsZXMuTmF0aXZlU2NyZWVuU3RhY2sgey4uLnJlc3R9PlxuICAgICAgICB7Y2hpbGRyZW5XaXRoRnJlZXplfVxuICAgICAgPC9TY3JlZW5zTmF0aXZlTW9kdWxlcy5OYXRpdmVTY3JlZW5TdGFjaz5cbiAgICApO1xuICB9XG4gIHJldHVybiA8U2NyZWVuc05hdGl2ZU1vZHVsZXMuTmF0aXZlU2NyZWVuU3RhY2sgey4uLnByb3BzfSAvPjtcbn1cblxuLy8gSW5jb21wbGV0ZSB0eXBlLCBhbGwgYWNjZXNzaWJsZSBwcm9wZXJ0aWVzIGF2YWlsYWJsZSBhdDpcbi8vIHJlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1JlYWN0TmF0aXZlVmlld1ZpZXdDb25maWcuanNcbmludGVyZmFjZSBWaWV3Q29uZmlnIGV4dGVuZHMgVmlldyB7XG4gIHZpZXdDb25maWc6IHtcbiAgICB2YWxpZEF0dHJpYnV0ZXM6IHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGRpc3BsYXk6IGJvb2xlYW47XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbmNsYXNzIFNjcmVlbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxTY3JlZW5Qcm9wcz4ge1xuICBwcml2YXRlIHJlZjogUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVmlldz4gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBjbG9zaW5nID0gbmV3IEFuaW1hdGVkLlZhbHVlKDApO1xuICBwcml2YXRlIHByb2dyZXNzID0gbmV3IEFuaW1hdGVkLlZhbHVlKDApO1xuICBwcml2YXRlIGdvaW5nRm9yd2FyZCA9IG5ldyBBbmltYXRlZC5WYWx1ZSgwKTtcblxuICBzZXROYXRpdmVQcm9wcyhwcm9wczogU2NyZWVuUHJvcHMpOiB2b2lkIHtcbiAgICB0aGlzLnJlZj8uc2V0TmF0aXZlUHJvcHMocHJvcHMpO1xuICB9XG5cbiAgc2V0UmVmID0gKHJlZjogUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVmlldz4gfCBudWxsKTogdm9pZCA9PiB7XG4gICAgdGhpcy5yZWYgPSByZWY7XG4gICAgdGhpcy5wcm9wcy5vbkNvbXBvbmVudFJlZj8uKHJlZik7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZW5hYmxlZCA9IEVOQUJMRV9TQ1JFRU5TLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGVuYWJsZWQgJiYgaXNQbGF0Zm9ybVN1cHBvcnRlZCkge1xuICAgICAgQW5pbWF0ZWROYXRpdmVTY3JlZW4gPVxuICAgICAgICBBbmltYXRlZE5hdGl2ZVNjcmVlbiB8fFxuICAgICAgICBBbmltYXRlZC5jcmVhdGVBbmltYXRlZENvbXBvbmVudChTY3JlZW5zTmF0aXZlTW9kdWxlcy5OYXRpdmVTY3JlZW4pO1xuXG4gICAgICBsZXQge1xuICAgICAgICAvLyBGaWx0ZXIgb3V0IGFjdGl2ZSBwcm9wIGluIHRoaXMgY2FzZSBiZWNhdXNlIGl0IGlzIHVudXNlZCBhbmRcbiAgICAgICAgLy8gY2FuIGNhdXNlIHByb2JsZW1zIGRlcGVuZGluZyBvbiByZWFjdC1uYXRpdmUgdmVyc2lvbjpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdmlnYXRpb24vcmVhY3QtbmF2aWdhdGlvbi9pc3N1ZXMvNDg4NlxuICAgICAgICBhY3RpdmUsXG4gICAgICAgIGFjdGl2aXR5U3RhdGUsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBpc05hdGl2ZVN0YWNrLFxuICAgICAgICBzdGF0dXNCYXJDb2xvcixcbiAgICAgICAgLi4ucHJvcHNcbiAgICAgIH0gPSByZXN0O1xuXG4gICAgICBpZiAoYWN0aXZlICE9PSB1bmRlZmluZWQgJiYgYWN0aXZpdHlTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnSXQgYXBwZWFycyB0aGF0IHlvdSBhcmUgdXNpbmcgb2xkIHZlcnNpb24gb2YgcmVhY3QtbmF2aWdhdGlvbiBsaWJyYXJ5LiBQbGVhc2UgdXBkYXRlIEByZWFjdC1uYXZpZ2F0aW9uL2JvdHRvbS10YWJzLCBAcmVhY3QtbmF2aWdhdGlvbi9zdGFjayBhbmQgQHJlYWN0LW5hdmlnYXRpb24vZHJhd2VyIHRvIHZlcnNpb24gNS4xMC4wIG9yIGFib3ZlIHRvIHRha2UgZnVsbCBhZHZhbnRhZ2Ugb2YgbmV3IGZ1bmN0aW9uYWxpdHkgYWRkZWQgdG8gcmVhY3QtbmF0aXZlLXNjcmVlbnMnXG4gICAgICAgICk7XG4gICAgICAgIGFjdGl2aXR5U3RhdGUgPSBhY3RpdmUgIT09IDAgPyAyIDogMDsgLy8gaW4gdGhlIG5ldyB2ZXJzaW9uLCB3ZSBuZWVkIG9uZSBvZiB0aGUgc2NyZWVucyB0byBoYXZlIHZhbHVlIG9mIDIgYWZ0ZXIgdGhlIHRyYW5zaXRpb25cbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvY2Vzc2VkQ29sb3IgPSBwcm9jZXNzQ29sb3Ioc3RhdHVzQmFyQ29sb3IpO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TWF5YmVGcmVlemUgZnJlZXplPXthY3Rpdml0eVN0YXRlID09PSAwfT5cbiAgICAgICAgICA8QW5pbWF0ZWROYXRpdmVTY3JlZW5cbiAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgIHN0YXR1c0JhckNvbG9yPXtwcm9jZXNzZWRDb2xvcn1cbiAgICAgICAgICAgIGFjdGl2aXR5U3RhdGU9e2FjdGl2aXR5U3RhdGV9XG4gICAgICAgICAgICAvLyBUaGlzIHByZXZlbnRzIHNob3dpbmcgYmxhbmsgc2NyZWVuIHdoZW4gbmF2aWdhdGluZyBiZXR3ZWVuIG11bHRpcGxlIHNjcmVlbnMgd2l0aCBmcmVlemluZ1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3NvZnR3YXJlLW1hbnNpb24vcmVhY3QtbmF0aXZlLXNjcmVlbnMvcHVsbC8xMjA4XG4gICAgICAgICAgICByZWY9eyhyZWY6IFZpZXdDb25maWcpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJlZj8udmlld0NvbmZpZz8udmFsaWRBdHRyaWJ1dGVzPy5zdHlsZSkge1xuICAgICAgICAgICAgICAgIHJlZi52aWV3Q29uZmlnLnZhbGlkQXR0cmlidXRlcy5zdHlsZSA9IHtcbiAgICAgICAgICAgICAgICAgIC4uLnJlZi52aWV3Q29uZmlnLnZhbGlkQXR0cmlidXRlcy5zdHlsZSxcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5zZXRSZWYocmVmKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblRyYW5zaXRpb25Qcm9ncmVzcz17XG4gICAgICAgICAgICAgICFpc05hdGl2ZVN0YWNrXG4gICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA6IEFuaW1hdGVkLmV2ZW50KFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRXZlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IHRoaXMucHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Npbmc6IHRoaXMuY2xvc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ29pbmdGb3J3YXJkOiB0aGlzLmdvaW5nRm9yd2FyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgeyB1c2VOYXRpdmVEcml2ZXI6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfT5cbiAgICAgICAgICAgIHshaXNOYXRpdmVTdGFjayA/ICggLy8gc2VlIGNvbW1lbnQgb2YgdGhpcyBwcm9wIGluIHR5cGVzLnRzeCBmb3IgaW5mb3JtYXRpb24gd2h5IGl0IGlzIG5lZWRlZFxuICAgICAgICAgICAgICBjaGlsZHJlblxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPFRyYW5zaXRpb25Qcm9ncmVzc0NvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgICAgICAgICB2YWx1ZT17e1xuICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IHRoaXMucHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICBjbG9zaW5nOiB0aGlzLmNsb3NpbmcsXG4gICAgICAgICAgICAgICAgICBnb2luZ0ZvcndhcmQ6IHRoaXMuZ29pbmdGb3J3YXJkLFxuICAgICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgICAgPC9UcmFuc2l0aW9uUHJvZ3Jlc3NDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L0FuaW1hdGVkTmF0aXZlU2NyZWVuPlxuICAgICAgICA8L01heWJlRnJlZXplPlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2FtZSByZWFzb24gYXMgYWJvdmVcbiAgICAgIGxldCB7XG4gICAgICAgIGFjdGl2ZSxcbiAgICAgICAgYWN0aXZpdHlTdGF0ZSxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgb25Db21wb25lbnRSZWYsXG4gICAgICAgIC4uLnByb3BzXG4gICAgICB9ID0gcmVzdDtcblxuICAgICAgaWYgKGFjdGl2ZSAhPT0gdW5kZWZpbmVkICYmIGFjdGl2aXR5U3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhY3Rpdml0eVN0YXRlID0gYWN0aXZlICE9PSAwID8gMiA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICAgIHN0eWxlPXtbc3R5bGUsIHsgZGlzcGxheTogYWN0aXZpdHlTdGF0ZSAhPT0gMCA/ICdmbGV4JyA6ICdub25lJyB9XX1cbiAgICAgICAgICByZWY9e3RoaXMuc2V0UmVmfVxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFNjcmVlbkNvbnRhaW5lcihwcm9wczogU2NyZWVuQ29udGFpbmVyUHJvcHMpIHtcbiAgY29uc3QgeyBlbmFibGVkID0gRU5BQkxFX1NDUkVFTlMsIGhhc1R3b1N0YXRlcywgLi4ucmVzdCB9ID0gcHJvcHM7XG5cbiAgaWYgKGVuYWJsZWQgJiYgaXNQbGF0Zm9ybVN1cHBvcnRlZCkge1xuICAgIGlmIChoYXNUd29TdGF0ZXMpIHtcbiAgICAgIHJldHVybiA8U2NyZWVuc05hdGl2ZU1vZHVsZXMuTmF0aXZlU2NyZWVuTmF2aWdhdGlvbkNvbnRhaW5lciB7Li4ucmVzdH0gLz47XG4gICAgfVxuICAgIHJldHVybiA8U2NyZWVuc05hdGl2ZU1vZHVsZXMuTmF0aXZlU2NyZWVuQ29udGFpbmVyIHsuLi5yZXN0fSAvPjtcbiAgfVxuICByZXR1cm4gPFZpZXcgey4uLnJlc3R9IC8+O1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGhlYWRlclN1YnZpZXc6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB9LFxufSk7XG5cbmNvbnN0IFNjcmVlblN0YWNrSGVhZGVyQmFja0J1dHRvbkltYWdlID0gKHByb3BzOiBJbWFnZVByb3BzKTogSlNYLkVsZW1lbnQgPT4gKFxuICA8U2NyZWVuc05hdGl2ZU1vZHVsZXMuTmF0aXZlU2NyZWVuU3RhY2tIZWFkZXJTdWJ2aWV3XG4gICAgdHlwZT1cImJhY2tcIlxuICAgIHN0eWxlPXtzdHlsZXMuaGVhZGVyU3Vidmlld30+XG4gICAgPEltYWdlIHJlc2l6ZU1vZGU9XCJjZW50ZXJcIiBmYWRlRHVyYXRpb249ezB9IHsuLi5wcm9wc30gLz5cbiAgPC9TY3JlZW5zTmF0aXZlTW9kdWxlcy5OYXRpdmVTY3JlZW5TdGFja0hlYWRlclN1YnZpZXc+XG4pO1xuXG5jb25zdCBTY3JlZW5TdGFja0hlYWRlclJpZ2h0VmlldyA9IChcbiAgcHJvcHM6IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPFZpZXdQcm9wcz5cbik6IEpTWC5FbGVtZW50ID0+IChcbiAgPFNjcmVlbnNOYXRpdmVNb2R1bGVzLk5hdGl2ZVNjcmVlblN0YWNrSGVhZGVyU3Vidmlld1xuICAgIHsuLi5wcm9wc31cbiAgICB0eXBlPVwicmlnaHRcIlxuICAgIHN0eWxlPXtzdHlsZXMuaGVhZGVyU3Vidmlld31cbiAgLz5cbik7XG5cbmNvbnN0IFNjcmVlblN0YWNrSGVhZGVyTGVmdFZpZXcgPSAoXG4gIHByb3BzOiBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjxWaWV3UHJvcHM+XG4pOiBKU1guRWxlbWVudCA9PiAoXG4gIDxTY3JlZW5zTmF0aXZlTW9kdWxlcy5OYXRpdmVTY3JlZW5TdGFja0hlYWRlclN1YnZpZXdcbiAgICB7Li4ucHJvcHN9XG4gICAgdHlwZT1cImxlZnRcIlxuICAgIHN0eWxlPXtzdHlsZXMuaGVhZGVyU3Vidmlld31cbiAgLz5cbik7XG5cbmNvbnN0IFNjcmVlblN0YWNrSGVhZGVyQ2VudGVyVmlldyA9IChcbiAgcHJvcHM6IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPFZpZXdQcm9wcz5cbik6IEpTWC5FbGVtZW50ID0+IChcbiAgPFNjcmVlbnNOYXRpdmVNb2R1bGVzLk5hdGl2ZVNjcmVlblN0YWNrSGVhZGVyU3Vidmlld1xuICAgIHsuLi5wcm9wc31cbiAgICB0eXBlPVwiY2VudGVyXCJcbiAgICBzdHlsZT17c3R5bGVzLmhlYWRlclN1YnZpZXd9XG4gIC8+XG4pO1xuXG5jb25zdCBTY3JlZW5TdGFja0hlYWRlclNlYXJjaEJhclZpZXcgPSAoXG4gIHByb3BzOiBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjxTZWFyY2hCYXJQcm9wcz5cbik6IEpTWC5FbGVtZW50ID0+IChcbiAgPFNjcmVlbnNOYXRpdmVNb2R1bGVzLk5hdGl2ZVNjcmVlblN0YWNrSGVhZGVyU3Vidmlld1xuICAgIHsuLi5wcm9wc31cbiAgICB0eXBlPVwic2VhcmNoQmFyXCJcbiAgICBzdHlsZT17c3R5bGVzLmhlYWRlclN1YnZpZXd9XG4gIC8+XG4pO1xuXG5leHBvcnQgdHlwZSB7XG4gIFN0YWNrUHJlc2VudGF0aW9uVHlwZXMsXG4gIFN0YWNrQW5pbWF0aW9uVHlwZXMsXG4gIEJsdXJFZmZlY3RUeXBlcyxcbiAgU2NyZWVuUmVwbGFjZVR5cGVzLFxuICBTY3JlZW5PcmllbnRhdGlvblR5cGVzLFxuICBIZWFkZXJTdWJ2aWV3VHlwZXMsXG4gIFNjcmVlblByb3BzLFxuICBTY3JlZW5Db250YWluZXJQcm9wcyxcbiAgU2NyZWVuU3RhY2tQcm9wcyxcbiAgU2NyZWVuU3RhY2tIZWFkZXJDb25maWdQcm9wcyxcbiAgU2VhcmNoQmFyUHJvcHMsXG59O1xuXG4vLyBjb250ZXh0IHRvIGJlIHVzZWQgd2hlbiB0aGUgdXNlciB3YW50cyB0byB1c2UgZW5oYW5jZWQgaW1wbGVtZW50YXRpb25cbi8vIGUuZy4gdG8gdXNlIGByZWFjdC1uYXRpdmUtcmVhbmltYXRlZGAgKHNlZSBgcmVhbmltYXRlZGAgZm9sZGVyIGluIHJlcG8pXG5jb25zdCBTY3JlZW5Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChTY3JlZW4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gdGhlc2UgYXJlIGNsYXNzZXMgc28gdGhleSBhcmUgbm90IGV2YWx1YXRlZCB1bnRpbCB1c2VkXG4gIC8vIHNvIG5vIG5lZWQgdG8gdXNlIGdldHRlcnMgZm9yIHRoZW1cbiAgU2NyZWVuLFxuICBTY3JlZW5Db250YWluZXIsXG4gIFNjcmVlbkNvbnRleHQsXG4gIFNjcmVlblN0YWNrLFxuXG4gIGdldCBOYXRpdmVTY3JlZW4oKSB7XG4gICAgcmV0dXJuIFNjcmVlbnNOYXRpdmVNb2R1bGVzLk5hdGl2ZVNjcmVlbjtcbiAgfSxcblxuICBnZXQgTmF0aXZlU2NyZWVuQ29udGFpbmVyKCkge1xuICAgIHJldHVybiBTY3JlZW5zTmF0aXZlTW9kdWxlcy5OYXRpdmVTY3JlZW5Db250YWluZXI7XG4gIH0sXG5cbiAgZ2V0IE5hdGl2ZVNjcmVlbk5hdmlnYXRpb25Db250YWluZXIoKSB7XG4gICAgcmV0dXJuIFNjcmVlbnNOYXRpdmVNb2R1bGVzLk5hdGl2ZVNjcmVlbk5hdmlnYXRpb25Db250YWluZXI7XG4gIH0sXG5cbiAgZ2V0IFNjcmVlblN0YWNrSGVhZGVyQ29uZmlnKCkge1xuICAgIHJldHVybiBTY3JlZW5zTmF0aXZlTW9kdWxlcy5OYXRpdmVTY3JlZW5TdGFja0hlYWRlckNvbmZpZztcbiAgfSxcbiAgZ2V0IFNjcmVlblN0YWNrSGVhZGVyU3VidmlldygpIHtcbiAgICByZXR1cm4gU2NyZWVuc05hdGl2ZU1vZHVsZXMuTmF0aXZlU2NyZWVuU3RhY2tIZWFkZXJTdWJ2aWV3O1xuICB9LFxuICBnZXQgU2VhcmNoQmFyKCkge1xuICAgIGlmICghaXNTZWFyY2hCYXJBdmFpbGFibGVGb3JDdXJyZW50UGxhdGZvcm0pIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ0ltcG9ydGluZyBTZWFyY2hCYXIgaXMgb25seSB2YWxpZCBvbiBpT1MgYW5kIEFuZHJvaWQgZGV2aWNlcy4nXG4gICAgICApO1xuICAgICAgcmV0dXJuIFZpZXc7XG4gICAgfVxuXG4gICAgcmV0dXJuIFNjcmVlbnNOYXRpdmVNb2R1bGVzLk5hdGl2ZVNlYXJjaEJhcjtcbiAgfSxcbiAgZ2V0IEZ1bGxXaW5kb3dPdmVybGF5KCkge1xuICAgIGlmIChQbGF0Zm9ybS5PUyAhPT0gJ2lvcycpIHtcbiAgICAgIGNvbnNvbGUud2FybignSW1wb3J0aW5nIEZ1bGxXaW5kb3dPdmVybGF5IGlzIG9ubHkgdmFsaWQgb24gaU9TIGRldmljZXMuJyk7XG4gICAgICByZXR1cm4gVmlldztcbiAgICB9XG5cbiAgICByZXR1cm4gU2NyZWVuc05hdGl2ZU1vZHVsZXMuTmF0aXZlRnVsbFdpbmRvd092ZXJsYXk7XG4gIH0sXG4gIC8vIHRoZXNlIGFyZSBmdW5jdGlvbnMgYW5kIHdpbGwgbm90IGJlIGV2YWx1YXRlZCB1bnRpbCB1c2VkXG4gIC8vIHNvIG5vIG5lZWQgdG8gdXNlIGdldHRlcnMgZm9yIHRoZW1cbiAgU2NyZWVuU3RhY2tIZWFkZXJCYWNrQnV0dG9uSW1hZ2UsXG4gIFNjcmVlblN0YWNrSGVhZGVyUmlnaHRWaWV3LFxuICBTY3JlZW5TdGFja0hlYWRlckxlZnRWaWV3LFxuICBTY3JlZW5TdGFja0hlYWRlckNlbnRlclZpZXcsXG4gIFNjcmVlblN0YWNrSGVhZGVyU2VhcmNoQmFyVmlldyxcblxuICBlbmFibGVTY3JlZW5zLFxuICBlbmFibGVGcmVlemUsXG4gIHNjcmVlbnNFbmFibGVkLFxuICBzaG91bGRVc2VBY3Rpdml0eVN0YXRlLFxuICB1c2VUcmFuc2l0aW9uUHJvZ3Jlc3MsXG5cbiAgaXNTZWFyY2hCYXJBdmFpbGFibGVGb3JDdXJyZW50UGxhdGZvcm0sXG4gIGV4ZWN1dGVOYXRpdmVCYWNrUHJlc3MsXG59O1xuIl19