1d80d44624142ac20351457742e2b993
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var PressabilityDebug = _interopRequireWildcard(require("../Pressability/PressabilityDebug"));

var _usePressability = _interopRequireDefault(require("../Pressability/usePressability"));

var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));

var _processColor = _interopRequireDefault(require("../StyleSheet/processColor"));

var _TextAncestor = _interopRequireDefault(require("./TextAncestor"));

var _TextNativeComponent = require("./TextNativeComponent");

var React = _interopRequireWildcard(require("react"));

var _excluded = ["accessible", "allowFontScaling", "ellipsizeMode", "onLongPress", "onPress", "onPressIn", "onPressOut", "onResponderGrant", "onResponderMove", "onResponderRelease", "onResponderTerminate", "onResponderTerminationRequest", "onStartShouldSetResponder", "pressRetentionOffset", "suppressHighlighting"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Text = React.forwardRef(function (props, forwardedRef) {
  var accessible = props.accessible,
      allowFontScaling = props.allowFontScaling,
      ellipsizeMode = props.ellipsizeMode,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      _onPressIn = props.onPressIn,
      _onPressOut = props.onPressOut,
      _onResponderGrant = props.onResponderGrant,
      _onResponderMove = props.onResponderMove,
      _onResponderRelease = props.onResponderRelease,
      _onResponderTerminate = props.onResponderTerminate,
      onResponderTerminationRequest = props.onResponderTerminationRequest,
      onStartShouldSetResponder = props.onStartShouldSetResponder,
      pressRetentionOffset = props.pressRetentionOffset,
      suppressHighlighting = props.suppressHighlighting,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);

  var _useState = (0, React.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isHighlighted = _useState2[0],
      setHighlighted = _useState2[1];

  var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && restProps.disabled !== true;
  var initialized = useLazyInitialization(isPressable);
  var config = (0, React.useMemo)(function () {
    return initialized ? {
      disabled: !isPressable,
      pressRectOffset: pressRetentionOffset,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressIn: function onPressIn(event) {
        setHighlighted(!suppressHighlighting);
        _onPressIn == null ? void 0 : _onPressIn(event);
      },
      onPressOut: function onPressOut(event) {
        setHighlighted(false);
        _onPressOut == null ? void 0 : _onPressOut(event);
      },
      onResponderTerminationRequest_DEPRECATED: onResponderTerminationRequest,
      onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder
    } : null;
  }, [initialized, isPressable, pressRetentionOffset, onLongPress, onPress, _onPressIn, _onPressOut, onResponderTerminationRequest, onStartShouldSetResponder, suppressHighlighting]);
  var eventHandlers = (0, _usePressability.default)(config);
  var eventHandlersForText = (0, React.useMemo)(function () {
    return eventHandlers == null ? null : {
      onResponderGrant: function onResponderGrant(event) {
        eventHandlers.onResponderGrant(event);

        if (_onResponderGrant != null) {
          _onResponderGrant(event);
        }
      },
      onResponderMove: function onResponderMove(event) {
        eventHandlers.onResponderMove(event);

        if (_onResponderMove != null) {
          _onResponderMove(event);
        }
      },
      onResponderRelease: function onResponderRelease(event) {
        eventHandlers.onResponderRelease(event);

        if (_onResponderRelease != null) {
          _onResponderRelease(event);
        }
      },
      onResponderTerminate: function onResponderTerminate(event) {
        eventHandlers.onResponderTerminate(event);

        if (_onResponderTerminate != null) {
          _onResponderTerminate(event);
        }
      },
      onResponderTerminationRequest: eventHandlers.onResponderTerminationRequest,
      onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder
    };
  }, [eventHandlers, _onResponderGrant, _onResponderMove, _onResponderRelease, _onResponderTerminate]);
  var selectionColor = restProps.selectionColor == null ? null : (0, _processColor.default)(restProps.selectionColor);
  var style = restProps.style;

  if (__DEV__) {
    if (PressabilityDebug.isEnabled() && onPress != null) {
      style = _StyleSheet.default.compose(restProps.style, {
        color: 'magenta'
      });
    }
  }

  var numberOfLines = restProps.numberOfLines;

  if (numberOfLines != null && !(numberOfLines >= 0)) {
    console.error("'numberOfLines' in <Text> must be a non-negative number, received: " + numberOfLines + ". The value will be set to 0.");
    numberOfLines = 0;
  }

  var hasTextAncestor = (0, React.useContext)(_TextAncestor.default);
  return hasTextAncestor ? React.createElement(_TextNativeComponent.NativeVirtualText, (0, _extends2.default)({}, restProps, eventHandlersForText, {
    isHighlighted: isHighlighted,
    isPressable: isPressable,
    numberOfLines: numberOfLines,
    selectionColor: selectionColor,
    style: style,
    ref: forwardedRef
  })) : React.createElement(_TextAncestor.default.Provider, {
    value: true
  }, React.createElement(_TextNativeComponent.NativeText, (0, _extends2.default)({}, restProps, eventHandlersForText, {
    accessible: accessible !== false,
    allowFontScaling: allowFontScaling !== false,
    ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : 'tail',
    isHighlighted: isHighlighted,
    numberOfLines: numberOfLines,
    selectionColor: selectionColor,
    style: style,
    ref: forwardedRef
  })));
});
Text.displayName = 'Text';
Text.propTypes = require('deprecated-react-native-prop-types').TextPropTypes;

function useLazyInitialization(newValue) {
  var _useState3 = (0, React.useState)(newValue),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      oldValue = _useState4[0],
      setValue = _useState4[1];

  if (!oldValue && newValue) {
    setValue(newValue);
  }

  return oldValue;
}

module.exports = Text;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,