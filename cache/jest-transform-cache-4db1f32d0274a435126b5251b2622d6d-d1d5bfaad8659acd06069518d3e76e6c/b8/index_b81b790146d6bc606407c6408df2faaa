efeb2ce9da795d5148ddf721bae6134a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _TextInput = _interopRequireDefault(require("../TextInput"));

var _useDeviceOrientation = require("../../useDeviceOrientation");

var _toolkits = require("../../toolkits");

var _styles = require("./styles");

var _lodash = _interopRequireDefault(require("lodash"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var isTablet = _toolkits.useDetectDevice.isTablet,
    isIOS = _toolkits.useDetectDevice.isIOS;

var ic_down = require('../../assets/down.png');

var defaultProps = {
  placeholder: 'Select item',
  activeColor: '#F6F7F8',
  backgroundColor: 'white',
  data: [],
  style: {}
};

var MultiSelectComponent = _react.default.forwardRef(function (props, currentRef) {
  var orientation = (0, _useDeviceOrientation.useDeviceOrientation)();
  var onChange = props.onChange,
      data = props.data,
      value = props.value,
      style = props.style,
      labelField = props.labelField,
      valueField = props.valueField,
      selectedStyle = props.selectedStyle,
      selectedTextStyle = props.selectedTextStyle,
      iconStyle = props.iconStyle,
      activeColor = props.activeColor,
      containerStyle = props.containerStyle,
      fontFamily = props.fontFamily,
      placeholderStyle = props.placeholderStyle,
      _props$iconColor = props.iconColor,
      iconColor = _props$iconColor === void 0 ? "gray" : _props$iconColor,
      inputSearchStyle = props.inputSearchStyle,
      searchPlaceholder = props.searchPlaceholder,
      placeholder = props.placeholder,
      _props$search = props.search,
      search = _props$search === void 0 ? false : _props$search,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? 340 : _props$maxHeight,
      maxSelect = props.maxSelect,
      _props$disable = props.disable,
      disable = _props$disable === void 0 ? false : _props$disable,
      _props$keyboardAvoidi = props.keyboardAvoiding,
      keyboardAvoiding = _props$keyboardAvoidi === void 0 ? true : _props$keyboardAvoidi,
      _props$inside = props.inside,
      inside = _props$inside === void 0 ? false : _props$inside,
      renderItem = props.renderItem,
      renderLeftIcon = props.renderLeftIcon,
      renderRightIcon = props.renderRightIcon,
      renderSelectedItem = props.renderSelectedItem,
      renderInputSearch = props.renderInputSearch,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      _props$showsVerticalS = props.showsVerticalScrollIndicator,
      showsVerticalScrollIndicator = _props$showsVerticalS === void 0 ? true : _props$showsVerticalS,
      _props$dropdownPositi = props.dropdownPosition,
      dropdownPosition = _props$dropdownPositi === void 0 ? 'auto' : _props$dropdownPositi,
      flatListProps = props.flatListProps,
      _props$alwaysRenderIt = props.alwaysRenderItemSelected,
      alwaysRenderItemSelected = _props$alwaysRenderIt === void 0 ? false : _props$alwaysRenderIt,
      searchQuery = props.searchQuery;
  var ref = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      currentValue = _useState4[0],
      setCurrentValue = _useState4[1];

  var _useState5 = (0, _react.useState)(data),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      listData = _useState6[0],
      setListData = _useState6[1];

  var _useState7 = (0, _react.useState)(Math.random()),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      key = _useState8[0],
      setKey = _useState8[1];

  var _useState9 = (0, _react.useState)(),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      position = _useState10[0],
      setPosition = _useState10[1];

  var _useState11 = (0, _react.useState)(false),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      focus = _useState12[0],
      setFocus = _useState12[1];

  var _useState13 = (0, _react.useState)(0),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      keyboardHeight = _useState14[0],
      setKeyboardHeight = _useState14[1];

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      W = _Dimensions$get.width,
      H = _Dimensions$get.height;

  var styleContainerVertical = {
    backgroundColor: 'rgba(0,0,0,0.1)',
    alignItems: 'center'
  };
  var styleHorizontal = {
    marginBottom: 20,
    width: W / 2,
    alignSelf: 'center'
  };
  (0, _react.useImperativeHandle)(currentRef, function () {
    return {
      open: eventOpen,
      close: eventClose
    };
  });
  (0, _react.useEffect)(function () {
    setListData((0, _toConsumableArray2.default)(data));
  }, [data]);

  var eventOpen = function eventOpen() {
    if (!disable) {
      setVisible(true);

      if (onFocus) {
        onFocus();
      }
    }
  };

  var eventClose = function eventClose() {
    if (!disable) {
      setVisible(false);

      if (onBlur) {
        onBlur();
      }
    }
  };

  var font = function font() {
    if (fontFamily) {
      return {
        fontFamily: fontFamily
      };
    } else {
      return {};
    }
  };

  var onKeyboardDidShow = function onKeyboardDidShow(e) {
    _measure();

    setKeyboardHeight(e.endCoordinates.height + (isIOS ? 0 : 50));
  };

  var onKeyboardDidHide = function onKeyboardDidHide() {
    setKeyboardHeight(0);
  };

  (0, _react.useEffect)(function () {
    var susbcriptionKeyboardDidShow = _reactNative.Keyboard.addListener('keyboardDidShow', onKeyboardDidShow);

    var susbcriptionKeyboardDidHide = _reactNative.Keyboard.addListener('keyboardDidHide', onKeyboardDidHide);

    return function () {
      if (typeof (susbcriptionKeyboardDidShow == null ? void 0 : susbcriptionKeyboardDidShow.remove) === 'function') {
        susbcriptionKeyboardDidShow.remove();
      } else {
        _reactNative.Keyboard.removeListener('keyboardDidShow', onKeyboardDidShow);
      }

      if (typeof (susbcriptionKeyboardDidHide == null ? void 0 : susbcriptionKeyboardDidHide.remove) === 'function') {
        susbcriptionKeyboardDidHide.remove();
      } else {
        _reactNative.Keyboard.removeListener('keyboardDidHide', onKeyboardDidHide);
      }
    };
  }, []);
  (0, _react.useEffect)(function () {
    getValue();
  }, [value]);

  var getValue = function getValue() {
    setCurrentValue(value ? (0, _toConsumableArray2.default)(value) : []);
  };

  var showOrClose = function showOrClose() {
    if (!disable) {
      _measure();

      setVisible(!visible);
      setListData(data);

      if (!visible) {
        if (onFocus) {
          onFocus();
        }
      } else {
        if (onBlur) {
          onBlur();
        }
      }
    }
  };

  var onSelect = function onSelect(item) {
    onSearch('');
    var index = currentValue.findIndex(function (e) {
      return e === _lodash.default.get(item, valueField);
    });

    if (index > -1) {
      currentValue.splice(index, 1);
    } else {
      if (maxSelect) {
        if (currentValue.length < maxSelect) {
          currentValue.push(_lodash.default.get(item, valueField));
        }
      } else {
        currentValue.push(_lodash.default.get(item, valueField));
      }
    }

    onChange(currentValue);
    setKey(Math.random());
  };

  var _renderDropdown = function _renderDropdown() {
    return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: showOrClose
    }, _react.default.createElement(_reactNative.View, {
      style: _styles.styles.dropdown
    }, renderLeftIcon == null ? void 0 : renderLeftIcon(), _react.default.createElement(_reactNative.Text, {
      style: [_styles.styles.textItem, placeholderStyle, font()]
    }, placeholder), renderRightIcon ? renderRightIcon() : _react.default.createElement(_reactNative.Image, {
      source: ic_down,
      style: [_styles.styles.icon, {
        tintColor: iconColor
      }, iconStyle]
    })));
  };

  var checkSelected = function checkSelected(item) {
    var index = currentValue.findIndex(function (e) {
      return e === _lodash.default.get(item, valueField);
    });
    return index > -1;
  };

  var _renderItem = function _renderItem(_ref) {
    var item = _ref.item,
        index = _ref.index;
    return _react.default.createElement(_reactNative.TouchableOpacity, {
      key: index,
      onPress: function onPress() {
        return onSelect(item);
      },
      style: [checkSelected(item) && {
        backgroundColor: activeColor,
        marginBottom: 0.5
      }]
    }, renderItem ? renderItem(item) : _react.default.createElement(_reactNative.View, {
      style: _styles.styles.item
    }, _react.default.createElement(_reactNative.Text, {
      style: [_styles.styles.textItem, placeholderStyle, font()]
    }, _lodash.default.get(item, labelField))));
  };

  var onSearch = function onSearch(text) {
    if (text.length > 0) {
      var defaultFilterFunction = function defaultFilterFunction(e) {
        var _$get;

        var item = (_$get = _lodash.default.get(e, labelField)) == null ? void 0 : _$get.toLowerCase().replace(' ', '').normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        var key = text.toLowerCase().replace(' ', '').normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        return item.indexOf(key) >= 0;
      };

      var propSearchFunction = function propSearchFunction(e) {
        var labelText = _lodash.default.get(e, labelField);

        return searchQuery == null ? void 0 : searchQuery(text, labelText);
      };

      var dataSearch = data.filter(searchQuery ? propSearchFunction : defaultFilterFunction);
      setListData(dataSearch);
    } else {
      setListData(data);
    }
  };

  var renderSearch = function renderSearch() {
    if (search) {
      if (renderInputSearch) {
        return renderInputSearch(function (text) {
          onSearch(text);
        });
      } else {
        return _react.default.createElement(_TextInput.default, {
          style: [_styles.styles.input, inputSearchStyle],
          inputStyle: [inputSearchStyle, font()],
          autoCorrect: false,
          keyboardType: isIOS ? 'default' : 'visible-password',
          placeholder: searchPlaceholder,
          onChangeText: onSearch,
          placeholderTextColor: "gray",
          iconStyle: [{
            tintColor: iconColor
          }, iconStyle],
          onFocus: function onFocus() {
            return setFocus(true);
          },
          onBlur: function onBlur() {
            setFocus(false);
          }
        });
      }
    }

    return null;
  };

  var _renderListTop = function _renderListTop() {
    return _react.default.createElement(_reactNative.TouchableWithoutFeedback, null, _react.default.createElement(_reactNative.View, {
      style: {
        flex: 1
      }
    }, _react.default.createElement(_reactNative.FlatList, (0, _extends2.default)({}, flatListProps, {
      keyboardShouldPersistTaps: "handled",
      data: listData,
      inverted: true,
      renderItem: _renderItem,
      keyExtractor: function keyExtractor(item, index) {
        return index.toString();
      },
      showsVerticalScrollIndicator: showsVerticalScrollIndicator
    })), renderSearch()));
  };

  var _renderListBottom = function _renderListBottom() {
    return _react.default.createElement(_reactNative.TouchableWithoutFeedback, null, _react.default.createElement(_reactNative.View, {
      style: {
        flex: 1
      }
    }, renderSearch(), _react.default.createElement(_reactNative.FlatList, (0, _extends2.default)({}, flatListProps, {
      keyboardShouldPersistTaps: "handled",
      data: listData,
      renderItem: _renderItem,
      keyExtractor: function keyExtractor(item, index) {
        return index.toString();
      },
      showsVerticalScrollIndicator: showsVerticalScrollIndicator
    }))));
  };

  var _renderModal = (0, _react.useCallback)(function () {
    if (visible && position) {
      var isFull = position.isFull,
          w = position.w,
          top = position.top,
          bottom = position.bottom,
          left = position.left,
          height = position.height;

      if (w && top && bottom) {
        var styleVertical = {
          left: left,
          maxHeight: maxHeight
        };
        var isTopPosition = dropdownPosition === 'auto' ? bottom < (isIOS ? 200 : 300) : dropdownPosition === 'top' ? true : false;
        var topHeight = isTopPosition ? top - height : top;
        var keyboardStyle = {};

        if (keyboardAvoiding) {
          if (renderInputSearch) {
            if (keyboardHeight > 0 && bottom < keyboardHeight + height) {
              if (isTopPosition) {
                topHeight = H - keyboardHeight;
              } else {
                keyboardStyle = {
                  backgroundColor: 'rgba(0,0,0,0.1)'
                };
                topHeight = H - keyboardHeight - 55;
              }
            }
          } else {
            if (focus && keyboardHeight > 0 && bottom < keyboardHeight + height) {
              if (isTopPosition) {
                topHeight = H - keyboardHeight;
              } else {
                keyboardStyle = {
                  backgroundColor: 'rgba(0,0,0,0.1)'
                };
                topHeight = H - keyboardHeight - 55;
              }
            }
          }
        }

        return _react.default.createElement(_reactNative.Modal, {
          transparent: true,
          visible: visible,
          supportedOrientations: ['landscape', 'portrait'],
          onRequestClose: showOrClose
        }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
          onPress: showOrClose
        }, _react.default.createElement(_reactNative.View, {
          style: [{
            flex: 1
          }, isFull && styleContainerVertical, keyboardStyle]
        }, _react.default.createElement(_reactNative.View, {
          style: {
            height: topHeight,
            width: w,
            justifyContent: 'flex-end'
          }
        }, isTopPosition && _react.default.createElement(_reactNative.View, {
          style: [{
            width: w
          }, _styles.styles.container, containerStyle, isFull ? styleHorizontal : styleVertical]
        }, _renderListTop())), _react.default.createElement(_reactNative.View, {
          style: {
            flex: 1
          }
        }, !isTopPosition && _react.default.createElement(_reactNative.View, {
          style: [{
            width: w
          }, _styles.styles.container, containerStyle, isFull ? styleHorizontal : styleVertical]
        }, _renderListBottom())))));
      }

      return null;
    }

    return null;
  }, [focus, position, visible, keyboardHeight, listData, currentValue]);

  var _measure = function _measure() {
    if (ref && ref != null && ref.current) {
      ref.current.measure(function (width, height, px, py, fx, fy) {
        var isFull = orientation === 'LANDSCAPE' && !isTablet;
        var w = Math.floor(px);
        var top = isFull ? 20 : Math.floor(py) + Math.floor(fy) + 2;
        var bottom = H - top;
        var left = _reactNative.I18nManager.isRTL ? W - Math.floor(px) - Math.floor(fx) : Math.floor(fx);
        setPosition({
          isFull: isFull,
          w: w,
          top: top,
          bottom: Math.floor(bottom),
          left: left,
          height: Math.floor(py)
        });
      });
    }
  };

  var unSelect = function unSelect(item) {
    if (!disable) {
      onSelect(item);
    }
  };

  var _renderItemSelected = function _renderItemSelected(inside) {
    var list = data.filter(function (e) {
      var check = value == null ? void 0 : value.indexOf(_lodash.default.get(e, valueField));

      if (check !== -1) {
        return e;
      }
    });
    return _react.default.createElement(_reactNative.View, {
      style: [{
        flexDirection: 'row',
        flexWrap: 'wrap'
      }, inside && {
        flex: 1
      }]
    }, list.map(function (e) {
      if (renderSelectedItem) {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          key: _lodash.default.get(e, labelField),
          onPress: function onPress() {
            return unSelect(e);
          }
        }, renderSelectedItem(e, function () {
          unSelect(e);
        }));
      } else {
        return _react.default.createElement(_reactNative.TouchableOpacity, {
          key: _lodash.default.get(e, labelField),
          style: [_styles.styles.selectedItem, selectedStyle],
          onPress: function onPress() {
            return unSelect(e);
          }
        }, _react.default.createElement(_reactNative.Text, {
          style: [{
            fontSize: 12,
            color: 'gray'
          }, selectedTextStyle, font()]
        }, _lodash.default.get(e, labelField)), _react.default.createElement(_reactNative.Text, {
          style: [_styles.styles.selectedTextItem, selectedTextStyle]
        }, "\u24E7"));
      }
    }));
  };

  var _renderInside = function _renderInside() {
    return _react.default.createElement(_reactNative.View, {
      style: [{
        justifyContent: 'center'
      }, style],
      ref: ref,
      onLayout: _measure
    }, _renderDropdownInside(), _renderModal());
  };

  var _renderDropdownInside = function _renderDropdownInside() {
    return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
      onPress: showOrClose
    }, _react.default.createElement(_reactNative.View, {
      style: _styles.styles.dropdownInside
    }, renderLeftIcon == null ? void 0 : renderLeftIcon(), value && (value == null ? void 0 : value.length) > 0 ? _renderItemSelected(true) : _react.default.createElement(_reactNative.Text, {
      style: [_styles.styles.textItem, placeholderStyle, font()]
    }, placeholder), renderRightIcon ? renderRightIcon() : _react.default.createElement(_reactNative.Image, {
      source: ic_down,
      style: [_styles.styles.icon, {
        tintColor: iconColor
      }, iconStyle]
    })));
  };

  if (inside) {
    return _renderInside();
  }

  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, {
    style: [{
      justifyContent: 'center'
    }, style],
    ref: ref,
    onLayout: _measure
  }, _renderDropdown(), _renderModal()), (!visible || alwaysRenderItemSelected) && _renderItemSelected(false));
});

MultiSelectComponent.defaultProps = defaultProps;
var _default = MultiSelectComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,