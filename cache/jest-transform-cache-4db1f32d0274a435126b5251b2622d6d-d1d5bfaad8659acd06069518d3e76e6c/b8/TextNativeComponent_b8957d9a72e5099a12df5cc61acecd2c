80b8240c07512e9a7bda7df8475f2f7a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _ReactNativeViewAttributes = _interopRequireDefault(require("../Components/View/ReactNativeViewAttributes"));

var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));

var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));

var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return {
    validAttributes: (0, _extends2.default)({}, _ReactNativeViewAttributes.default.UIView, {
      isHighlighted: true,
      isPressable: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true,
      android_hyphenationFrequency: true
    }),
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };
});
exports.NativeText = NativeText;
var NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return {
    validAttributes: (0, _extends2.default)({}, _ReactNativeViewAttributes.default.UIView, {
      isHighlighted: true,
      isPressable: true,
      maxFontSizeMultiplier: true
    }),
    uiViewClassName: 'RCTVirtualText'
  };
});
exports.NativeVirtualText = NativeVirtualText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYXRpdmVUZXh0IiwidmFsaWRBdHRyaWJ1dGVzIiwiUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcyIsIlVJVmlldyIsImlzSGlnaGxpZ2h0ZWQiLCJpc1ByZXNzYWJsZSIsIm51bWJlck9mTGluZXMiLCJlbGxpcHNpemVNb2RlIiwiYWxsb3dGb250U2NhbGluZyIsIm1heEZvbnRTaXplTXVsdGlwbGllciIsImRpc2FibGVkIiwic2VsZWN0YWJsZSIsInNlbGVjdGlvbkNvbG9yIiwiYWRqdXN0c0ZvbnRTaXplVG9GaXQiLCJtaW5pbXVtRm9udFNjYWxlIiwidGV4dEJyZWFrU3RyYXRlZ3kiLCJvblRleHRMYXlvdXQiLCJvbklubGluZVZpZXdMYXlvdXQiLCJkYXRhRGV0ZWN0b3JUeXBlIiwiYW5kcm9pZF9oeXBoZW5hdGlvbkZyZXF1ZW5jeSIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BUZXh0TGF5b3V0IiwicmVnaXN0cmF0aW9uTmFtZSIsInRvcElubGluZVZpZXdMYXlvdXQiLCJ1aVZpZXdDbGFzc05hbWUiLCJOYXRpdmVWaXJ0dWFsVGV4dCIsImdsb2JhbCIsIlJOJEJyaWRnZWxlc3MiLCJVSU1hbmFnZXIiLCJoYXNWaWV3TWFuYWdlckNvbmZpZyJdLCJzb3VyY2VzIjpbIlRleHROYXRpdmVDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1JlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IHt0eXBlIEhvc3RDb21wb25lbnR9IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MgZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyc7XG5pbXBvcnQge3R5cGUgUHJvY2Vzc2VkQ29sb3JWYWx1ZX0gZnJvbSAnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InO1xuaW1wb3J0IHt0eXBlIFRleHRQcm9wc30gZnJvbSAnLi9UZXh0UHJvcHMnO1xuXG50eXBlIE5hdGl2ZVRleHRQcm9wcyA9ICRSZWFkT25seTx7XG4gIC4uLlRleHRQcm9wcyxcbiAgaXNIaWdobGlnaHRlZD86ID9ib29sZWFuLFxuICBzZWxlY3Rpb25Db2xvcj86ID9Qcm9jZXNzZWRDb2xvclZhbHVlLFxuICAvLyBUaGlzIGlzIG9ubHkgbmVlZGVkIGZvciBwbGF0Zm9ybXMgdGhhdCBvcHRpbWl6ZSB0ZXh0IGhpdCB0ZXN0aW5nLCBlLmcuLFxuICAvLyByZWFjdC1uYXRpdmUtd2luZG93cy4gSXQgY2FuIGJlIHVzZWQgdG8gb25seSBoaXQgdGVzdCB2aXJ0dWFsIHRleHQgc3BhbnNcbiAgLy8gdGhhdCBoYXZlIHByZXNzYWJsZSBldmVudHMgYXR0YWNoZWQgdG8gdGhlbS5cbiAgaXNQcmVzc2FibGU/OiA/Ym9vbGVhbixcbn0+O1xuXG5leHBvcnQgY29uc3QgTmF0aXZlVGV4dDogSG9zdENvbXBvbmVudDxOYXRpdmVUZXh0UHJvcHM+ID1cbiAgKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoJ1JDVFRleHQnLCAoKSA9PiAoe1xuICAgIHZhbGlkQXR0cmlidXRlczoge1xuICAgICAgLi4uUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcy5VSVZpZXcsXG4gICAgICBpc0hpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgaXNQcmVzc2FibGU6IHRydWUsXG4gICAgICBudW1iZXJPZkxpbmVzOiB0cnVlLFxuICAgICAgZWxsaXBzaXplTW9kZTogdHJ1ZSxcbiAgICAgIGFsbG93Rm9udFNjYWxpbmc6IHRydWUsXG4gICAgICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IHRydWUsXG4gICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgIHNlbGVjdGFibGU6IHRydWUsXG4gICAgICBzZWxlY3Rpb25Db2xvcjogdHJ1ZSxcbiAgICAgIGFkanVzdHNGb250U2l6ZVRvRml0OiB0cnVlLFxuICAgICAgbWluaW11bUZvbnRTY2FsZTogdHJ1ZSxcbiAgICAgIHRleHRCcmVha1N0cmF0ZWd5OiB0cnVlLFxuICAgICAgb25UZXh0TGF5b3V0OiB0cnVlLFxuICAgICAgb25JbmxpbmVWaWV3TGF5b3V0OiB0cnVlLFxuICAgICAgZGF0YURldGVjdG9yVHlwZTogdHJ1ZSxcbiAgICAgIGFuZHJvaWRfaHlwaGVuYXRpb25GcmVxdWVuY3k6IHRydWUsXG4gICAgfSxcbiAgICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgICB0b3BUZXh0TGF5b3V0OiB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvblRleHRMYXlvdXQnLFxuICAgICAgfSxcbiAgICAgIHRvcElubGluZVZpZXdMYXlvdXQ6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uSW5saW5lVmlld0xheW91dCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVGV4dCcsXG4gIH0pKTogYW55KTtcblxuZXhwb3J0IGNvbnN0IE5hdGl2ZVZpcnR1YWxUZXh0OiBIb3N0Q29tcG9uZW50PE5hdGl2ZVRleHRQcm9wcz4gPVxuICAhZ2xvYmFsLlJOJEJyaWRnZWxlc3MgJiYgIVVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZygnUkNUVmlydHVhbFRleHQnKVxuICAgID8gTmF0aXZlVGV4dFxuICAgIDogKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoJ1JDVFZpcnR1YWxUZXh0JywgKCkgPT4gKHtcbiAgICAgICAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgLi4uUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcy5VSVZpZXcsXG4gICAgICAgICAgaXNIaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgICAgICBpc1ByZXNzYWJsZTogdHJ1ZSxcbiAgICAgICAgICBtYXhGb250U2l6ZU11bHRpcGxpZXI6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHVpVmlld0NsYXNzTmFtZTogJ1JDVFZpcnR1YWxUZXh0JyxcbiAgICAgIH0pKTogYW55KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBVUE7O0FBQ0E7O0FBRUE7O0FBY08sSUFBTUEsVUFBMEMsR0FDcEQsOENBQWdDLFNBQWhDLEVBQTJDO0VBQUEsT0FBTztJQUNqREMsZUFBZSw2QkFDVkMsbUNBQTBCQyxNQURoQjtNQUViQyxhQUFhLEVBQUUsSUFGRjtNQUdiQyxXQUFXLEVBQUUsSUFIQTtNQUliQyxhQUFhLEVBQUUsSUFKRjtNQUtiQyxhQUFhLEVBQUUsSUFMRjtNQU1iQyxnQkFBZ0IsRUFBRSxJQU5MO01BT2JDLHFCQUFxQixFQUFFLElBUFY7TUFRYkMsUUFBUSxFQUFFLElBUkc7TUFTYkMsVUFBVSxFQUFFLElBVEM7TUFVYkMsY0FBYyxFQUFFLElBVkg7TUFXYkMsb0JBQW9CLEVBQUUsSUFYVDtNQVliQyxnQkFBZ0IsRUFBRSxJQVpMO01BYWJDLGlCQUFpQixFQUFFLElBYk47TUFjYkMsWUFBWSxFQUFFLElBZEQ7TUFlYkMsa0JBQWtCLEVBQUUsSUFmUDtNQWdCYkMsZ0JBQWdCLEVBQUUsSUFoQkw7TUFpQmJDLDRCQUE0QixFQUFFO0lBakJqQixFQURrQztJQW9CakRDLGdCQUFnQixFQUFFO01BQ2hCQyxhQUFhLEVBQUU7UUFDYkMsZ0JBQWdCLEVBQUU7TUFETCxDQURDO01BSWhCQyxtQkFBbUIsRUFBRTtRQUNuQkQsZ0JBQWdCLEVBQUU7TUFEQztJQUpMLENBcEIrQjtJQTRCakRFLGVBQWUsRUFBRTtFQTVCZ0MsQ0FBUDtBQUFBLENBQTNDLENBREk7O0FBZ0NBLElBQU1DLGlCQUFpRCxHQUM1RCxDQUFDQyxNQUFNLENBQUNDLGFBQVIsSUFBeUIsQ0FBQ0MsbUJBQVVDLG9CQUFWLENBQStCLGdCQUEvQixDQUExQixHQUNJN0IsVUFESixHQUVLLDhDQUFnQyxnQkFBaEMsRUFBa0Q7RUFBQSxPQUFPO0lBQ3hEQyxlQUFlLDZCQUNWQyxtQ0FBMEJDLE1BRGhCO01BRWJDLGFBQWEsRUFBRSxJQUZGO01BR2JDLFdBQVcsRUFBRSxJQUhBO01BSWJJLHFCQUFxQixFQUFFO0lBSlYsRUFEeUM7SUFPeERlLGVBQWUsRUFBRTtFQVB1QyxDQUFQO0FBQUEsQ0FBbEQsQ0FIQSJ9