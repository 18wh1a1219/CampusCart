{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,OAAyB;EAAA,IAAnBC,KAAmB;EACxC,IAAMC,eAAe,GAClB,CAACD,KAAK,CAACE,KAAP,KAAgBC,4BAAhB,IAAgBA,gCAAhB,MAAgBA,GAAhB,MAAgBA,2BAAYC,cAAZD,EAAhB,KAAiD,OADpD;;EAGA,sBACEE,KAAK,CAACC,QAAND,CAAwB,KAAxBA,CADF;EAAA;EAAA,IAAOE,mBAAP;EAAA,IAA4BC,sBAA5B;;EAEA,uBACEH,KAAK,CAACC,QAAND,CAAgCJ,eAAhCI,CADF;EAAA;EAAA,IAAOI,WAAP;EAAA,IAAoBC,cAApB;;EAGA,IAAMC,sBAAsB,GAC1BC,SADID,sBACJC,YAD6B,EAE1B;IACH,IAAQH,WAAR,GAAwBG,WAAxB,CAAQH,WAAR;IACAC,cAAc,CAACD,WAAD,CAAdC;EAJF;;EAOAL,KAAK,CAACQ,SAANR,CAAgB,YAAM;IACpB,IAAIS,YAAJ;;IAEA,IAAI,CAACd,KAAK,CAACE,KAAX,EAAkB;MAChBY,YAAY,GAAG,wCACbC,8BADa,EAEb,qBAFa,EAGbP,sBAHa,CAAfM;IAKD;;IACD,OAAO,YAAM;MACX,IAAI,CAACd,KAAK,CAACE,KAAX,EAAkB;QAAA;;QAChB,mCAAY,IAAZ,sDAAcc,MAAd;MACD;IAHH;EAVF,GAeG,CAAChB,KAAK,CAACE,KAAP,CAfHG;EAiBAA,KAAK,CAACQ,SAANR,CAAgB,YAAM;IACpB,IAAIY,sBAAJ;;IACA,IAAI,CAACjB,KAAK,CAACE,KAAX,EAAkB;MAChBe,sBAAsB,GAAGd,4BAAH,IAAGA,gCAAH,MAAGA,GAAH,MAAGA,2BAAYe,iBAAZf,CACvBQ,sBADuBR,CAAzBc;IAGD;;IACD,OAAO,YAAM;MACX,IAAI,CAACjB,KAAK,CAACE,KAAX,EAAkB;QAChB,IAAIe,sBAAJ,EAA4B;UAC1BA,sBAAsB,CAACD,MAAvBC;QADF,OAEO;UACLd,0GAAYgB,oBAAZhB,CAAiCQ,sBAAjCR;QACD;MACF;IAPH;EAPF,GAgBG,CAACH,KAAK,CAACE,KAAP,CAhBHG;;EAkBA,IAAMe,QAAQ,GAAG,SAAXA,QAAW,GAAM;IACrB,IAAeC,aAAf,GAAiCrB,KAAjC,CAAQE,KAAR;;IAEA,IAAImB,aAAJ,EAAmB;MACjB,OAAOA,aAAP;IADF,OAEO;MACL,IAAMnB,KAAK,GACTO,WAAW,KAAK,MAAhBA,GAAyBa,kBAAzBb,GAAqCc,qBADvC;MAIA,kCACKrB,KADL;QAEEsB,SAAS,6BACJtB,KAAK,CAACsB,SADF;UAEPC,KAAK,EAAElB,mBAAmB,GAAG,CAAH,GAAO;QAF1B;MAFX;IAOD;EAjBH;;EAoBA,IAAQmB,QAAR,GAA+B1B,KAA/B,CAAQ0B,QAAR;EAAA,IAAkBC,QAAlB,GAA+B3B,KAA/B,CAAkB2B,QAAlB;EACA,OACEtB,oBAACuB,mBAAD,QACEvB,oBAACwB,kBAAD;IAAkBC,KAAK,EAAEH,QAAQ,IAAI;MAAEI,IAAI,EAAEC;IAAR;EAArC,GACE3B,oBAAC4B,sBAAD;IAAe/B,KAAK,EAAEkB,QAAQ;EAA9B,GAAmCM,QAAnC,CADF,CADF,CADF;AAxEF;;eAiFe3B","names":["Provider","props","colorSchemeName","theme","Appearance","getColorScheme","React","useState","reduceMotionEnabled","setReduceMotionEnabled","colorScheme","setColorScheme","handleAppearanceChange","preferences","useEffect","subscription","AccessibilityInfo","remove","appearanceSubscription","addChangeListener","removeChangeListener","getTheme","providedTheme","DarkTheme","DefaultTheme","animation","scale","children","settings","_PortalHost","_settings","value","icon","MaterialCommunityIcon","_theming"],"sources":["Provider.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityInfo,\n  Appearance,\n  ColorSchemeName,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\nimport { addEventListener } from '../utils/addEventListener';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\nconst Provider = ({ ...props }: Props) => {\n  const colorSchemeName =\n    (!props.theme && Appearance?.getColorScheme()) || 'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] =\n    React.useState<boolean>(false);\n  const [colorScheme, setColorScheme] =\n    React.useState<ColorSchemeName>(colorSchemeName);\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (!props.theme) {\n      subscription = addEventListener(\n        AccessibilityInfo,\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        subscription?.remove();\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    let appearanceSubscription: NativeEventSubscription | undefined;\n    if (!props.theme) {\n      appearanceSubscription = Appearance?.addChangeListener(\n        handleAppearanceChange\n      ) as NativeEventSubscription | undefined;\n    }\n    return () => {\n      if (!props.theme) {\n        if (appearanceSubscription) {\n          appearanceSubscription.remove();\n        } else {\n          Appearance?.removeChangeListener(handleAppearanceChange);\n        }\n      }\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const { theme: providedTheme } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (\n        colorScheme === 'dark' ? DarkTheme : DefaultTheme\n      ) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  const { children, settings } = props;\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]}