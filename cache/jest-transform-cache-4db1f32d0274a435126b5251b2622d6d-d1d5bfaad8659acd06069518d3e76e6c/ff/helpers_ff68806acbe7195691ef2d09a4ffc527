66a3ba50ec7faafc373dc46c58e42999
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adjustPaddingOut = exports.adjustPaddingFlat = void 0;
exports.calculateFlatAffixTopPosition = calculateFlatAffixTopPosition;
exports.calculateLabelTopPosition = exports.calculateInputHeight = exports.calculateFlatInputHorizontalPadding = void 0;
exports.calculateOutlinedIconAndAffixTopPosition = calculateOutlinedIconAndAffixTopPosition;
exports.interpolatePlaceholder = exports.calculatePadding = void 0;

var _constants = require("./constants");

var _enums = require("./Adornment/enums");

var calculateLabelTopPosition = function calculateLabelTopPosition(labelHeight) {
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var customHeight = height > 0 ? height : 0;
  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);
};

exports.calculateLabelTopPosition = calculateLabelTopPosition;

var calculateInputHeight = function calculateInputHeight(labelHeight) {
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var minHeight = arguments.length > 2 ? arguments[2] : undefined;
  var finalHeight = height > 0 ? height : labelHeight;
  if (height > 0) return height;
  return finalHeight < minHeight ? minHeight : finalHeight;
};

exports.calculateInputHeight = calculateInputHeight;

var calculatePadding = function calculatePadding(props) {
  var height = props.height,
      _props$multiline = props.multiline,
      multiline = _props$multiline === void 0 ? false : _props$multiline;
  var result = 0;

  if (multiline) {
    if (height && multiline) {
      result = calculateTextAreaPadding(props);
    } else {
      result = calculateInputPadding(props);
    }
  }

  return Math.max(0, result);
};

exports.calculatePadding = calculatePadding;

var calculateTextAreaPadding = function calculateTextAreaPadding(props) {
  var dense = props.dense;
  return dense ? 10 : 20;
};

var calculateInputPadding = function calculateInputPadding(_ref) {
  var topPosition = _ref.topPosition,
      fontSize = _ref.fontSize,
      multiline = _ref.multiline,
      scale = _ref.scale,
      dense = _ref.dense,
      offset = _ref.offset,
      isAndroid = _ref.isAndroid;
  var refFontSize = scale * fontSize;
  var result = Math.floor(topPosition / 2);
  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);
  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);
  return result;
};

var adjustPaddingOut = function adjustPaddingOut(_ref2) {
  var pad = _ref2.pad,
      multiline = _ref2.multiline,
      label = _ref2.label,
      scale = _ref2.scale,
      height = _ref2.height,
      fontSize = _ref2.fontSize,
      lineHeight = _ref2.lineHeight,
      dense = _ref2.dense,
      offset = _ref2.offset,
      isAndroid = _ref2.isAndroid;
  var fontHeight = lineHeight !== null && lineHeight !== void 0 ? lineHeight : fontSize;
  var refFontHeight = scale * fontSize;
  var result = pad;

  if (height && !multiline) {
    return {
      paddingTop: Math.max(0, (height - fontHeight) / 2),
      paddingBottom: Math.max(0, (height - fontHeight) / 2)
    };
  }

  if (!isAndroid && multiline) {
    if (dense) {
      if (label) {
        result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;
      } else {
        result += 0;
      }
    }

    if (!dense) {
      if (label) {
        result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);
      } else {
        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;
      }
    }

    result = Math.floor(result);
  }

  return {
    paddingTop: result,
    paddingBottom: result
  };
};

exports.adjustPaddingOut = adjustPaddingOut;

var adjustPaddingFlat = function adjustPaddingFlat(_ref3) {
  var pad = _ref3.pad,
      scale = _ref3.scale,
      multiline = _ref3.multiline,
      label = _ref3.label,
      height = _ref3.height,
      offset = _ref3.offset,
      dense = _ref3.dense,
      fontSize = _ref3.fontSize,
      isAndroid = _ref3.isAndroid,
      styles = _ref3.styles;
  var result = pad;
  var topResult = result;
  var bottomResult = result;
  var paddingTop = styles.paddingTop,
      paddingBottom = styles.paddingBottom;
  var refFontSize = scale * fontSize;

  if (!multiline) {
    if (label) {
      return {
        paddingTop: paddingTop,
        paddingBottom: paddingBottom
      };
    }

    return {
      paddingTop: result,
      paddingBottom: result
    };
  }

  if (label) {
    topResult = paddingTop;
    bottomResult = paddingBottom;

    if (!isAndroid) {
      if (dense) {
        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;
      }

      if (!dense) {
        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;
      }
    }

    topResult = Math.floor(topResult);
  } else {
    if (height) {
      return {
        paddingTop: Math.max(0, (height - fontSize) / 2),
        paddingBottom: Math.max(0, (height - fontSize) / 2)
      };
    }

    if (!isAndroid) {
      if (dense) {
        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);
      }

      if (!dense) {
        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);
      }

      result = Math.floor(result);
      topResult = result;
      bottomResult = result;
    }
  }

  return {
    paddingTop: Math.max(0, topResult),
    paddingBottom: Math.max(0, bottomResult)
  };
};

exports.adjustPaddingFlat = adjustPaddingFlat;

var interpolatePlaceholder = function interpolatePlaceholder(labeled, hasActiveOutline) {
  return labeled.interpolate({
    inputRange: [0, 1],
    outputRange: [hasActiveOutline ? 0 : 1, 1]
  });
};

exports.interpolatePlaceholder = interpolatePlaceholder;

function calculateFlatAffixTopPosition(_ref4) {
  var height = _ref4.height,
      paddingTop = _ref4.paddingTop,
      paddingBottom = _ref4.paddingBottom,
      affixHeight = _ref4.affixHeight;
  var inputHeightWithoutPadding = height - paddingTop - paddingBottom;
  var halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;
  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;
}

function calculateOutlinedIconAndAffixTopPosition(_ref5) {
  var height = _ref5.height,
      affixHeight = _ref5.affixHeight,
      labelYOffset = _ref5.labelYOffset;
  return (height - affixHeight + labelYOffset) / 2;
}

var calculateFlatInputHorizontalPadding = function calculateFlatInputHorizontalPadding(_ref6) {
  var adornmentConfig = _ref6.adornmentConfig;
  var paddingLeft = _constants.LABEL_PADDING_HORIZONTAL;
  var paddingRight = _constants.LABEL_PADDING_HORIZONTAL;
  adornmentConfig.forEach(function (_ref7) {
    var type = _ref7.type,
        side = _ref7.side;

    if (type === _enums.AdornmentType.Icon && side === _enums.AdornmentSide.Left) {
      paddingLeft = _constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET + _constants.FLAT_INPUT_OFFSET;
    } else if (side === _enums.AdornmentSide.Right) {
      if (type === _enums.AdornmentType.Affix) {
        paddingRight = _constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET + _constants.FLAT_INPUT_OFFSET;
      } else if (type === _enums.AdornmentType.Icon) {
        paddingRight = _constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET + _constants.FLAT_INPUT_OFFSET;
      }
    }
  });
  return {
    paddingLeft: paddingLeft,
    paddingRight: paddingRight
  };
};

exports.calculateFlatInputHorizontalPadding = calculateFlatInputHorizontalPadding;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQTs7QUFNQTs7QUF3Qk8sSUFBTUEseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUE0QixDQUN2Q0MsV0FEdUMsRUFJNUI7RUFBQSxJQUZYQyxNQUVXLHVFQUZNLENBRU47RUFBQSxJQURYQyxlQUNXLHVFQURlLENBQ2Y7RUFDWCxJQUFNQyxZQUFZLEdBQUdGLE1BQU0sR0FBRyxDQUFUQSxHQUFhQSxNQUFiQSxHQUFzQixDQUEzQztFQUVBLE9BQU9HLElBQUksQ0FBQ0MsS0FBTEQsQ0FBVyxDQUFDRCxZQUFZLEdBQUdILFdBQWhCLElBQStCLENBQS9CLEdBQW1DRSxlQUE5Q0UsQ0FBUDtBQVBLOzs7O0FBVUEsSUFBTUUsb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUF1QixDQUNsQ04sV0FEa0MsRUFJdkI7RUFBQSxJQUZYQyxNQUVXLHVFQUZHLENBRUg7RUFBQSxJQURYTSxTQUNXO0VBQ1gsSUFBTUMsV0FBVyxHQUFHUCxNQUFNLEdBQUcsQ0FBVEEsR0FBYUEsTUFBYkEsR0FBc0JELFdBQTFDO0VBRUEsSUFBSUMsTUFBTSxHQUFHLENBQWIsRUFBZ0IsT0FBT0EsTUFBUDtFQUNoQixPQUFPTyxXQUFXLEdBQUdELFNBQWRDLEdBQTBCRCxTQUExQkMsR0FBc0NBLFdBQTdDO0FBUks7Ozs7QUFXQSxJQUFNQyxnQkFBZ0IsR0FBSUMsU0FBcEJELGdCQUFvQkMsTUFBRCxFQUFpQztFQUMvRCxJQUFRVCxNQUFSLEdBQXNDUyxLQUF0QyxDQUFRVCxNQUFSO0VBQUEsdUJBQXNDUyxLQUF0QyxDQUFnQkMsU0FBaEI7RUFBQSxJQUFnQkEsU0FBaEIsaUNBQTRCLEtBQTVCO0VBRUEsSUFBSUMsTUFBTSxHQUFHLENBQWI7O0VBRUEsSUFBSUQsU0FBSixFQUFlO0lBQ2IsSUFBSVYsTUFBTSxJQUFJVSxTQUFkLEVBQXlCO01BQ3ZCQyxNQUFNLEdBQUdDLHdCQUF3QixDQUFDSCxLQUFELENBQWpDRTtJQURGLE9BRU87TUFDTEEsTUFBTSxHQUFHRSxxQkFBcUIsQ0FBQ0osS0FBRCxDQUE5QkU7SUFDRDtFQUNGOztFQUVELE9BQU9SLElBQUksQ0FBQ1csR0FBTFgsQ0FBUyxDQUFUQSxFQUFZUSxNQUFaUixDQUFQO0FBYks7Ozs7QUFnQlAsSUFBTVMsd0JBQXdCLEdBQUlILFNBQTVCRyx3QkFBNEJILE1BQUQsRUFBeUI7RUFDeEQsSUFBUU0sS0FBUixHQUFrQk4sS0FBbEIsQ0FBUU0sS0FBUjtFQUVBLE9BQU9BLEtBQUssR0FBRyxFQUFILEdBQVEsRUFBcEI7QUFIRjs7QUFNQSxJQUFNRixxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXdCLE9BUUY7RUFBQSxJQVAxQkcsV0FPMEIsUUFQMUJBLFdBTzBCO0VBQUEsSUFOMUJDLFFBTTBCLFFBTjFCQSxRQU0wQjtFQUFBLElBTDFCUCxTQUswQixRQUwxQkEsU0FLMEI7RUFBQSxJQUoxQlEsS0FJMEIsUUFKMUJBLEtBSTBCO0VBQUEsSUFIMUJILEtBRzBCLFFBSDFCQSxLQUcwQjtFQUFBLElBRjFCSSxNQUUwQixRQUYxQkEsTUFFMEI7RUFBQSxJQUQxQkMsU0FDMEIsUUFEMUJBLFNBQzBCO0VBQzFCLElBQU1DLFdBQVcsR0FBR0gsS0FBSyxHQUFHRCxRQUE1QjtFQUNBLElBQUlOLE1BQU0sR0FBR1IsSUFBSSxDQUFDQyxLQUFMRCxDQUFXYSxXQUFXLEdBQUcsQ0FBekJiLENBQWI7RUFFQVEsTUFBTSxHQUNKQSxNQUFNLEdBQ05SLElBQUksQ0FBQ0MsS0FBTEQsQ0FBVyxDQUFDa0IsV0FBVyxHQUFHSixRQUFmLElBQTJCLENBQXRDZCxDQURBUSxJQUVDTyxLQUFLLEdBQUcsQ0FBUkEsR0FBWUMsTUFBTSxHQUFHLENBQXJCRCxHQUF5QixDQUYxQlAsQ0FERkE7RUFLQSxJQUFJRCxTQUFTLElBQUlVLFNBQWpCLEVBQ0VULE1BQU0sR0FBR1IsSUFBSSxDQUFDbUIsR0FBTG5CLENBQVNZLEtBQUssR0FBR0ksTUFBTSxHQUFHLENBQVosR0FBZ0JBLE1BQTlCaEIsRUFBc0NRLE1BQXRDUixDQUFUUTtFQUVGLE9BQU9BLE1BQVA7QUFwQkY7O0FBdUJPLElBQU1ZLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsUUFXUDtFQUFBLElBVnZCQyxHQVV1QixTQVZ2QkEsR0FVdUI7RUFBQSxJQVR2QmQsU0FTdUIsU0FUdkJBLFNBU3VCO0VBQUEsSUFSdkJlLEtBUXVCLFNBUnZCQSxLQVF1QjtFQUFBLElBUHZCUCxLQU91QixTQVB2QkEsS0FPdUI7RUFBQSxJQU52QmxCLE1BTXVCLFNBTnZCQSxNQU11QjtFQUFBLElBTHZCaUIsUUFLdUIsU0FMdkJBLFFBS3VCO0VBQUEsSUFKdkJTLFVBSXVCLFNBSnZCQSxVQUl1QjtFQUFBLElBSHZCWCxLQUd1QixTQUh2QkEsS0FHdUI7RUFBQSxJQUZ2QkksTUFFdUIsU0FGdkJBLE1BRXVCO0VBQUEsSUFEdkJDLFNBQ3VCLFNBRHZCQSxTQUN1QjtFQUN2QixJQUFNTyxVQUFVLEdBQUdELFVBQUgsU0FBR0EsY0FBSCxXQUFHQSxnQkFBY1QsUUFBakM7RUFDQSxJQUFNVyxhQUFhLEdBQUdWLEtBQUssR0FBR0QsUUFBOUI7RUFDQSxJQUFJTixNQUFNLEdBQUdhLEdBQWI7O0VBRUEsSUFBSXhCLE1BQU0sSUFBSSxDQUFDVSxTQUFmLEVBQTBCO0lBQ3hCLE9BQU87TUFDTG1CLFVBQVUsRUFBRTFCLElBQUksQ0FBQ1csR0FBTFgsQ0FBUyxDQUFUQSxFQUFZLENBQUNILE1BQU0sR0FBRzJCLFVBQVYsSUFBd0IsQ0FBcEN4QixDQURQO01BRUwyQixhQUFhLEVBQUUzQixJQUFJLENBQUNXLEdBQUxYLENBQVMsQ0FBVEEsRUFBWSxDQUFDSCxNQUFNLEdBQUcyQixVQUFWLElBQXdCLENBQXBDeEI7SUFGVixDQUFQO0VBSUQ7O0VBQ0QsSUFBSSxDQUFDaUIsU0FBRCxJQUFjVixTQUFsQixFQUE2QjtJQUMzQixJQUFJSyxLQUFKLEVBQVc7TUFDVCxJQUFJVSxLQUFKLEVBQVc7UUFDVGQsTUFBTSxJQUFJTyxLQUFLLEdBQUcsQ0FBUkEsR0FBWWYsSUFBSSxDQUFDbUIsR0FBTG5CLENBQVNnQixNQUFUaEIsRUFBa0J5QixhQUFhLEdBQUcsQ0FBaEJBLEdBQXFCVixLQUF2Q2YsQ0FBWmUsR0FBNEQsQ0FBdEVQO01BREYsT0FFTztRQUNMQSxNQUFNLElBQUksQ0FBVkE7TUFDRDtJQUNGOztJQUNELElBQUksQ0FBQ0ksS0FBTCxFQUFZO01BQ1YsSUFBSVUsS0FBSixFQUFXO1FBQ1RkLE1BQU0sSUFDSk8sS0FBSyxHQUFHLENBQVJBLEdBQ0lmLElBQUksQ0FBQ21CLEdBQUxuQixDQUFTZ0IsTUFBVGhCLEVBQWlCeUIsYUFBYSxHQUFHVixLQUFqQ2YsQ0FESmUsR0FFSWYsSUFBSSxDQUFDbUIsR0FBTG5CLENBQVNnQixNQUFNLEdBQUcsQ0FBbEJoQixFQUFxQnlCLGFBQWEsR0FBR1YsS0FBckNmLENBSE5RO01BREYsT0FLTztRQUNMQSxNQUFNLElBQUlPLEtBQUssR0FBRyxDQUFSQSxHQUFZZixJQUFJLENBQUNtQixHQUFMbkIsQ0FBU2dCLE1BQU0sR0FBRyxDQUFsQmhCLEVBQXFCeUIsYUFBYSxHQUFHVixLQUFyQ2YsQ0FBWmUsR0FBMEQsQ0FBcEVQO01BQ0Q7SUFDRjs7SUFDREEsTUFBTSxHQUFHUixJQUFJLENBQUNDLEtBQUxELENBQVdRLE1BQVhSLENBQVRRO0VBQ0Q7O0VBQ0QsT0FBTztJQUFFa0IsVUFBVSxFQUFFbEIsTUFBZDtJQUFzQm1CLGFBQWEsRUFBRW5CO0VBQXJDLENBQVA7QUExQ0s7Ozs7QUE2Q0EsSUFBTW9CLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsUUFXUjtFQUFBLElBVnZCUCxHQVV1QixTQVZ2QkEsR0FVdUI7RUFBQSxJQVR2Qk4sS0FTdUIsU0FUdkJBLEtBU3VCO0VBQUEsSUFSdkJSLFNBUXVCLFNBUnZCQSxTQVF1QjtFQUFBLElBUHZCZSxLQU91QixTQVB2QkEsS0FPdUI7RUFBQSxJQU52QnpCLE1BTXVCLFNBTnZCQSxNQU11QjtFQUFBLElBTHZCbUIsTUFLdUIsU0FMdkJBLE1BS3VCO0VBQUEsSUFKdkJKLEtBSXVCLFNBSnZCQSxLQUl1QjtFQUFBLElBSHZCRSxRQUd1QixTQUh2QkEsUUFHdUI7RUFBQSxJQUZ2QkcsU0FFdUIsU0FGdkJBLFNBRXVCO0VBQUEsSUFEdkJZLE1BQ3VCLFNBRHZCQSxNQUN1QjtFQUN2QixJQUFJckIsTUFBTSxHQUFHYSxHQUFiO0VBQ0EsSUFBSVMsU0FBUyxHQUFHdEIsTUFBaEI7RUFDQSxJQUFJdUIsWUFBWSxHQUFHdkIsTUFBbkI7RUFDQSxJQUFRa0IsVUFBUixHQUFzQ0csTUFBdEMsQ0FBUUgsVUFBUjtFQUFBLElBQW9CQyxhQUFwQixHQUFzQ0UsTUFBdEMsQ0FBb0JGLGFBQXBCO0VBQ0EsSUFBTVQsV0FBVyxHQUFHSCxLQUFLLEdBQUdELFFBQTVCOztFQUVBLElBQUksQ0FBQ1AsU0FBTCxFQUFnQjtJQUVkLElBQUllLEtBQUosRUFBVztNQUVULE9BQU87UUFBRUksVUFBRixFQUFFQSxVQUFGO1FBQWNDO01BQWQsQ0FBUDtJQUpZOztJQU9kLE9BQU87TUFBRUQsVUFBVSxFQUFFbEIsTUFBZDtNQUFzQm1CLGFBQWEsRUFBRW5CO0lBQXJDLENBQVA7RUFDRDs7RUFFRCxJQUFJYyxLQUFKLEVBQVc7SUFFVFEsU0FBUyxHQUFHSixVQUFaSTtJQUNBQyxZQUFZLEdBQUdKLGFBQWZJOztJQUdBLElBQUksQ0FBQ2QsU0FBTCxFQUFnQjtNQUNkLElBQUlMLEtBQUosRUFBVztRQUNUa0IsU0FBUyxJQUNQZixLQUFLLEdBQUcsQ0FBUkEsR0FDSWYsSUFBSSxDQUFDbUIsR0FBTG5CLENBQVNRLE1BQVRSLEVBQWlCa0IsV0FBVyxHQUFHSCxLQUEvQmYsSUFBd0NRLE1BQU0sR0FBRyxDQURyRE8sR0FFSWYsSUFBSSxDQUFDbUIsR0FBTG5CLENBQVNRLE1BQVRSLEVBQWlCa0IsV0FBVyxHQUFHSCxLQUEvQmYsSUFBd0NRLE1BQU0sR0FBRyxDQUh2RHNCO01BSUQ7O01BQ0QsSUFBSSxDQUFDbEIsS0FBTCxFQUFZO1FBQ1ZrQixTQUFTLElBQ1BmLEtBQUssR0FBRyxDQUFSQSxHQUNJZixJQUFJLENBQUNtQixHQUFMbkIsQ0FBU2dCLE1BQU0sR0FBRyxDQUFsQmhCLEVBQXFCa0IsV0FBVyxHQUFHSCxLQUFuQ2YsQ0FESmUsR0FFSWYsSUFBSSxDQUFDbUIsR0FBTG5CLENBQVNRLE1BQVRSLEVBQWlCa0IsV0FBVyxHQUFHSCxLQUEvQmYsSUFBd0NnQixNQUFNLEdBQUcsQ0FIdkRjO01BSUQ7SUFDRjs7SUFDREEsU0FBUyxHQUFHOUIsSUFBSSxDQUFDQyxLQUFMRCxDQUFXOEIsU0FBWDlCLENBQVo4QjtFQXBCRixPQXFCTztJQUNMLElBQUlqQyxNQUFKLEVBQVk7TUFFVixPQUFPO1FBQ0w2QixVQUFVLEVBQUUxQixJQUFJLENBQUNXLEdBQUxYLENBQVMsQ0FBVEEsRUFBWSxDQUFDSCxNQUFNLEdBQUdpQixRQUFWLElBQXNCLENBQWxDZCxDQURQO1FBRUwyQixhQUFhLEVBQUUzQixJQUFJLENBQUNXLEdBQUxYLENBQVMsQ0FBVEEsRUFBWSxDQUFDSCxNQUFNLEdBQUdpQixRQUFWLElBQXNCLENBQWxDZDtNQUZWLENBQVA7SUFIRzs7SUFTTCxJQUFJLENBQUNpQixTQUFMLEVBQWdCO01BQ2QsSUFBSUwsS0FBSixFQUFXO1FBQ1RKLE1BQU0sSUFDSk8sS0FBSyxHQUFHLENBQVJBLEdBQ0lmLElBQUksQ0FBQ21CLEdBQUxuQixDQUFTZ0IsTUFBTSxHQUFHLENBQWxCaEIsRUFBc0JjLFFBQVEsR0FBRyxDQUFYQSxHQUFnQkMsS0FBdENmLENBREplLEdBRUlmLElBQUksQ0FBQ21CLEdBQUxuQixDQUFTZ0IsTUFBTSxHQUFHLENBQWxCaEIsRUFBcUJlLEtBQXJCZixDQUhOUTtNQUlEOztNQUNELElBQUksQ0FBQ0ksS0FBTCxFQUFZO1FBQ1ZKLE1BQU0sSUFDSk8sS0FBSyxHQUFHLENBQVJBLEdBQ0lmLElBQUksQ0FBQ21CLEdBQUxuQixDQUFTZ0IsTUFBVGhCLEVBQWlCYyxRQUFRLEdBQUdDLEtBQTVCZixDQURKZSxHQUVJZixJQUFJLENBQUNtQixHQUFMbkIsQ0FBU2MsUUFBVGQsRUFBb0JnQixNQUFNLEdBQUcsQ0FBVEEsR0FBY0QsS0FBbENmLENBSE5RO01BSUQ7O01BRURBLE1BQU0sR0FBR1IsSUFBSSxDQUFDQyxLQUFMRCxDQUFXUSxNQUFYUixDQUFUUTtNQUNBc0IsU0FBUyxHQUFHdEIsTUFBWnNCO01BQ0FDLFlBQVksR0FBR3ZCLE1BQWZ1QjtJQUNEO0VBQ0Y7O0VBRUQsT0FBTztJQUNMTCxVQUFVLEVBQUUxQixJQUFJLENBQUNXLEdBQUxYLENBQVMsQ0FBVEEsRUFBWThCLFNBQVo5QixDQURQO0lBRUwyQixhQUFhLEVBQUUzQixJQUFJLENBQUNXLEdBQUxYLENBQVMsQ0FBVEEsRUFBWStCLFlBQVovQjtFQUZWLENBQVA7QUE5RUs7Ozs7QUFvRkEsSUFBTWdDLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBeUIsQ0FDcENDLE9BRG9DLEVBRXBDQyxnQkFGb0M7RUFBQSxPQUlwQ0QsT0FBTyxDQUFDRSxXQUFSRixDQUFvQjtJQUNsQkcsVUFBVSxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FETTtJQUVsQkMsV0FBVyxFQUFFLENBQUNILGdCQUFnQixHQUFHLENBQUgsR0FBTyxDQUF4QixFQUEyQixDQUEzQjtFQUZLLENBQXBCRCxDQUpvQztBQUFBLENBQS9COzs7O0FBU0EsU0FBU0ssNkJBQVQsUUFVSTtFQUFBLElBVFR6QyxNQVNTLFNBVFRBLE1BU1M7RUFBQSxJQVJUNkIsVUFRUyxTQVJUQSxVQVFTO0VBQUEsSUFQVEMsYUFPUyxTQVBUQSxhQU9TO0VBQUEsSUFOVFksV0FNUyxTQU5UQSxXQU1TO0VBQ1QsSUFBTUMseUJBQXlCLEdBQUczQyxNQUFNLEdBQUc2QixVQUFUN0IsR0FBc0I4QixhQUF4RDtFQUVBLElBQU1jLDBDQUEwQyxHQUM5QyxDQUFDRCx5QkFBeUIsR0FBR0QsV0FBN0IsSUFBNEMsQ0FEOUM7RUFHQSxPQUFPYixVQUFVLEdBQUdlLDBDQUFwQjtBQUNEOztBQUVNLFNBQVNDLHdDQUFULFFBUUk7RUFBQSxJQVBUN0MsTUFPUyxTQVBUQSxNQU9TO0VBQUEsSUFOVDBDLFdBTVMsU0FOVEEsV0FNUztFQUFBLElBTFRJLFlBS1MsU0FMVEEsWUFLUztFQUNULE9BQU8sQ0FBQzlDLE1BQU0sR0FBRzBDLFdBQVQxQyxHQUF1QjhDLFlBQXhCLElBQXdDLENBQS9DO0FBQ0Q7O0FBRU0sSUFBTUMsbUNBQW1DLEdBQUcsU0FBdENBLG1DQUFzQyxRQUk3QztFQUFBLElBSEpDLGVBR0ksU0FISkEsZUFHSTtFQUNKLElBQUlDLFdBQVcsR0FBR0MsbUNBQWxCO0VBQ0EsSUFBSUMsWUFBWSxHQUFHRCxtQ0FBbkI7RUFFQUYsZUFBZSxDQUFDSSxPQUFoQkosQ0FBd0IsaUJBQW9CO0lBQUEsSUFBakJLLElBQWlCLFNBQWpCQSxJQUFpQjtJQUFBLElBQVhDLElBQVcsU0FBWEEsSUFBVzs7SUFDMUMsSUFBSUQsSUFBSSxLQUFLRSxxQkFBY0MsSUFBdkJILElBQStCQyxJQUFJLEtBQUtHLHFCQUFjQyxJQUExRCxFQUFnRTtNQUM5RFQsV0FBVyxHQUFHVSw0QkFBaUJDLDJCQUFqQkQsR0FBb0NFLDRCQUFsRFo7SUFERixPQUVPLElBQUlLLElBQUksS0FBS0cscUJBQWNLLEtBQTNCLEVBQWtDO01BQ3ZDLElBQUlULElBQUksS0FBS0UscUJBQWNRLEtBQTNCLEVBQWtDO1FBQ2hDWixZQUFZLEdBQUdRLDRCQUFpQkMsMkJBQWpCRCxHQUFvQ0UsNEJBQW5EVjtNQURGLE9BRU8sSUFBSUUsSUFBSSxLQUFLRSxxQkFBY0MsSUFBM0IsRUFBaUM7UUFDdENMLFlBQVksR0FBR1EsNEJBQWlCQywyQkFBakJELEdBQW9DRSw0QkFBbkRWO01BQ0Q7SUFDRjtFQVRIO0VBWUEsT0FBTztJQUFFRixXQUFGLEVBQUVBLFdBQUY7SUFBZUU7RUFBZixDQUFQO0FBcEJLIiwibmFtZXMiOlsiY2FsY3VsYXRlTGFiZWxUb3BQb3NpdGlvbiIsImxhYmVsSGVpZ2h0IiwiaGVpZ2h0Iiwib3B0aW9uYWxQYWRkaW5nIiwiY3VzdG9tSGVpZ2h0IiwiTWF0aCIsImZsb29yIiwiY2FsY3VsYXRlSW5wdXRIZWlnaHQiLCJtaW5IZWlnaHQiLCJmaW5hbEhlaWdodCIsImNhbGN1bGF0ZVBhZGRpbmciLCJwcm9wcyIsIm11bHRpbGluZSIsInJlc3VsdCIsImNhbGN1bGF0ZVRleHRBcmVhUGFkZGluZyIsImNhbGN1bGF0ZUlucHV0UGFkZGluZyIsIm1heCIsImRlbnNlIiwidG9wUG9zaXRpb24iLCJmb250U2l6ZSIsInNjYWxlIiwib2Zmc2V0IiwiaXNBbmRyb2lkIiwicmVmRm9udFNpemUiLCJtaW4iLCJhZGp1c3RQYWRkaW5nT3V0IiwicGFkIiwibGFiZWwiLCJsaW5lSGVpZ2h0IiwiZm9udEhlaWdodCIsInJlZkZvbnRIZWlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImFkanVzdFBhZGRpbmdGbGF0Iiwic3R5bGVzIiwidG9wUmVzdWx0IiwiYm90dG9tUmVzdWx0IiwiaW50ZXJwb2xhdGVQbGFjZWhvbGRlciIsImxhYmVsZWQiLCJoYXNBY3RpdmVPdXRsaW5lIiwiaW50ZXJwb2xhdGUiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJjYWxjdWxhdGVGbGF0QWZmaXhUb3BQb3NpdGlvbiIsImFmZml4SGVpZ2h0IiwiaW5wdXRIZWlnaHRXaXRob3V0UGFkZGluZyIsImhhbGZPZlRoZUlucHV0SGVpZ2h0RGVjcmVhc2VkQnlBZmZpeEhlaWdodCIsImNhbGN1bGF0ZU91dGxpbmVkSWNvbkFuZEFmZml4VG9wUG9zaXRpb24iLCJsYWJlbFlPZmZzZXQiLCJjYWxjdWxhdGVGbGF0SW5wdXRIb3Jpem9udGFsUGFkZGluZyIsImFkb3JubWVudENvbmZpZyIsInBhZGRpbmdMZWZ0IiwiTEFCRUxfUEFERElOR19IT1JJWk9OVEFMIiwicGFkZGluZ1JpZ2h0IiwiZm9yRWFjaCIsInR5cGUiLCJzaWRlIiwiQWRvcm5tZW50VHlwZSIsIkljb24iLCJBZG9ybm1lbnRTaWRlIiwiTGVmdCIsIkFET1JOTUVOVF9TSVpFIiwiQURPUk5NRU5UX09GRlNFVCIsIkZMQVRfSU5QVVRfT0ZGU0VUIiwiUmlnaHQiLCJBZmZpeCJdLCJzb3VyY2VzIjpbImhlbHBlcnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQW5pbWF0ZWQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHR5cGUgeyBBZG9ybm1lbnRDb25maWcgfSBmcm9tICcuL0Fkb3JubWVudC90eXBlcyc7XG5pbXBvcnQge1xuICBMQUJFTF9QQURESU5HX0hPUklaT05UQUwsXG4gIEFET1JOTUVOVF9PRkZTRVQsXG4gIEFET1JOTUVOVF9TSVpFLFxuICBGTEFUX0lOUFVUX09GRlNFVCxcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQWRvcm5tZW50VHlwZSwgQWRvcm5tZW50U2lkZSB9IGZyb20gJy4vQWRvcm5tZW50L2VudW1zJztcbmltcG9ydCB0eXBlIHsgVGV4dElucHV0TGFiZWxQcm9wIH0gZnJvbSAnLi90eXBlcyc7XG5cbnR5cGUgUGFkZGluZ1Byb3BzID0ge1xuICBoZWlnaHQ6IG51bWJlciB8IG51bGw7XG4gIGxhYmVsSGFsZkhlaWdodDogbnVtYmVyO1xuICBtdWx0aWxpbmU6IGJvb2xlYW4gfCBudWxsO1xuICBkZW5zZTogYm9vbGVhbiB8IG51bGw7XG4gIHRvcFBvc2l0aW9uOiBudW1iZXI7XG4gIGZvbnRTaXplOiBudW1iZXI7XG4gIGxpbmVIZWlnaHQ/OiBudW1iZXI7XG4gIGxhYmVsPzogVGV4dElucHV0TGFiZWxQcm9wIHwgbnVsbDtcbiAgc2NhbGU6IG51bWJlcjtcbiAgb2Zmc2V0OiBudW1iZXI7XG4gIGlzQW5kcm9pZDogYm9vbGVhbjtcbiAgc3R5bGVzOiB7IHBhZGRpbmdUb3A6IG51bWJlcjsgcGFkZGluZ0JvdHRvbTogbnVtYmVyIH07XG59O1xuXG50eXBlIEFkalByb3BzID0gUGFkZGluZ1Byb3BzICYge1xuICBwYWQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIFBhZGRpbmcgPSB7IHBhZGRpbmdUb3A6IG51bWJlcjsgcGFkZGluZ0JvdHRvbTogbnVtYmVyIH07XG5cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVMYWJlbFRvcFBvc2l0aW9uID0gKFxuICBsYWJlbEhlaWdodDogbnVtYmVyLFxuICBoZWlnaHQ6IG51bWJlciA9IDAsXG4gIG9wdGlvbmFsUGFkZGluZzogbnVtYmVyID0gMFxuKTogbnVtYmVyID0+IHtcbiAgY29uc3QgY3VzdG9tSGVpZ2h0ID0gaGVpZ2h0ID4gMCA/IGhlaWdodCA6IDA7XG5cbiAgcmV0dXJuIE1hdGguZmxvb3IoKGN1c3RvbUhlaWdodCAtIGxhYmVsSGVpZ2h0KSAvIDIgKyBvcHRpb25hbFBhZGRpbmcpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUlucHV0SGVpZ2h0ID0gKFxuICBsYWJlbEhlaWdodDogbnVtYmVyLFxuICBoZWlnaHQ6IGFueSA9IDAsXG4gIG1pbkhlaWdodDogbnVtYmVyXG4pOiBudW1iZXIgPT4ge1xuICBjb25zdCBmaW5hbEhlaWdodCA9IGhlaWdodCA+IDAgPyBoZWlnaHQgOiBsYWJlbEhlaWdodDtcblxuICBpZiAoaGVpZ2h0ID4gMCkgcmV0dXJuIGhlaWdodDtcbiAgcmV0dXJuIGZpbmFsSGVpZ2h0IDwgbWluSGVpZ2h0ID8gbWluSGVpZ2h0IDogZmluYWxIZWlnaHQ7XG59O1xuXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlUGFkZGluZyA9IChwcm9wczogUGFkZGluZ1Byb3BzKTogbnVtYmVyID0+IHtcbiAgY29uc3QgeyBoZWlnaHQsIG11bHRpbGluZSA9IGZhbHNlIH0gPSBwcm9wcztcblxuICBsZXQgcmVzdWx0ID0gMDtcblxuICBpZiAobXVsdGlsaW5lKSB7XG4gICAgaWYgKGhlaWdodCAmJiBtdWx0aWxpbmUpIHtcbiAgICAgIHJlc3VsdCA9IGNhbGN1bGF0ZVRleHRBcmVhUGFkZGluZyhwcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGNhbGN1bGF0ZUlucHV0UGFkZGluZyhwcm9wcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4KDAsIHJlc3VsdCk7XG59O1xuXG5jb25zdCBjYWxjdWxhdGVUZXh0QXJlYVBhZGRpbmcgPSAocHJvcHM6IFBhZGRpbmdQcm9wcykgPT4ge1xuICBjb25zdCB7IGRlbnNlIH0gPSBwcm9wcztcblxuICByZXR1cm4gZGVuc2UgPyAxMCA6IDIwO1xufTtcblxuY29uc3QgY2FsY3VsYXRlSW5wdXRQYWRkaW5nID0gKHtcbiAgdG9wUG9zaXRpb24sXG4gIGZvbnRTaXplLFxuICBtdWx0aWxpbmUsXG4gIHNjYWxlLFxuICBkZW5zZSxcbiAgb2Zmc2V0LFxuICBpc0FuZHJvaWQsXG59OiBQYWRkaW5nUHJvcHMpOiBudW1iZXIgPT4ge1xuICBjb25zdCByZWZGb250U2l6ZSA9IHNjYWxlICogZm9udFNpemU7XG4gIGxldCByZXN1bHQgPSBNYXRoLmZsb29yKHRvcFBvc2l0aW9uIC8gMik7XG5cbiAgcmVzdWx0ID1cbiAgICByZXN1bHQgK1xuICAgIE1hdGguZmxvb3IoKHJlZkZvbnRTaXplIC0gZm9udFNpemUpIC8gMikgLVxuICAgIChzY2FsZSA8IDEgPyBvZmZzZXQgLyAyIDogMCk7XG5cbiAgaWYgKG11bHRpbGluZSAmJiBpc0FuZHJvaWQpXG4gICAgcmVzdWx0ID0gTWF0aC5taW4oZGVuc2UgPyBvZmZzZXQgLyAyIDogb2Zmc2V0LCByZXN1bHQpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgY29uc3QgYWRqdXN0UGFkZGluZ091dCA9ICh7XG4gIHBhZCxcbiAgbXVsdGlsaW5lLFxuICBsYWJlbCxcbiAgc2NhbGUsXG4gIGhlaWdodCxcbiAgZm9udFNpemUsXG4gIGxpbmVIZWlnaHQsXG4gIGRlbnNlLFxuICBvZmZzZXQsXG4gIGlzQW5kcm9pZCxcbn06IEFkalByb3BzKTogUGFkZGluZyA9PiB7XG4gIGNvbnN0IGZvbnRIZWlnaHQgPSBsaW5lSGVpZ2h0ID8/IGZvbnRTaXplO1xuICBjb25zdCByZWZGb250SGVpZ2h0ID0gc2NhbGUgKiBmb250U2l6ZTtcbiAgbGV0IHJlc3VsdCA9IHBhZDtcblxuICBpZiAoaGVpZ2h0ICYmICFtdWx0aWxpbmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFkZGluZ1RvcDogTWF0aC5tYXgoMCwgKGhlaWdodCAtIGZvbnRIZWlnaHQpIC8gMiksXG4gICAgICBwYWRkaW5nQm90dG9tOiBNYXRoLm1heCgwLCAoaGVpZ2h0IC0gZm9udEhlaWdodCkgLyAyKSxcbiAgICB9O1xuICB9XG4gIGlmICghaXNBbmRyb2lkICYmIG11bHRpbGluZSkge1xuICAgIGlmIChkZW5zZSkge1xuICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgIHJlc3VsdCArPSBzY2FsZSA8IDEgPyBNYXRoLm1pbihvZmZzZXQsIChyZWZGb250SGVpZ2h0IC8gMikgKiBzY2FsZSkgOiAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ICs9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZGVuc2UpIHtcbiAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICByZXN1bHQgKz1cbiAgICAgICAgICBzY2FsZSA8IDFcbiAgICAgICAgICAgID8gTWF0aC5taW4ob2Zmc2V0LCByZWZGb250SGVpZ2h0ICogc2NhbGUpXG4gICAgICAgICAgICA6IE1hdGgubWluKG9mZnNldCAvIDIsIHJlZkZvbnRIZWlnaHQgKiBzY2FsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgKz0gc2NhbGUgPCAxID8gTWF0aC5taW4ob2Zmc2V0IC8gMiwgcmVmRm9udEhlaWdodCAqIHNjYWxlKSA6IDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IE1hdGguZmxvb3IocmVzdWx0KTtcbiAgfVxuICByZXR1cm4geyBwYWRkaW5nVG9wOiByZXN1bHQsIHBhZGRpbmdCb3R0b206IHJlc3VsdCB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGFkanVzdFBhZGRpbmdGbGF0ID0gKHtcbiAgcGFkLFxuICBzY2FsZSxcbiAgbXVsdGlsaW5lLFxuICBsYWJlbCxcbiAgaGVpZ2h0LFxuICBvZmZzZXQsXG4gIGRlbnNlLFxuICBmb250U2l6ZSxcbiAgaXNBbmRyb2lkLFxuICBzdHlsZXMsXG59OiBBZGpQcm9wcyk6IFBhZGRpbmcgPT4ge1xuICBsZXQgcmVzdWx0ID0gcGFkO1xuICBsZXQgdG9wUmVzdWx0ID0gcmVzdWx0O1xuICBsZXQgYm90dG9tUmVzdWx0ID0gcmVzdWx0O1xuICBjb25zdCB7IHBhZGRpbmdUb3AsIHBhZGRpbmdCb3R0b20gfSA9IHN0eWxlcztcbiAgY29uc3QgcmVmRm9udFNpemUgPSBzY2FsZSAqIGZvbnRTaXplO1xuXG4gIGlmICghbXVsdGlsaW5lKSB7XG4gICAgLy8gZG8gbm90IG1vZGlmeSBwYWRkaW5nIGlmIGlucHV0IGlzIG5vdCBtdWx0aWxpbmVcbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIC8vIHJldHVybiBjb25zdCBzdHlsZSBmb3IgZmxhdCBpbnB1dCB3aXRoIGxhYmVsXG4gICAgICByZXR1cm4geyBwYWRkaW5nVG9wLCBwYWRkaW5nQm90dG9tIH07XG4gICAgfVxuICAgIC8vIHJldHVybiBwYWQgZm9yIGZsYXQgaW5wdXQgd2l0aG91dCBsYWJlbFxuICAgIHJldHVybiB7IHBhZGRpbmdUb3A6IHJlc3VsdCwgcGFkZGluZ0JvdHRvbTogcmVzdWx0IH07XG4gIH1cblxuICBpZiAobGFiZWwpIHtcbiAgICAvLyBhZGQgcGFkZGluZ3MgcGFzc2VkIGZyb20gc3R5bGVzXG4gICAgdG9wUmVzdWx0ID0gcGFkZGluZ1RvcDtcbiAgICBib3R0b21SZXN1bHQgPSBwYWRkaW5nQm90dG9tO1xuXG4gICAgLy8gYWRqdXN0IHRvcCBwYWRkaW5nIGZvciBpT1NcbiAgICBpZiAoIWlzQW5kcm9pZCkge1xuICAgICAgaWYgKGRlbnNlKSB7XG4gICAgICAgIHRvcFJlc3VsdCArPVxuICAgICAgICAgIHNjYWxlIDwgMVxuICAgICAgICAgICAgPyBNYXRoLm1pbihyZXN1bHQsIHJlZkZvbnRTaXplICogc2NhbGUpIC0gcmVzdWx0IC8gMlxuICAgICAgICAgICAgOiBNYXRoLm1pbihyZXN1bHQsIHJlZkZvbnRTaXplICogc2NhbGUpIC0gcmVzdWx0IC8gMjtcbiAgICAgIH1cbiAgICAgIGlmICghZGVuc2UpIHtcbiAgICAgICAgdG9wUmVzdWx0ICs9XG4gICAgICAgICAgc2NhbGUgPCAxXG4gICAgICAgICAgICA/IE1hdGgubWluKG9mZnNldCAvIDIsIHJlZkZvbnRTaXplICogc2NhbGUpXG4gICAgICAgICAgICA6IE1hdGgubWluKHJlc3VsdCwgcmVmRm9udFNpemUgKiBzY2FsZSkgLSBvZmZzZXQgLyAyO1xuICAgICAgfVxuICAgIH1cbiAgICB0b3BSZXN1bHQgPSBNYXRoLmZsb29yKHRvcFJlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGhlaWdodCkge1xuICAgICAgLy8gY2VudGVyIHRleHQgd2hlbiBoZWlnaHQgaXMgcGFzc2VkXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYWRkaW5nVG9wOiBNYXRoLm1heCgwLCAoaGVpZ2h0IC0gZm9udFNpemUpIC8gMiksXG4gICAgICAgIHBhZGRpbmdCb3R0b206IE1hdGgubWF4KDAsIChoZWlnaHQgLSBmb250U2l6ZSkgLyAyKSxcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIGFkanVzdCBwYWRkaW5ncyBmb3IgaU9TIGlmIG5vIGxhYmVsXG4gICAgaWYgKCFpc0FuZHJvaWQpIHtcbiAgICAgIGlmIChkZW5zZSkge1xuICAgICAgICByZXN1bHQgKz1cbiAgICAgICAgICBzY2FsZSA8IDFcbiAgICAgICAgICAgID8gTWF0aC5taW4ob2Zmc2V0IC8gMiwgKGZvbnRTaXplIC8gMikgKiBzY2FsZSlcbiAgICAgICAgICAgIDogTWF0aC5taW4ob2Zmc2V0IC8gMiwgc2NhbGUpO1xuICAgICAgfVxuICAgICAgaWYgKCFkZW5zZSkge1xuICAgICAgICByZXN1bHQgKz1cbiAgICAgICAgICBzY2FsZSA8IDFcbiAgICAgICAgICAgID8gTWF0aC5taW4ob2Zmc2V0LCBmb250U2l6ZSAqIHNjYWxlKVxuICAgICAgICAgICAgOiBNYXRoLm1pbihmb250U2l6ZSwgKG9mZnNldCAvIDIpICogc2NhbGUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSBNYXRoLmZsb29yKHJlc3VsdCk7XG4gICAgICB0b3BSZXN1bHQgPSByZXN1bHQ7XG4gICAgICBib3R0b21SZXN1bHQgPSByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYWRkaW5nVG9wOiBNYXRoLm1heCgwLCB0b3BSZXN1bHQpLFxuICAgIHBhZGRpbmdCb3R0b206IE1hdGgubWF4KDAsIGJvdHRvbVJlc3VsdCksXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgaW50ZXJwb2xhdGVQbGFjZWhvbGRlciA9IChcbiAgbGFiZWxlZDogQW5pbWF0ZWQuVmFsdWUsXG4gIGhhc0FjdGl2ZU91dGxpbmU6IGJvb2xlYW4gfCB1bmRlZmluZWRcbikgPT5cbiAgbGFiZWxlZC5pbnRlcnBvbGF0ZSh7XG4gICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgIG91dHB1dFJhbmdlOiBbaGFzQWN0aXZlT3V0bGluZSA/IDAgOiAxLCAxXSxcbiAgfSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVGbGF0QWZmaXhUb3BQb3NpdGlvbih7XG4gIGhlaWdodCxcbiAgcGFkZGluZ1RvcCxcbiAgcGFkZGluZ0JvdHRvbSxcbiAgYWZmaXhIZWlnaHQsXG59OiB7XG4gIGhlaWdodDogbnVtYmVyO1xuICBwYWRkaW5nVG9wOiBudW1iZXI7XG4gIHBhZGRpbmdCb3R0b206IG51bWJlcjtcbiAgYWZmaXhIZWlnaHQ6IG51bWJlcjtcbn0pOiBudW1iZXIge1xuICBjb25zdCBpbnB1dEhlaWdodFdpdGhvdXRQYWRkaW5nID0gaGVpZ2h0IC0gcGFkZGluZ1RvcCAtIHBhZGRpbmdCb3R0b207XG5cbiAgY29uc3QgaGFsZk9mVGhlSW5wdXRIZWlnaHREZWNyZWFzZWRCeUFmZml4SGVpZ2h0ID1cbiAgICAoaW5wdXRIZWlnaHRXaXRob3V0UGFkZGluZyAtIGFmZml4SGVpZ2h0KSAvIDI7XG5cbiAgcmV0dXJuIHBhZGRpbmdUb3AgKyBoYWxmT2ZUaGVJbnB1dEhlaWdodERlY3JlYXNlZEJ5QWZmaXhIZWlnaHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVPdXRsaW5lZEljb25BbmRBZmZpeFRvcFBvc2l0aW9uKHtcbiAgaGVpZ2h0LFxuICBhZmZpeEhlaWdodCxcbiAgbGFiZWxZT2Zmc2V0LFxufToge1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgYWZmaXhIZWlnaHQ6IG51bWJlcjtcbiAgbGFiZWxZT2Zmc2V0OiBudW1iZXI7XG59KTogbnVtYmVyIHtcbiAgcmV0dXJuIChoZWlnaHQgLSBhZmZpeEhlaWdodCArIGxhYmVsWU9mZnNldCkgLyAyO1xufVxuXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlRmxhdElucHV0SG9yaXpvbnRhbFBhZGRpbmcgPSAoe1xuICBhZG9ybm1lbnRDb25maWcsXG59OiB7XG4gIGFkb3JubWVudENvbmZpZzogQWRvcm5tZW50Q29uZmlnW107XG59KSA9PiB7XG4gIGxldCBwYWRkaW5nTGVmdCA9IExBQkVMX1BBRERJTkdfSE9SSVpPTlRBTDtcbiAgbGV0IHBhZGRpbmdSaWdodCA9IExBQkVMX1BBRERJTkdfSE9SSVpPTlRBTDtcblxuICBhZG9ybm1lbnRDb25maWcuZm9yRWFjaCgoeyB0eXBlLCBzaWRlIH0pID0+IHtcbiAgICBpZiAodHlwZSA9PT0gQWRvcm5tZW50VHlwZS5JY29uICYmIHNpZGUgPT09IEFkb3JubWVudFNpZGUuTGVmdCkge1xuICAgICAgcGFkZGluZ0xlZnQgPSBBRE9STk1FTlRfU0laRSArIEFET1JOTUVOVF9PRkZTRVQgKyBGTEFUX0lOUFVUX09GRlNFVDtcbiAgICB9IGVsc2UgaWYgKHNpZGUgPT09IEFkb3JubWVudFNpZGUuUmlnaHQpIHtcbiAgICAgIGlmICh0eXBlID09PSBBZG9ybm1lbnRUeXBlLkFmZml4KSB7XG4gICAgICAgIHBhZGRpbmdSaWdodCA9IEFET1JOTUVOVF9TSVpFICsgQURPUk5NRU5UX09GRlNFVCArIEZMQVRfSU5QVVRfT0ZGU0VUO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBBZG9ybm1lbnRUeXBlLkljb24pIHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0ID0gQURPUk5NRU5UX1NJWkUgKyBBRE9STk1FTlRfT0ZGU0VUICsgRkxBVF9JTlBVVF9PRkZTRVQ7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4geyBwYWRkaW5nTGVmdCwgcGFkZGluZ1JpZ2h0IH07XG59O1xuIl19