6c98b84469f54d813b0d9cf08c83c4d6
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TextInputAffix = exports.AffixAdornment = void 0;

var _react = _interopRequireDefault(require("react"));

var _color = _interopRequireDefault(require("color"));

var _reactNative = require("react-native");

var _theming = require("../../../core/theming");

var _enums = require("./enums");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var AFFIX_OFFSET = 12;

var AffixContext = _react.default.createContext({
  textStyle: {
    fontFamily: '',
    color: ''
  },
  topPosition: null,
  side: _enums.AdornmentSide.Left
});

var AffixAdornment = function AffixAdornment(_ref) {
  var affix = _ref.affix,
      side = _ref.side,
      textStyle = _ref.textStyle,
      topPosition = _ref.topPosition,
      onLayout = _ref.onLayout,
      visible = _ref.visible,
      paddingHorizontal = _ref.paddingHorizontal,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;
  return _react.default.createElement(AffixContext.Provider, {
    value: {
      side: side,
      textStyle: textStyle,
      topPosition: topPosition,
      onLayout: onLayout,
      visible: visible,
      paddingHorizontal: paddingHorizontal,
      maxFontSizeMultiplier: maxFontSizeMultiplier
    }
  }, affix);
};

exports.AffixAdornment = AffixAdornment;

var TextInputAffix = function TextInputAffix(_ref2) {
  var text = _ref2.text,
      labelStyle = _ref2.textStyle,
      theme = _ref2.theme;

  var _react$default$useCon = _react.default.useContext(AffixContext),
      textStyle = _react$default$useCon.textStyle,
      onLayout = _react$default$useCon.onLayout,
      topPosition = _react$default$useCon.topPosition,
      side = _react$default$useCon.side,
      visible = _react$default$useCon.visible,
      paddingHorizontal = _react$default$useCon.paddingHorizontal,
      maxFontSizeMultiplier = _react$default$useCon.maxFontSizeMultiplier;

  var textColor = (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;
  var style = (0, _defineProperty2.default)({
    top: topPosition
  }, side, offset);
  return _react.default.createElement(_reactNative.Animated.View, {
    style: [styles.container, style, {
      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({
        inputRange: [0, 1],
        outputRange: [1, 0]
      })) || 1
    }],
    onLayout: onLayout
  }, _react.default.createElement(_reactNative.Text, {
    maxFontSizeMultiplier: maxFontSizeMultiplier,
    style: [{
      color: textColor
    }, textStyle, labelStyle]
  }, text));
};

exports.TextInputAffix = TextInputAffix;
TextInputAffix.displayName = 'TextInput.Affix';

var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    justifyContent: 'center',
    alignItems: 'center'
  }
});

var _default = (0, _theming.withTheme)(TextInputAffix);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,