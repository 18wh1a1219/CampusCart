{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AASO,IAAMA,mBAAmB,GAAG;EACjCC,MADiC,kBAC1BC,UAD0B,EACmB;IAClD;;IACA,OAAO;MACLC,KAAK,EAAE,iBAAM;QACX;;QACA,IAAIC,6BAAJ,EAAgB;UACdA,8BAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMC,KAA7CH;QADF,OAEO;UACLI,OAAO,CAACC,IAARD,CACE,kFADFA;QAGD;MATE;MAYLE,QAAQ,EAAE,oBAAM;QACd;;QACA,IAAIN,6BAAJ,EAAgB;UACdA,8BAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMK,MAA7CP;QADF,OAEO;UACLI,OAAO,CAACC,IAARD,CACE,kFADFA;QAGD;MApBE;MAuBLI,IAAI,EAAE,gBAAM;QACV;;QACA,IAAIR,6BAAJ,EAAgB;UACdA,8BAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMO,MAA7CT;QADF,OAEO;UACLI,OAAO,CAACC,IAARD,CACE,kFADFA;QAGD;MA/BE;MAkCLM,GAAG,EAAE,eAAM;QACT;;QACA,IAAIV,6BAAJ,EAAgB;UACdA,8BAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMS,GAA7CX;QADF,OAEO;UACLI,OAAO,CAACC,IAARD,CACE,kFADFA;QAGD;MACF;IA3CI,CAAP;EA6CD;AAhDgC,CAA5B","names":["GestureStateManager","create","handlerTag","begin","Reanimated","setGestureState","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n    };\n  },\n};\n"]}