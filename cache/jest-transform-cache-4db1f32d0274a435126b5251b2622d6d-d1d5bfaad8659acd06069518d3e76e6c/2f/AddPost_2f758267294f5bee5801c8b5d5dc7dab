2edb33c9f84d3e171bf14e5d031ea7a0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AddPost;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _firebaseMethods = require("../API/firebaseMethods");

var _expoImagePicker = _interopRequireDefault(require("expo-image-picker"));

var _reactNativeElementDropdown = require("react-native-element-dropdown");

var _FloatingLabelInput = require("./FloatingLabelInput");

var _firebase = _interopRequireDefault(require("firebase"));

var _reactNativePaper = require("react-native-paper");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function AddPost(_ref) {
  var navigation = _ref.navigation;

  var _useState = (0, _react.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      pickedImagePath = _useState2[0],
      setPickedImagePath = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      productName = _useState4[0],
      setProductName = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      desc = _useState6[0],
      setDesc = _useState6[1];

  var _useState7 = (0, _react.useState)(''),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      price = _useState8[0],
      setPrice = _useState8[1];

  var _useState9 = (0, _react.useState)(''),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      image = _useState10[0],
      setImage = _useState10[1];

  var _useState11 = (0, _react.useState)(null),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      value = _useState12[0],
      setValue = _useState12[1];

  var _useState13 = (0, _react.useState)(false),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      isFocus = _useState14[0],
      setIsFocus = _useState14[1];

  var _useState15 = (0, _react.useState)(''),
      _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
      userName = _useState16[0],
      setUserName = _useState16[1];

  var _useState17 = (0, _react.useState)(0),
      _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
      userRating = _useState18[0],
      setUserRating = _useState18[1];

  var _useState19 = (0, _react.useState)(0),
      _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
      rating = _useState20[0],
      setRating = _useState20[1];

  var _useState21 = (0, _react.useState)(0),
      _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
      count = _useState22[0],
      setCount = _useState22[1];

  var _useState23 = (0, _react.useState)(0),
      _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
      avgrating = _useState24[0],
      setAvgRating = _useState24[1];

  var _useState25 = (0, _react.useState)(''),
      _useState26 = (0, _slicedToArray2.default)(_useState25, 2),
      fullName = _useState26[0],
      setFullName = _useState26[1];

  var _useState27 = (0, _react.useState)(''),
      _useState28 = (0, _slicedToArray2.default)(_useState27, 2),
      phone = _useState28[0],
      setPhone = _useState28[1];

  var _useState29 = (0, _react.useState)(''),
      _useState30 = (0, _slicedToArray2.default)(_useState29, 2),
      email = _useState30[0],
      setEmail = _useState30[1];

  var _useState31 = (0, _react.useState)([]),
      _useState32 = (0, _slicedToArray2.default)(_useState31, 2),
      user = _useState32[0],
      setUser = _useState32[1];

  (0, _react.useEffect)(function () {
    function fetchUserPosts() {
      var data = _firebase.default.firestore().collection("users").doc(_firebase.default.auth().currentUser.uid).get().then(function (querySnapshot) {
        var data = querySnapshot.data();
        setFullName(data.fullName);
        setEmail(data.email);
        setPhone(data.phone);
        setUser(data);
      });
    }

    fetchUserPosts();
  }, []);

  var renderLabel = function renderLabel() {
    if (value || isFocus) {
      return _react.default.createElement(_reactNative.Text, {
        style: [styles.label, isFocus && {
          color: 'black',
          width: 350
        }]
      }, "Choose Category");
    }

    return null;
  };

  var data = [{
    label: 'Books',
    value: 'Books'
  }, {
    label: 'Stationary',
    value: 'Stationary'
  }, {
    label: 'Electronics',
    value: 'Electronics'
  }, {
    label: 'Clothes',
    value: 'Clothes'
  }, {
    label: 'Others',
    value: 'Others'
  }];

  var emptyState = function emptyState() {
    setProductName('');
    setDesc('');
    setPrice('');
    setImage('');
    setValue('');
  };

  var handlePress = function handlePress() {
    if (!productName) {
      _reactNative.Alert.alert('Product Name is required');
    } else if (!desc) {
      _reactNative.Alert.alert('Product Description is required.');
    } else if (!price) {
      _reactNative.Alert.alert('Enter price ranging from 0.');
    } else if (!image) {
      _reactNative.Alert.alert('Choose an image');
    } else if (!value) {
      _reactNative.Alert.alert('Choose a category');
    } else {
      var _data = _firebase.default.firestore().collection("users").doc(_firebase.default.auth().currentUser.uid).get().then(function (querySnapshot) {
        var data = querySnapshot.data();
        setUserName(data.fullName);
        setRating(data.rating);
        setCount(data.count);
        setAvgRating((data.rating / data.count).toFixed(2));
        (0, _firebaseMethods.post)(productName, desc, price, image, value, fullName, (data.rating / data.count).toFixed(2));
      });

      if (price === 0) {
        setPrice("Free");
      }

      emptyState();
      navigation.replace('hi');
    }
  };

  var showImagePicker = function _callee() {
    var permissionResult, result;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(_expoImagePicker.default.requestMediaLibraryPermissionsAsync());

          case 2:
            permissionResult = _context.sent;

            if (!(permissionResult.granted === false)) {
              _context.next = 6;
              break;
            }

            alert("You've refused to allow this app to access your photos!");
            return _context.abrupt("return");

          case 6:
            _context.next = 8;
            return _regenerator.default.awrap(_expoImagePicker.default.launchImageLibraryAsync());

          case 8:
            result = _context.sent;

            if (!result.cancelled) {
              setPickedImagePath(result.uri);
              setImage(result.uri);
            }

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  };

  var openCamera = function _callee2() {
    var permissionResult, result;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(_expoImagePicker.default.requestCameraPermissionsAsync());

          case 2:
            permissionResult = _context2.sent;

            if (!(permissionResult.granted === false)) {
              _context2.next = 6;
              break;
            }

            alert("You've refused to allow this app to access your camera!");
            return _context2.abrupt("return");

          case 6:
            _context2.next = 8;
            return _regenerator.default.awrap(_expoImagePicker.default.launchCameraAsync());

          case 8:
            result = _context2.sent;

            if (!result.cancelled) {
              setPickedImagePath(result.uri);
              setImage(result.uri);
            }

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  };

  return _react.default.createElement(_reactNative.ImageBackground, {
    style: styles.background,
    source: require('../assets/feedbg.jpeg')
  }, _react.default.createElement(_reactNative.ScrollView, {
    onBlur: _reactNative.Keyboard.dismiss,
    style: {
      top: '7%'
    }
  }, _react.default.createElement(_reactNativePaper.Card, {
    style: {
      backgroundColor: 'white',
      width: '90%',
      alignSelf: 'center',
      borderRadius: 10
    }
  }, _react.default.createElement(_reactNative.Image, {
    style: styles.img,
    source: require('../assets/more.png')
  }), _react.default.createElement(_reactNative.View, {
    style: styles.buttonContainer
  }, _react.default.createElement(_reactNativePaper.Button, {
    onPress: showImagePicker
  }, "Select an image"), _react.default.createElement(_reactNativePaper.Button, {
    onPress: openCamera
  }, "Open  camera "), _react.default.createElement(_reactNative.View, {
    style: styles.imageContainer
  }, pickedImagePath !== '' && _react.default.createElement(_reactNative.Image, {
    source: {
      uri: pickedImagePath
    },
    style: styles.image
  })), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_FloatingLabelInput.FloatingLabelInput, {
    label: "Product Name *",
    value: productName,
    onChangeText: function onChangeText(productName) {
      return setProductName(productName);
    }
  }), _react.default.createElement(_FloatingLabelInput.FloatingLabelInput, {
    label: "Product Description *",
    value: desc,
    onChangeText: function onChangeText(desc) {
      return setDesc(desc);
    },
    autoCapitalize: "none"
  }), _react.default.createElement(_FloatingLabelInput.FloatingLabelInput, {
    label: "Price *",
    value: price,
    onChangeText: function onChangeText(price) {
      return setPrice(price);
    },
    autoCapitalize: "none"
  })), _react.default.createElement(_reactNative.View, {
    style: styles.container1
  }, renderLabel(), _react.default.createElement(_reactNativeElementDropdown.Dropdown, {
    style: [styles.dropdown, isFocus && {
      borderColor: 'black'
    }],
    placeholderStyle: styles.placeholderStyle,
    selectedTextStyle: styles.selectedTextStyle,
    inputSearchStyle: styles.inputSearchStyle,
    iconStyle: styles.iconStyle,
    data: data,
    search: true,
    maxHeight: 300,
    labelField: "label",
    valueField: "value",
    placeholder: !isFocus ? 'Categories' : '...',
    searchPlaceholder: "Search...",
    value: value,
    onFocus: function onFocus() {
      return setIsFocus(true);
    },
    onBlur: function onBlur() {
      return setIsFocus(false);
    },
    onChange: function onChange(item) {
      setValue(item.value);
      setIsFocus(false);
    }
  })), _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {
    style: styles.button,
    onPress: handlePress
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.buttonText
  }, "Post"))))));
}

var styles = _reactNative.StyleSheet.create({
  background: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    height: '10%'
  },
  background: {
    flex: 1,
    height: '30%'
  },
  button: {
    width: 120,
    padding: 0,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 10,
    alignSelf: 'center'
  },
  container1: {
    width: '78%',
    padding: 16
  },
  dropdown: {
    height: 60,
    borderColor: 'gray',
    borderWidth: 0.5,
    borderRadius: 8,
    paddingHorizontal: 8,
    width: 350,
    marginLeft: -55,
    marginTop: 10
  },
  icon: {
    marginRight: 5
  },
  label: {
    position: 'absolute',
    left: 22,
    zIndex: 999,
    paddingHorizontal: -26,
    fontSize: 15,
    marginLeft: -35,
    marginBottom: 7
  },
  placeholderStyle: {
    fontSize: 15
  },
  selectedTextStyle: {
    fontSize: 15
  },
  iconStyle: {
    width: 20,
    height: 20
  },
  inputSearchStyle: {
    height: 40,
    fontSize: 16
  },
  img: {
    top: '2%',
    height: 50,
    width: 50,
    left: '43%'
  },
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  buttonContainer: {
    top: '2%',
    alignItems: 'center',
    justifyContent: 'center',
    margin: '8%'
  },
  imageContainer: {
    padding: 10
  },
  image: {
    width: 300,
    height: 300,
    resizeMode: 'cover'
  },
  container: {
    height: 700,
    width: '100%',
    backgroundColor: '#ECF3FB',
    alignItems: 'center',
    justifyContent: 'center'
  },
  button: {
    top: '35%',
    left: '-15%',
    width: 370,
    padding: 20,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: '#ffd60a',
    borderRadius: 15,
    alignSelf: 'center',
    height: 65,
    marginLeft: 120
  },
  buttonText: {
    fontSize: 18,
    color: 'darkblue',
    fontWeight: 'bold',
    textAlign: 'center'
  },
  inlineText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: 'black',
    textAlign: 'center',
    marginTop: '5%'
  },
  text: {
    textAlign: 'center',
    fontSize: 25,
    margin: '5%',
    marginTop: '15%',
    fontWeight: 'bold',
    color: 'black'
  },
  textInput: {
    width: 300,
    fontSize: 18,
    borderWidth: 2,
    borderColor: '#48494B',
    padding: 10,
    margin: 5
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,