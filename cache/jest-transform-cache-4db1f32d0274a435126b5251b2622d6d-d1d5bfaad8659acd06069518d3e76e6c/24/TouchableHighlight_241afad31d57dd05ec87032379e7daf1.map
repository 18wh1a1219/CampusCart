{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoBqBA,kB;;;;;EAWnBC,4BAAYC,KAAZD,EAAoE;IAAA;;IAAA;IAClE,0BAAMC,KAAN;;IADkEC,6EASrD,YAAM;MAAA;;MACnB,IAAI,CAAC,MAAKC,eAAL,EAAL,EAA6B;QAC3B;MACD;;MACD,MAAKC,QAAL,CAAc;QACZC,eAAe,EAAE;UACfC,OAAO,EAAE,MAAKL,KAAL,CAAWM;QADL,CADL;QAIZC,kBAAkB,EAAE;UAClBC,eAAe,EAAE,MAAKR,KAAL,CAAWS;QADV;MAJR,CAAd;;MAQA,8CAAKT,KAAL,EAAWU,cAAX;IArBkE;;IAAAT,gFAwBlD;MAAA,OAChB,MAAKD,KAAL,CAAWW,OAAX,IACA,MAAKX,KAAL,CAAWY,SADX,IAEA,MAAKZ,KAAL,CAAWa,UAFX,IAGA,MAAKb,KAAL,CAAWc,WAJK;IAAA,CAxBkD;;IAAAb,6EA8BrD,YAAM;MAAA;;MACnB,MAAKE,QAAL,CAAc;QACZC,eAAe,EAAE,IADL;QAEZG,kBAAkB,EAAE;MAFR,CAAd;;MAIA,+CAAKP,KAAL,EAAWe,cAAX;IAnCkE;;IAAAd,8EAmDpD,UAACe,KAAD,EAAgBC,EAAhB,EAA+B;MAC7C,IAAIA,EAAE,KAAKC,kCAAgBC,KAA3B,EAAkC;QAChC,MAAKC,YAAL;MADF,OAEO,IACLH,EAAE,KAAKC,kCAAgBG,YAAvBJ,IACAA,EAAE,KAAKC,kCAAgBI,aAFlB,EAGL;QACA,MAAKC,YAAL;MACD;IA3DiE;;IAElE,MAAKC,KAAL,GAAa;MACXpB,eAAe,EAAE,IADN;MAEXG,kBAAkB,EAAE;IAFT,CAAb;IAFkE;EARpE;;;;WA8CAkB,0BAAiB;MACf,IAAI,CAAC,KAAKzB,KAAL,CAAW0B,QAAhB,EAA0B;QACxB,OAAOC,oBAACC,iBAAD,OAAP;MACD;;MAED,IAAMC,KAAK,GAAGF,KAAK,CAACG,QAANH,CAAeI,IAAfJ,CACZ,KAAK3B,KAAL,CAAW0B,QADCC,CAAd;MAGA,OAAOA,KAAK,CAACK,YAANL,CAAmBE,KAAnBF,EAA0B;QAC/BM,KAAK,EAAEC,wBAAWC,OAAXD,CAAmBL,KAAK,CAAC7B,KAAN6B,CAAYI,KAA/BC,EAAsC,KAAKV,KAAL,CAAWpB,eAAjD8B;MADwB,CAA1BP,CAAP;IAGD;;;WAaDS,kBAAS;MACP,mBAAgC,KAAKpC,KAArC;MAAA,sCAAQiC,KAAR;MAAA,IAAQA,KAAR,mCAAgB,EAAhB;MAAA,IAAuBI,IAAvB;MACA,IAAQ9B,kBAAR,GAA+B,KAAKiB,KAApC,CAAQjB,kBAAR;MACA,OACEoB,oBAACW,yBAAD,eACMD,IADN;QAEEJ,KAAK,EAAE,CAACA,KAAD,EAAQ1B,kBAAR,CAFT;QAGEgC,aAAa,EAAE,KAAKA;MAHtB,IAIG,KAAKd,cAAL,EAJH,CADF;IAQD;;;EApF6Ce,e;;;;gBAA3B1C,oB,2CAKd2C,0BAAiBC;EACpBpC,aAAa,EAAE;EACfqC,aAAa,EAAE;EACflC,aAAa,EAAE","names":["TouchableHighlight","constructor","props","_defineProperty","hasPressHandler","setState","extraChildStyle","opacity","activeOpacity","extraUnderlayStyle","backgroundColor","underlayColor","onShowUnderlay","onPress","onPressIn","onPressOut","onLongPress","onHideUnderlay","_from","to","TOUCHABLE_STATE","BEGAN","showUnderlay","UNDETERMINED","MOVED_OUTSIDE","hideUnderlay","state","renderChildren","children","React","_reactNative","child","Children","only","cloneElement","style","StyleSheet","compose","render","rest","_GenericTouchable","onStateChange","Component","GenericTouchable","defaultProps","delayPressOut"],"sources":["TouchableHighlight.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport GenericTouchable, {\n  GenericTouchableProps,\n  TOUCHABLE_STATE,\n} from './GenericTouchable';\nimport {\n  StyleSheet,\n  View,\n  TouchableHighlightProps,\n  ColorValue,\n  ViewProps,\n} from 'react-native';\n\ninterface State {\n  extraChildStyle: null | {\n    opacity?: number;\n  };\n  extraUnderlayStyle: null | {\n    backgroundColor?: ColorValue;\n  };\n}\n\n/**\n * TouchableHighlight follows RN's implementation\n */\nexport default class TouchableHighlight extends Component<\n  TouchableHighlightProps & GenericTouchableProps,\n  State\n> {\n  static defaultProps = {\n    ...GenericTouchable.defaultProps,\n    activeOpacity: 0.85,\n    delayPressOut: 100,\n    underlayColor: 'black',\n  };\n\n  constructor(props: TouchableHighlightProps & GenericTouchableProps) {\n    super(props);\n    this.state = {\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    };\n  }\n\n  // Copied from RN\n  showUnderlay = () => {\n    if (!this.hasPressHandler()) {\n      return;\n    }\n    this.setState({\n      extraChildStyle: {\n        opacity: this.props.activeOpacity,\n      },\n      extraUnderlayStyle: {\n        backgroundColor: this.props.underlayColor,\n      },\n    });\n    this.props.onShowUnderlay?.();\n  };\n\n  hasPressHandler = () =>\n    this.props.onPress ||\n    this.props.onPressIn ||\n    this.props.onPressOut ||\n    this.props.onLongPress;\n\n  hideUnderlay = () => {\n    this.setState({\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    });\n    this.props.onHideUnderlay?.();\n  };\n\n  renderChildren() {\n    if (!this.props.children) {\n      return <View />;\n    }\n\n    const child = React.Children.only(\n      this.props.children\n    ) as React.ReactElement<ViewProps>; // TODO: not sure if OK but fixes error\n    return React.cloneElement(child, {\n      style: StyleSheet.compose(child.props.style, this.state.extraChildStyle),\n    });\n  }\n\n  onStateChange = (_from: number, to: number) => {\n    if (to === TOUCHABLE_STATE.BEGAN) {\n      this.showUnderlay();\n    } else if (\n      to === TOUCHABLE_STATE.UNDETERMINED ||\n      to === TOUCHABLE_STATE.MOVED_OUTSIDE\n    ) {\n      this.hideUnderlay();\n    }\n  };\n\n  render() {\n    const { style = {}, ...rest } = this.props;\n    const { extraUnderlayStyle } = this.state;\n    return (\n      <GenericTouchable\n        {...rest}\n        style={[style, extraUnderlayStyle]}\n        onStateChange={this.onStateChange}>\n        {this.renderChildren()}\n      </GenericTouchable>\n    );\n  }\n}\n"]}