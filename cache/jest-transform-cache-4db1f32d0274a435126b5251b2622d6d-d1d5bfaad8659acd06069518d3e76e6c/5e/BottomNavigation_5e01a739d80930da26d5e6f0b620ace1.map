{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAUA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsNA,IAAMA,gBAAgB,GAAG,KAAzB;AACA,IAAMC,aAAa,GAAG,EAAtB;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,UAAU,GAAG,EAAnB;AACA,IAAMC,YAAY,GAAG,+CAArB;AACA,IAAMC,YAAY,GAAGC,sBAASC,EAATD,KAAgB,KAAhBA,GAAwB,CAAxBA,GAA4B,IAAjD;;AAEA,IAAME,SAAS,GAAG,SAAZA,SAAY;EAAA,IACTC,EADS,QAChBC,KADgB;EAAA,IAEhBC,KAFgB,QAEhBA,KAFgB;EAAA,IAGhBC,QAHgB,QAGhBA,QAHgB;EAAA,IAIhBC,UAJgB,QAIhBA,UAJgB;EAAA,IAKhBC,QALgB,QAKhBA,QALgB;EAAA,IAMhBC,WANgB,QAMhBA,WANgB;EAAA,IAObC,IAPa;EAAA,OAShBC,yBAAgBC,SAAhBD,GACEE,oBAACC,wBAAD,eACMJ,IADN;IAEEK,QAAQ,EAAEL,IAAI,CAACK,QAALL,IAAiBM,SAF7B;IAGET,UAAU,EAAEA,UAHd;IAIEC,QAAQ,EAAEA,QAJZ;IAKEC,WAAW,EAAEA,WALf;IAMEJ,KAAK,EAAEA;EANT,IAQGC,QARH,CADFK,GAYEE,oBAACI,qCAAD,EAA8BP,IAA9B,EACEG,oBAACI,iBAAD;IAAMZ,KAAK,EAAEA;EAAb,GAAqBC,QAArB,CADF,CArBc;AAAlB;;AA0BA,IAAMY,cAAc,GAAGL,KAAK,CAACM,IAANN,CAAW;EAAA,IAAGO,SAAH,SAAGA,SAAH;EAAA,IAAiBV,IAAjB;EAAA,OAChCG,KAAK,CAACQ,aAANR,CAAoBO,SAApBP,EAA+BH,IAA/BG,CADgC;AAAX,EAAvB;;AAsDA,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,QAyBZ;EAAA;;EAAA,IAxBXC,eAwBW,SAxBXA,eAwBW;EAAA,IAvBXC,WAuBW,SAvBXA,WAuBW;EAAA,IAtBXC,UAsBW,SAtBXA,UAsBW;EAAA,IArBXC,WAqBW,SArBXA,WAqBW;EAAA,kCApBXC,eAoBW;EAAA,IApBXA,eAoBW,sCApBQC,eAAD;IAAA,OAA2Bf,oBAACX,SAAD,EAAe0B,KAAf,CAA3B;EAAA,CAoBP;EAAA,+BAnBXC,YAmBW;EAAA,IAnBXA,YAmBW,mCAnBI;IAAA,IAAGzB,KAAH,SAAGA,KAAH;IAAA,OAAiCA,KAAK,CAAC0B,KAAvC;EANS,CAyBb;EAAA,2BAlBXC,QAkBW;EAAA,IAlBXA,QAkBW,+BAlBA;IAAA,IAAG3B,KAAH,SAAGA,KAAH;IAAA,OAAiCA,KAAK,CAAC4B,KAAvC;EAPa,CAyBb;EAAA,2BAjBXC,QAiBW;EAAA,IAjBXA,QAiBW,+BAjBA;IAAA,IAAG7B,KAAH,SAAGA,KAAH;IAAA,OAAiCA,KAAK,CAAC8B,KAAvC;EARa,CAyBb;EAAA,kCAhBXC,qBAgBW;EAAA,IAhBXA,qBAgBW,sCAhBa;IAAA,IAAG/B,KAAH,SAAGA,KAAH;IAAA,OACtBA,KAAK,CAACgC,kBADgB;EATA,CAyBb;EAAA,4BAdXC,SAcW;EAAA,IAdXA,SAcW,gCAdC;IAAA,IAAGjC,KAAH,SAAGA,KAAH;IAAA,OAAiCA,KAAK,CAACkC,MAAvC;EAXY,CAyBb;EAAA,IAbXC,WAaW,SAbXA,WAaW;EAAA,IAZXC,aAYW,SAZXA,aAYW;EAAA,kCAXXC,0BAWW;EAAA,IAXXA,0BAWW,sCAXkB,IAWlB;EAAA,IAVXC,QAUW,SAVXA,QAUW;EAAA,0BATXC,OASW;EAAA,IATXA,OASW,8BATD,IASC;EAAA,IARXtC,KAQW,SARXA,KAQW;EAAA,IAPXuC,KAOW,SAPXA,KAOW;EAAA,kCANXC,qBAMW;EAAA,IANXA,qBAMW,sCANa,KAMb;EAAA,IALXC,UAKW,SALXA,UAKW;EAAA,IAJXC,aAIW,SAJXA,aAIW;EAAA,2BAHXC,QAGW;EAAA,IAHXA,QAGW,+BAHAzB,eAAe,CAAC0B,MAAhB1B,CAAuB2B,MAAvB3B,GAAgC,CAGhC;EAAA,IAFX4B,cAEW,SAFXA,cAEW;EAAA,kCADXC,0BACW;EAAA,IADXA,0BACW,sCADkB,CAClB;EACX,IAAQC,KAAR,GAAkBT,KAAK,CAACU,SAAxB,CAAQD,KAAR;EAEA,IAAME,UAAU,GAAGhC,eAAe,CAAC0B,MAAhB1B,CAAuBA,eAAe,CAACiC,KAAvCjC,EAA8CkC,GAAjE;EAKA,IAAMC,WAAW,GAAG,+BAAiB,CAAjB,CAApB;EAKA,IAAMC,SAAS,GAAG,oCAChBpC,eAAe,CAAC0B,MAAhB1B,CAAuBqC,GAAvBrC,CAEE,UAACsC,CAAD,EAAIC,CAAJ;IAAA,OAAWA,CAAC,KAAKvC,eAAe,CAACiC,KAAtBM,GAA8B,CAA9BA,GAAkC,CAA7C;EAAA,CAFFvC,CADgB,CAAlB;EAYA,IAAMwC,YAAY,GAAG,oCACnBxC,eAAe,CAAC0B,MAAhB1B,CAAuBqC,GAAvBrC,CAEE,UAACsC,CAAD,EAAIC,CAAJ;IAAA,OAAWA,CAAC,KAAKvC,eAAe,CAACiC,KAAtBM,GAA8B,CAA9BA,GAAkC,CAA7C;EAAA,CAFFvC,CADmB,CAArB;EAWA,IAAMyC,SAAS,GAAG,+BAAiBzC,eAAe,CAACiC,KAAjC,CAAlB;EAKA,IAAMS,UAAU,GAAG,+BAAiBvE,gBAAjB,CAAnB;;EAKA,aAA2B,yBAA3B;EAAA;EAAA,IAAOwE,MAAP;EAAA,IAAeC,QAAf;;EAKA,sBAA4BtD,KAAK,CAACuD,QAANvD,CAAyB,CAAC0C,UAAD,CAAzB1C,CAA5B;EAAA;EAAA,IAAOwD,MAAP;EAAA,IAAeC,SAAf;;EAEA,IAAI,CAACD,MAAM,CAACE,QAAPF,CAAgBd,UAAhBc,CAAL,EAAkC;IAEhCC,SAAS,CAAED,gBAAD;MAAA,kDAAgBA,MAAhB,IAAwBd,UAAxB;IAAA,CAAD,CAATe;EACD;;EAKD,uBAA8CzD,KAAK,CAACuD,QAANvD,CAAe,KAAfA,CAA9C;EAAA;EAAA,IAAO2D,eAAP;EAAA,IAAwBC,kBAAxB;;EAEA,IAAMC,kBAAkB,GAAG7D,KAAK,CAAC8D,WAAN9D,CAAkB,YAAM;IACjD4D,kBAAkB,CAAC,IAAD,CAAlBA;;IACAG,sBAASC,MAATD,CAAgBlB,WAAhBkB,EAA6B;MAC3BE,OAAO,EAAE,CADkB;MAE3BC,QAAQ,EAAE,MAAM1B,KAFW;MAG3B2B,eAAe,EAAE;IAHU,CAA7BJ,EAIGK,KAJHL;EAFyB,GAOxB,CAACvB,KAAD,EAAQK,WAAR,CAPwB7C,CAA3B;EASA,IAAMqE,kBAAkB,GAAGrE,KAAK,CAAC8D,WAAN9D,CAAkB,YAAM;IACjD+D,sBAASC,MAATD,CAAgBlB,WAAhBkB,EAA6B;MAC3BE,OAAO,EAAE,CADkB;MAE3BC,QAAQ,EAAE,MAAM1B,KAFW;MAG3B2B,eAAe,EAAE;IAHU,CAA7BJ,EAIGK,KAJHL,CAIS,YAAM;MACbH,kBAAkB,CAAC,KAAD,CAAlBA;IALF;EADyB,GAQxB,CAACpB,KAAD,EAAQK,WAAR,CARwB7C,CAA3B;EAUA,IAAMsE,cAAc,GAAGtE,KAAK,CAAC8D,WAAN9D,CACpB2C,eAAD,EAAmB;IAEjBS,UAAU,CAACmB,QAAXnB,CAAoBvE,gBAApBuE;;IAEAW,sBAASS,QAATT,EACEA,sBAASC,MAATD,CAAgBX,UAAhBW,EAA4B;MAC1BE,OAAO,EAAE,CADiB;MAE1BC,QAAQ,EAAE/B,QAAQ,GAAG,MAAMK,KAAT,GAAiB,CAFT;MAG1B2B,eAAe,EAAE;IAHS,CAA5BJ,CADFA,0CAMKrD,eAAe,CAAC0B,MAAhB1B,CAAuBqC,GAAvBrC,CAA2B,UAACsC,CAAD,EAAIC,CAAJ;MAAA,OAC5Bc,sBAASC,MAATD,CAAgBjB,SAAS,CAACG,CAAD,CAAzBc,EAA8B;QAC5BE,OAAO,EAAEhB,CAAC,KAAKN,KAANM,GAAc,CAAdA,GAAkB,CADC;QAE5BiB,QAAQ,EAAE/B,QAAQ,GAAG,MAAMK,KAAT,GAAiB,CAFP;QAG5B2B,eAAe,EAAE;MAHW,CAA9BJ,CAD4B;IAAA,CAA3BrD,CANLqD,IAaGK,KAbHL,CAaS,iBAAkB;MAAA,IAAfU,QAAe,SAAfA,QAAe;MAEzB3B,SAAS,CAACC,GAAVD,CAAc,UAAC4B,GAAD,EAAMzB,CAAN;QAAA,OAAYyB,GAAG,CAACH,QAAJG,CAAazB,CAAC,KAAKN,KAANM,GAAc,CAAdA,GAAkB,CAA/ByB,CAAZ;MAAA,CAAd5B;MAGAK,SAAS,CAACoB,QAAVpB,CAAmBR,KAAnBQ;MACAC,UAAU,CAACmB,QAAXnB,CAAoBvE,gBAApBuE;;MAEA,IAAIqB,QAAJ,EAAc;QAGZvB,YAAY,CAACyB,OAAbzB,CAAqB,UAAC0B,MAAD,EAAS3B,CAAT,EAAe;UAClC,IAAIA,CAAC,KAAKN,KAAV,EAAiB;YACfiC,MAAM,CAACL,QAAPK,CAAgB,CAAhBA;UADF,OAEO;YACLA,MAAM,CAACL,QAAPK,CAAgB,CAAhBA;UACD;QALH;MAOD;IA/BH;EALmB,GAuCrB,CACEzB,SADF,EAEEhB,QAFF,EAGEzB,eAAe,CAAC0B,MAHlB,EAIEc,YAJF,EAKEE,UALF,EAMEZ,KANF,EAOEM,SAPF,CAvCqB9C,CAAvB;EAkDAA,KAAK,CAAC6E,SAAN7E,CAAgB,YAAM;IAGpBsE,cAAc,CAAC5D,eAAe,CAACiC,KAAjB,CAAd2B;EAHF,GAKG,EALHtE;EAOA,iCAAmB;IACjB8E,MAAM,EAAEjB,kBADS;IAEjBkB,MAAM,EAAEV;EAFS,CAAnB;EAKA,IAAMW,mBAAmB,GAAGhF,KAAK,CAACiF,MAANjF,EAA5B;EAEAA,KAAK,CAAC6E,SAAN7E,CAAgB,YAAM;IAEpBkD,YAAY,CAACyB,OAAbzB,CAAqB,UAAC0B,MAAD,EAAS3B,CAAT,EAAe;MAAA;;MAClC,IACEA,CAAC,KAAKvC,eAAe,CAACiC,KAAtBM,IACAA,CAAC,+BAAK+B,mBAAmB,CAACE,OAAzB,0DAAKC,sBAA6BxC,KAAlC,CAFH,EAGE;QACAiC,MAAM,CAACL,QAAPK,CAAgB,CAAhBA;MACD;IANH;IASAN,cAAc,CAAC5D,eAAe,CAACiC,KAAjB,CAAd2B;EAXF,GAYG,CAAC5D,eAAe,CAACiC,KAAjB,EAAwB2B,cAAxB,EAAwCpB,YAAxC,CAZHlD;;EAcA,IAAMoF,cAAc,GAAIzC,SAAlByC,cAAkBzC,MAAD,EAAmB;IACxC,IAAM0C,KAAK,GAAG;MACZ9F,KAAK,EAAEmB,eAAe,CAAC0B,MAAhB1B,CAAuBiC,KAAvBjC,CADK;MAEZ4E,gBAAgB,EAAE,KAFN;MAGZC,cAAc,EAAE,0BAAM;QACpBF,KAAK,CAACC,gBAAND,GAAyB,IAAzBA;MACD;IALW,CAAd;IAQApD,UAAU,SAAVA,cAAU,WAAVA,sBAAU,CAAGoD,KAAH,CAAVpD;;IAEA,IAAIoD,KAAK,CAACC,gBAAV,EAA4B;MAC1B;IACD;;IAED,IAAI3C,KAAK,KAAKjC,eAAe,CAACiC,KAA9B,EAAqC;MACnCT,aAAa,CAACS,KAAD,CAAbT;IACD;EAjBH;;EAoBA,IAAMsD,MAAM,GAAGxF,KAAK,CAAC8D,WAAN9D,CACZ4C,aAAD,EAAiB;IACf,IAAMD,KAAK,GAAGjC,eAAe,CAAC0B,MAAhB1B,CAAuB+E,SAAvB/E,CACXnB,eAAD;MAAA,OAAWA,KAAK,CAACqD,GAANrD,KAAcqD,GAAzB;IAAA,CADYlC,CAAd;IAIAwB,aAAa,CAACS,KAAD,CAAbT;EANW,GAQb,CAACxB,eAAe,CAAC0B,MAAjB,EAAyBF,aAAzB,CARalC,CAAf;EAWA,IAAQoC,MAAR,GAAmB1B,eAAnB,CAAQ0B,MAAR;EACA,IAAQsD,MAAR,GAA4C3D,KAA5C,CAAQ2D,MAAR;EAAA,IAAsBC,WAAtB,GAA4C5D,KAA5C,CAAgB6D,IAAhB;EAAA,IAAmCC,IAAnC,GAA4C9D,KAA5C,CAAmC8D,IAAnC;;EAEA,aACEC,wBAAWC,OAAXD,CAAmBjE,QAAnBiE,KAAgC,EADlC;EAAA,IAAyBE,gBAAzB,UAAQC,eAAR;EAAA,8BAA2CC,SAA3C;EAAA,IAA2CA,SAA3C,iCAAuD,CAAvD;;EAGA,IAAMC,qBAAqB,GAAGH,gBAAgB,GAC1CA,gBAD0C,GAE1CL,WAAW,IAAIE,IAAI,KAAK,UAAxBF,GACA,sBAAQO,SAAR,EAAmBR,MAAM,CAACU,OAA1B,CADAT,GAEAD,MAAM,CAACW,OAJX;EAMA,IAAMJ,eAAe,GAAG9D,QAAQ,GAC5BgB,SAAS,CAACmD,WAAVnD,CAAsB;IACpBoD,UAAU,EAAEnE,MAAM,CAACW,GAAPX,CAAW,UAACY,CAAD,EAAIC,CAAJ;MAAA,OAAUA,CAAV;IAAA,CAAXb,CADQ;IAIpBoE,WAAW,EAAEpE,MAAM,CAACW,GAAPX,CACV7C,eAAD;MAAA,OAAW6B,QAAQ,CAAC;QAAE7B;MAAF,CAAD,CAAR6B,IAAuB+E,qBAAlC;IAAA,CADW/D;EAJO,CAAtBe,CAD4B,GAS5BgD,qBATJ;EAWA,IAAMM,MAAM,GACV,OAAON,qBAAP,KAAiC,QAAjC,GACI,CAAC,oBAAMA,qBAAN,EAA6BO,OAA7B,EADL,GAEI,IAHN;EAKA,IAAMC,SAAS,GAAGF,MAAM,GAAGG,aAAH,GAAWC,aAAnC;EACA,IAAMC,eAAe,GACnB,OAAOpF,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmDiF,SADrD;EAEA,IAAMI,iBAAiB,GACrB,OAAOpF,aAAP,KAAyB,WAAzB,GACIA,aADJ,GAEI,oBAAMgF,SAAN,EAAiBK,KAAjB,CAAuB,GAAvB,EAA4BC,GAA5B,GAAkCC,MAAlC,EAHN;EAKA,IAAMC,UAAU,GAAG,oBAAMzF,WAAW,IAAIoF,eAArB,EAChBE,KADgB,CACV,IADU,EAEhBC,GAFgB,GAGhBC,MAHgB,EAAnB;EAKA,IAAME,WAAW,GAAGhF,MAAM,CAACC,MAAPD,GAAgB,CAAhBA,GAAoBtD,aAApBsD,GAAoCrD,aAAxD;EACA,IAAMsI,cAAc,GAAGD,WAAW,GAAGhF,MAAM,CAACC,MAA5C;EAEA,IAAMiF,WAAW,GAAGC,IAAI,CAACC,GAALD,CAASlE,MAAM,CAACoE,KAAhBF,EAAuBF,cAAvBE,CAApB;EACA,IAAMG,QAAQ,GAAGJ,WAAW,GAAGlF,MAAM,CAACC,MAAtC;EAEA,IAAMsF,UAAU,GAAGtE,MAAM,CAACoE,KAAPpE,GAAe,CAAlC;EAEA,IAAMuE,MAAM,GAAG;IACbC,IAAI,0BAAEvF,cAAF,SAAEA,kBAAF,WAAEA,GAAF,MAAEA,iBAAc,CAAEuF,IAAlB,uEAA0B,CADjB;IAEbC,KAAK,2BAAExF,cAAF,SAAEA,kBAAF,WAAEA,GAAF,MAAEA,iBAAc,CAAEwF,KAAlB,yEAA2B,CAFnB;IAGbC,MAAM,2BAAEzF,cAAF,SAAEA,kBAAF,WAAEA,GAAF,MAAEA,iBAAc,CAAEyF,MAAlB,yEAA4B9I;EAHrB,CAAf;EAMA,OACEe,oBAACI,iBAAD;IAAMZ,KAAK,EAAE,CAACwI,MAAM,CAACC,SAAR,EAAmBzI,KAAnB;EAAb,GACEQ,oBAACI,iBAAD;IAAMZ,KAAK,EAAE,CAACwI,MAAM,CAACE,OAAR,EAAiB;MAAEjC,eAAe,EAAEP,MAAM,CAACyC;IAA1B,CAAjB;EAAb,GACG/F,MAAM,CAACW,GAAPX,CAAW,UAAC7C,KAAD,EAAQoD,KAAR,EAAkB;IAC5B,IAAI,CAACa,MAAM,CAACE,QAAPF,CAAgBjE,KAAK,CAACqD,GAAtBY,CAAL,EAAiC;MAE/B,OAAO,IAAP;IACD;;IAED,IAAM4E,OAAO,GAAG1H,eAAe,CAACiC,KAAhBjC,KAA0BiC,KAA1C;IAEA,IAAM0F,OAAO,GAAGrG,qBAAqB,GACjCc,SAAS,CAACH,KAAD,CADwB,GAEjCyF,OAAO,GACP,CADO,GAEP,CAJJ;IAMA,IAAME,GAAG,GAAGtG,qBAAqB,GAC7BkB,YAAY,CAACP,KAAD,CAAZO,CAAoBoD,WAApBpD,CAAgC;MAC9BqD,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADkB;MAE9BC,WAAW,EAAE,CAAC,CAAD,EAAItH,YAAJ;IAFiB,CAAhCgE,CAD6B,GAK7BkF,OAAO,GACP,CADO,GAEPlJ,YAPJ;IASA,OACEc,oBAACuI,oCAAD;MACE3F,GAAG,EAAErD,KAAK,CAACqD,GADb;MAEE4F,aAAa,EAAEJ,OAAO,GAAG,MAAH,GAAY,MAFpC;MAGEK,2BAA2B,EAAE,CAACL,OAHhC;MAIEM,yBAAyB,EACvBN,OAAO,GAAG,MAAH,GAAY,qBALvB;MAOEzF,KAAK,EAAEA,KAPT;MAQEgG,UAAU,EAAEN,OARd;MASE7I,KAAK,EAAE,CAACsG,wBAAW8C,YAAZ,EAA0B;QAAEP;MAAF,CAA1B,CATT;MAUEQ,WAAW,EAAE,KAVf;MAWEC,qBAAqB,EAGnB3J,sBAASC,EAATD,KAAgB,KAAhBA,GAAwBuB,eAAe,CAACiC,KAAhBjC,KAA0BiC,KAAlDxD,GAA0D;IAd9D,GAiBEa,oBAACI,sBAAS2I,IAAV;MAAevJ,KAAK,EAAE,CAACwI,MAAM,CAACE,OAAR,EAAiB;QAAEI;MAAF,CAAjB;IAAtB,GACG3H,WAAW,CAAC;MAAEpB,KAAF,EAAEA,KAAF;MAASiG;IAAT,CAAD,CADd,CAjBF,CADF;EAvBD,EADH,CADF,EAkDExF,oBAACgJ,gBAAD;IACExJ,KAAK,EACH,CACEwI,MAAM,CAACiB,GADT,EAEErH,0BAA0B,GACtB;MAEEsH,SAAS,EAAE,CACT;QACEC,UAAU,EAAEtG,WAAW,CAACyD,WAAZzD,CAAwB;UAClC0D,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADsB;UAElCC,WAAW,EAAE,CAACnD,MAAM,CAAC+F,MAAR,EAAgB,CAAhB;QAFqB,CAAxBvG;MADd,CADS,CAFb;MAYEwG,QAAQ,EAAE1F,eAAe,GAAG,UAAH,GAAgB;IAZ3C,CADsB,GAetB,IAjBN,EAkBE9B,QAlBF,CAFJ;IAuBE2G,aAAa,EACXnF,MAAM,CAACiG,QAAPjG,GACIzB,0BAA0B,IAAI+B,eAA9B/B,GACE,MADFA,GAEE,MAHNyB,GAII,MA5BR;IA8BEC,QAAQ,EAAEA;EA9BZ,GAgCEtD,oBAACI,sBAAS2I,IAAV;IAAevJ,KAAK,EAAE,CAACwI,MAAM,CAACuB,UAAR,EAAoB;MAAEtD;IAAF,CAApB;EAAtB,GACEjG,oBAACI,iBAAD;IACEZ,KAAK,EAAE,CACLwI,MAAM,CAACwB,KADF,EAEL;MACEC,YAAY,EAAE7B,MAAM,CAACG,MADvB;MAEE2B,gBAAgB,EAAEnC,IAAI,CAACoC,GAALpC,CAASK,MAAM,CAACC,IAAhBN,EAAsBK,MAAM,CAACE,KAA7BP,CAFpB;MAGEqC,QAAQ,EAAEvC;IAHZ,CAFK,CADT;IASEwC,iBAAiB,EAAE;EATrB,GAWG1H,QAAQ,GACPnC,oBAACI,sBAAS2I,IAAV;IACEP,aAAa,EAAC,MADhB;IAEEhJ,KAAK,EAAE,CACLwI,MAAM,CAAC8B,MADF,EAEL;MAGExB,GAAG,EAAE,CAACtJ,UAAU,GAAG2I,UAAd,IAA4B,CAHnC;MAIEE,IAAI,EACFH,QAAQ,IAAIhH,eAAe,CAACiC,KAAhBjC,GAAwB,GAA5B,CAARgH,GAA2CC,UAAU,GAAG,CAL5D;MAMEyB,MAAM,EAAEzB,UANV;MAOEF,KAAK,EAAEE,UAPT;MAQEoC,YAAY,EAAEpC,UAAU,GAAG,CAR7B;MASE1B,eAAe,EAAE7E,QAAQ,CAAC;QACxB7B,KAAK,EAAE6C,MAAM,CAAC1B,eAAe,CAACiC,KAAjB;MADW,CAAD,CAT3B;MAYEuG,SAAS,EAAE,CACT;QAEE1G,KAAK,EAAEY,UAAU,CAACkD,WAAXlD,CAAuB;UAC5BmD,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADgB;UAE5BC,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;QAFe,CAAvBpD;MAFT,CADS,CAZb;MAqBEiF,OAAO,EAAEjF,UAAU,CAACkD,WAAXlD,CAAuB;QAC9BmD,UAAU,EAAE,CAAC,CAAD,EAAI1H,gBAAJ,EAAsB,GAAtB,EAA2B,CAA3B,CADkB;QAE9B2H,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;MAFiB,CAAvBpD;IArBX,CAFK;EAFT,EADO,GAiCL,IA5CN,EA6CGhB,MAAM,CAACW,GAAPX,CAAW,UAAC7C,KAAD,EAAQoD,KAAR,EAAkB;IAC5B,IAAMyF,OAAO,GAAG1H,eAAe,CAACiC,KAAhBjC,KAA0BiC,KAA1C;IACA,IAAMqH,MAAM,GAAGlH,SAAS,CAACH,KAAD,CAAxB;IAGA,IAAMH,KAAK,GACTV,OAAO,IAAIK,QAAXL,GACIkI,MAAM,CAAC1D,WAAP0D,CAAmB;MACjBzD,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADK;MAEjBC,WAAW,EAAE,CAAC,GAAD,EAAM,CAAN;IAFI,CAAnBwD,CADJlI,GAKI,CANN;IASA,IAAMqH,UAAU,GAAGrH,OAAO,GACtBK,QAAQ,GACN6H,MAAM,CAAC1D,WAAP0D,CAAmB;MACjBzD,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADK;MAEjBC,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;IAFI,CAAnBwD,CADM,GAKN,CANoB,GAOtB,CAPJ;IAYA,IAAMC,aAAa,GAAGD,MAAtB;IACA,IAAME,eAAe,GAAGF,MAAM,CAAC1D,WAAP0D,CAAmB;MACzCzD,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD6B;MAEzCC,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;IAF4B,CAAnBwD,CAAxB;IAKA,IAAM7I,KAAK,GAAGD,QAAQ,CAAC;MAAE3B;IAAF,CAAD,CAAtB;IAEA,OAAOuB,eAAe,CAAC;MACrB8B,GAAG,EAAErD,KAAK,CAACqD,GADU;MAErBrD,KAFqB,EAErBA,KAFqB;MAGrBG,UAAU,EAAE,IAHS;MAIrBC,QAAQ,EAAE,IAJW;MAKrBC,WAAW,EAAEuH,UALQ;MAMrBgD,OAAO,EAAE;QAAA,OAAM/E,cAAc,CAACzC,KAAD,CAApB;MAAA,CANY;MAOrBlB,MAAM,EAAED,SAAS,CAAC;QAAEjC;MAAF,CAAD,CAPI;MAQrBgC,kBAAkB,EAAED,qBAAqB,CAAC;QAAE/B;MAAF,CAAD,CARpB;MAUrB6K,mBAAmB,EAAEhC,OAAO,GACxB,CAAC,QAAD,EAAW,UAAX,CADwB,GAExB,QAZiB;MAarBiC,0BAA0B,EAAE,QAbP;MAcrBR,iBAAiB,EAAE1K,sBAASC,EAATD,KAAgB,KAAhBA,GAAwB,QAAxBA,GAAmC,KAdjC;MAerBmL,kBAAkB,EAAE;QAAEC,QAAQ,EAAEnC;MAAZ,CAfC;MAgBrB5I,KAAK,EAAEwI,MAAM,CAACwC,IAhBO;MAiBrB/K,QAAQ,EACNO,oBAACI,iBAAD;QAAMoI,aAAa,EAAC;MAApB,GACExI,oBAACI,sBAAS2I,IAAV;QACEvJ,KAAK,EAAE,CACLwI,MAAM,CAACyC,aADF,EAEL;UAAEvB,SAAS,EAAE,CAAC;YAAEC;UAAF,CAAD;QAAb,CAFK;MADT,GAMEnJ,oBAACI,sBAAS2I,IAAV;QACEvJ,KAAK,EAAE,CAACwI,MAAM,CAAC0C,WAAR,EAAqB;UAAErC,OAAO,EAAE4B;QAAX,CAArB;MADT,GAGGrJ,UAAU,GACTA,UAAU,CAAC;QACTrB,KADS,EACTA,KADS;QAET6I,OAAO,EAAE,IAFA;QAGT/G,KAAK,EAAEyF;MAHE,CAAD,CADD,GAOT9G,oBAAC2K,aAAD;QACEC,MAAM,EAAErL,KAAK,CAACsL,IADhB;QAEExJ,KAAK,EAAEyF,eAFT;QAGEgE,IAAI,EAAE;MAHR,EAVJ,CANF,EAuBE9K,oBAACI,sBAAS2I,IAAV;QACEvJ,KAAK,EAAE,CACLwI,MAAM,CAAC0C,WADF,EAEL;UAAErC,OAAO,EAAE6B;QAAX,CAFK;MADT,GAMGtJ,UAAU,GACTA,UAAU,CAAC;QACTrB,KADS,EACTA,KADS;QAET6I,OAAO,EAAE,KAFA;QAGT/G,KAAK,EAAE0F;MAHE,CAAD,CADD,GAOT/G,oBAAC2K,aAAD;QACEC,MAAM,EAAErL,KAAK,CAACsL,IADhB;QAEExJ,KAAK,EAAE0F,iBAFT;QAGE+D,IAAI,EAAE;MAHR,EAbJ,CAvBF,EA2CE9K,oBAACI,iBAAD;QACEZ,KAAK,EAAE,CACLwI,MAAM,CAAC+C,cADF,EAEL;UACEjD,KAAK,EACH,CAAC3G,KAAK,IAAI,IAATA,IAAiB,OAAOA,KAAP,KAAiB,SAAlCA,GACG6J,MAAM,CAAC7J,KAAD,CAAN6J,CAAc3I,MAAd2I,GAAuB,CAAC,CAD3B7J,GAEG,CAFJ,IAES;QAJb,CAFK;MADT,GAWG,OAAOA,KAAP,KAAiB,SAAjB,GACCnB,oBAACiL,cAAD;QAAOC,OAAO,EAAE/J,KAAhB;QAAuB2J,IAAI,EAAE;MAA7B,EADD,GAGC9K,oBAACiL,cAAD;QAAOC,OAAO,EAAE/J,KAAK,IAAI,IAAzB;QAA+B2J,IAAI,EAAE;MAArC,GACG3J,KADH,CAdJ,CA3CF,CADF,EAgEGW,OAAO,GACN9B,oBAACI,sBAAS2I,IAAV;QACEvJ,KAAK,EAAE,CACLwI,MAAM,CAACmD,cADF,EAEL;UAAEjC,SAAS,EAAE,CAAC;YAAE1G;UAAF,CAAD;QAAb,CAFK;MADT,GAMExC,oBAACI,sBAAS2I,IAAV;QACEvJ,KAAK,EAAE,CACLwI,MAAM,CAACoD,YADF,EAEL;UAAE/C,OAAO,EAAE4B;QAAX,CAFK;MADT,GAMGpJ,WAAW,GACVA,WAAW,CAAC;QACVtB,KADU,EACVA,KADU;QAEV6I,OAAO,EAAE,IAFC;QAGV/G,KAAK,EAAEyF;MAHG,CAAD,CADD,GAOV9G,oBAACqL,aAAD;QACEC,qBAAqB,EAAE/I,0BADzB;QAEE/C,KAAK,EAAE,CAACwI,MAAM,CAACuD,KAAR,EAAe;UAAElK,KAAK,EAAEyF;QAAT,CAAf;MAFT,GAIG9F,YAAY,CAAC;QAAEzB;MAAF,CAAD,CAJf,CAbJ,CANF,EA2BG4C,QAAQ,GAAG,IAAH,GACPnC,oBAACI,sBAAS2I,IAAV;QACEvJ,KAAK,EAAE,CACLwI,MAAM,CAACoD,YADF,EAEL;UAAE/C,OAAO,EAAE6B;QAAX,CAFK;MADT,GAMGrJ,WAAW,GACVA,WAAW,CAAC;QACVtB,KADU,EACVA,KADU;QAEV6I,OAAO,EAAE,KAFC;QAGV/G,KAAK,EAAE0F;MAHG,CAAD,CADD,GAOV/G,oBAACqL,aAAD;QACEC,qBAAqB,EACnB/I,0BAFJ;QAIEiJ,UAAU,EAAE,KAJd;QAKEhM,KAAK,EAAE,CACLwI,MAAM,CAACuD,KADF,EAEL;UAAElK,KAAK,EAAE0F;QAAT,CAFK;MALT,GAUG/F,YAAY,CAAC;QAAEzB;MAAF,CAAD,CAVf,CAbJ,CA5BJ,CADM,GA2DNS,oBAACI,iBAAD;QAAMZ,KAAK,EAAEwI,MAAM,CAACmD;MAApB,EA3HJ;IAlBmB,CAAD,CAAtB;EAlCD,EA7CH,CADF,CAhCF,CAlDF,CADF;AA/QF;;AAilBA1K,gBAAgB,CAACgL,QAAjBhL,GAA6BiL,gBAAD,EAKtB;EACJ,OAAO;IAAA,IACLnM,KADK,UACLA,KADK;IAAA,IAELiG,MAFK,UAELA,MAFK;IAAA,OAOLxF,oBAACK,cAAD;MACEuC,GAAG,EAAErD,KAAK,CAACqD,GADb;MAEErC,SAAS,EAAEmL,MAAM,CAACnM,KAAK,CAACqD,GAANrD,GAAYA,KAAK,CAACqD,GAAlBrD,GAAwB,EAAzB,CAFnB;MAGEA,KAAK,EAAEA,KAHT;MAIEiG,MAAM,EAAEA;IAJV,EAPK;EAAP;AANF;;eAsBe,wBAAU/E,gBAAV;;;;AAEf,IAAMuH,MAAM,GAAGlC,wBAAW6F,MAAX7F,CAAkB;EAC/BmC,SAAS,EAAE;IACT2D,IAAI,EAAE,CADG;IAETC,QAAQ,EAAE;EAFD,CADoB;EAK/B3D,OAAO,EAAE;IACP0D,IAAI,EAAE;EADC,CALsB;EAQ/B3C,GAAG,EAAE;IACHpB,IAAI,EAAE,CADH;IAEHC,KAAK,EAAE,CAFJ;IAGHC,MAAM,EAAE,CAHL;IAIH7B,SAAS,EAAE;EAJR,CAR0B;EAc/BqD,UAAU,EAAE;IACVuC,UAAU,EAAE,QADF;IAEVD,QAAQ,EAAE;EAFA,CAdmB;EAkB/BrC,KAAK;IACHuC,aAAa,EAAE;EADZ,GAEC5M,sBAASC,EAATD,KAAgB,KAAhBA,GACA;IACEsI,KAAK,EAAE;EADT,CADAtI,GAIA,IAND,CAlB0B;EA0B/BqL,IAAI,EAAE;IACJoB,IAAI,EAAE,CADF;IAIJI,eAAe,EAAE;EAJb,CA1ByB;EAgC/BlC,MAAM,EAAE;IACNT,QAAQ,EAAE;EADJ,CAhCuB;EAmC/BoB,aAAa,EAAE;IACbrB,MAAM,EAAE,EADK;IAEb3B,KAAK,EAAE,EAFM;IAGbwE,SAAS,EAAE,CAHE;IAIbvC,gBAAgB,EAAE,EAJL;IAKbwC,SAAS,EAAE;EALE,CAnCgB;EA0C/BxB,WAAW,6BACN5E,wBAAWqG,kBADL;IAETL,UAAU,EAAE;EAFH,EA1CoB;EA8C/BX,cAAc,EAAE;IACd/B,MAAM,EAAE,EADM;IAEdgD,aAAa,EAAE;EAFD,CA9Ce;EAkD/BhB,YAAY,6BACPtF,wBAAWqG,kBADJ,CAlDmB;EAsD/BZ,KAAK;IACHc,QAAQ,EAAE,EADP;IAEHjD,MAAM,EAAEpK,UAFL;IAGHsN,SAAS,EAAE,QAHR;IAIHrG,eAAe,EAAE;EAJd,GAKC9G,sBAASC,EAATD,KAAgB,KAAhBA,GACA;IACEoN,UAAU,EAAE,QADd;IAEEL,SAAS,EAAE;EAFb,CADA/M,GAKA,IAVD,CAtD0B;EAkE/B4L,cAAc,EAAE;IACd1B,QAAQ,EAAE,UADI;IAEdxB,IAAI,EAAE,CAFQ;IAGdS,GAAG,EAAE,CAAC;EAHQ;AAlEe,CAAlBxC,CAAf","names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","Platform","OS","Touchable","_0","route","style","children","borderless","centered","rippleColor","rest","TouchableRipple","supported","React","_TouchableRipple","disabled","undefined","_reactNative","SceneComponent","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","color","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","labelMaxFontSizeMultiplier","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","useState","loaded","setLoaded","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","Animated","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","onShow","onHide","prevNavigationState","useRef","current","_prevNavigationState$","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","isDarkTheme","dark","mode","StyleSheet","flatten","customBackground","backgroundColor","elevation","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","white","black","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","_BottomNavigationRouteScreen","pointerEvents","accessibilityElementsHidden","importantForAccessibility","visibility","absoluteFill","collapsable","removeClippedSubviews","View","_Surface","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","accessibilityRole","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityState","selected","item","iconContainer","iconWrapper","_Icon","source","icon","size","badgeContainer","String","_Badge","visible","labelContainer","labelWrapper","_Text","maxFontSizeMultiplier","label","selectable","SceneMap","scenes","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"sources":["BottomNavigation.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                maxFontSizeMultiplier={\n                                  labelMaxFontSizeMultiplier\n                                }\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]}