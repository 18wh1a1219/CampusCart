{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAWR;EAAA,IAVXC,IAUW,QAVXA,IAUW;EAAA,IATXC,IASW,QATXA,IASW;EAAA,IARXC,KAQW,QARXA,KAQW;EAAA,IAPXC,kBAOW,QAPXA,kBAOW;EAAA,IANXC,QAMW,QANXA,QAMW;EAAA,IALXC,KAKW,QALXA,KAKW;EAAA,IAJXC,KAIW,QAJXA,KAIW;EAAA,IAHXC,MAGW,QAHXA,MAGW;EAAA,IAFXC,QAEW,QAFXA,OAEW;EAAA,IADRC,IACQ;EACX,IAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;EAEA,OACEC,oBAACC,4CAAyBC,QAA1B,QACIC,iBAAD,EAAuE;IACtE,IAAIC,eAAJ;IAEA,IAAMC,OAAuB,GAC1BF,OAAO,IAAIA,OAAO,CAACT,KAARS,KAAkBT,KAA7BS,IAAuCR,MAAM,KAAK,SADrD;;IAGA,IAAIU,OAAJ,EAAa;MACXD,eAAe,GAAGd,KAAK,CAACgB,IAANhB,GACd,0BADcA,GAEd,oBAFJc;IADF,OAIO;MACLA,eAAe,GAAG,aAAlBA;IACD;;IAED,OACEJ,oBAACO,mBAAD;MACEC,UAAU,EAAE,KADd;MAEEpB,IAAI,EAAEA,IAFR;MAGEQ,OAAO,EAAGa,kBAAD,EAAwC;QAC/C,IAAIb,QAAJ,EAAa;UACXA,QAAO,CAACa,CAAD,CAAPb;QACD;;QAED,IAAIO,OAAJ,EAAa;UACXA,OAAO,CAACO,aAARP,CAAsB,CAACE,OAAD,GAAWX,KAAX,GAAmB,IAAzCS;QACD;MAVL;MAYEd,IAAI,EAAEA,IAZR;MAaEE,kBAAkB,EAAEA,kBAbtB;MAcEoB,kBAAkB,EAAE;QAAEnB,QAAF,EAAEA,QAAF;QAAYoB,QAAQ,EAAEP;MAAtB,CAdtB;MAeEb,QAAQ,EAAEA,QAfZ;MAgBEC,KAAK,EAAE,CACLoB,MAAM,CAACC,OADF,EAEL;QACEV,eADF,EACEA,eADF;QAEEN,YAFF,EAEEA,YAFF;QAGEiB,WAAW,EAAE,oBAAMzB,KAAK,CAACgB,IAANhB,GAAa0B,aAAb1B,GAAqB2B,aAA3B,EACVC,KADU,CACJ,IADI,EAEVC,GAFU,GAGVC,MAHU;MAHf,CAFK,EAUL3B,KAVK;IAhBT,GA4BMI,IA5BN,EADF;EAfJ,EADF;AAdF;;AAmEA,IAAMgB,MAAM,GAAGQ,wBAAWC,MAAXD,CAAkB;EAC/BP,OAAO,EAAE;IACPS,KAAK,EAAE,EADA;IAEPC,MAAM,EAAE,EAFD;IAGPC,MAAM,EAAE;EAHD;AADsB,CAAlBJ,CAAf;;eAQe,wBAAUlC,YAAV;;;AAGf,IAAMuC,qBAAqB,GAAG,wBAAUvC,YAAV,CAA9B","names":["ToggleButton","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","React","_ToggleButtonGroup","Consumer","context","backgroundColor","checked","dark","_IconButton","borderless","e","onValueChange","accessibilityState","selected","styles","content","borderColor","white","black","alpha","rgb","string","StyleSheet","create","width","height","margin","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]}