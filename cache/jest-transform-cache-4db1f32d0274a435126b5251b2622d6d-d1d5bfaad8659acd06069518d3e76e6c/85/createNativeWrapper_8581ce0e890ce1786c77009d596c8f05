69735ca106474abfb94ff0396f848939
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createNativeWrapper;

var React = _interopRequireWildcard(require("react"));

var _NativeViewGestureHandler = require("./NativeViewGestureHandler");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var NATIVE_WRAPPER_PROPS_FILTER = [].concat((0, _toConsumableArray2.default)(_NativeViewGestureHandler.nativeViewProps), ['onGestureHandlerEvent', 'onGestureHandlerStateChange']);

function createNativeWrapper(Component) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var ComponentWrapper = React.forwardRef(function (props, ref) {
    var gestureHandlerProps = Object.keys(props).reduce(function (res, key) {
      var allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;

      if (allowedKeys.includes(key)) {
        res[key] = props[key];
      }

      return res;
    }, (0, _extends3.default)({}, config));

    var _ref = (0, React.useRef)();

    var _gestureHandlerRef = (0, React.useRef)();

    (0, React.useImperativeHandle)(ref, function () {
      var node = _gestureHandlerRef.current;

      if (_ref.current && node) {
        _ref.current.handlerTag = node.handlerTag;
        return _ref.current;
      }

      return null;
    }, [_ref, _gestureHandlerRef]);
    return React.createElement(_NativeViewGestureHandler.NativeViewGestureHandler, _extends({}, gestureHandlerProps, {
      ref: _gestureHandlerRef
    }), React.createElement(Component, _extends({}, props, {
      ref: _ref
    })));
  });
  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';
  return ComponentWrapper;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFhQSxJQUFNQSwyQkFBMkIsOENBQzVCQyx5Q0FENEIsSUFFL0IsdUJBRitCLEVBRy9CLDZCQUgrQixFQUFqQzs7QUFNZSxTQUFTQyxtQkFBVCxDQUNiQyxTQURhLEVBR2I7RUFBQSxJQURBQyxNQUNBLHVFQURrRCxFQUNsRDtFQUNBLElBQU1DLGdCQUFnQixHQUFHQyxLQUFLLENBQUNDLFVBQU5ELENBR3ZCLFVBQUNFLEtBQUQsRUFBUUMsR0FBUixFQUFnQjtJQUVoQixJQUFNQyxtQkFBbUIsR0FBR0MsTUFBTSxDQUFDQyxJQUFQRCxDQUFZSCxLQUFaRyxFQUFtQkUsTUFBbkJGLENBQzFCLFVBQUNHLEdBQUQsRUFBTUMsR0FBTixFQUFjO01BRVosSUFBTUMsV0FBOEIsR0FBR2hCLDJCQUF2Qzs7TUFDQSxJQUFJZ0IsV0FBVyxDQUFDQyxRQUFaRCxDQUFxQkQsR0FBckJDLENBQUosRUFBK0I7UUFFN0JGLEdBQUcsQ0FBQ0MsR0FBRCxDQUFIRCxHQUFXTixLQUFLLENBQUNPLEdBQUQsQ0FBaEJEO01BQ0Q7O01BQ0QsT0FBT0EsR0FBUDtJQVJ3Qiw4QkFVckJWLE1BVnFCTyxFQUE1Qjs7SUFZQSxJQUFNTyxJQUFJLEdBQUcsbUJBQWI7O0lBQ0EsSUFBTUMsa0JBQWtCLEdBQUcsbUJBQTNCOztJQUNBLCtCQUNFVixHQURGLEVBR0UsWUFBTTtNQUNKLElBQU1XLElBQUksR0FBR0Qsa0JBQWtCLENBQUNFLE9BQWhDOztNQUVBLElBQUlILElBQUksQ0FBQ0csT0FBTEgsSUFBZ0JFLElBQXBCLEVBQTBCO1FBRXhCRixJQUFJLENBQUNHLE9BQUxILENBQWFJLFVBQWJKLEdBQTBCRSxJQUFJLENBQUNFLFVBQS9CSjtRQUNBLE9BQU9BLElBQUksQ0FBQ0csT0FBWjtNQUNEOztNQUNELE9BQU8sSUFBUDtJQVhKLEdBYUUsQ0FBQ0gsSUFBRCxFQUFPQyxrQkFBUCxDQWJGO0lBZUEsT0FDRWIsb0JBQUNpQixrREFBRCxlQUNNYixtQkFETjtNQUdFRCxHQUFHLEVBQUVVO0lBSFAsSUFJRWIsb0JBQUNILFNBQUQsZUFBZUssS0FBZjtNQUFzQkMsR0FBRyxFQUFFUztJQUEzQixHQUpGLENBREY7RUFsQ3VCLEVBQXpCO0VBNENBYixnQkFBZ0IsQ0FBQ21CLFdBQWpCbkIsR0FBK0JGLFNBQVMsQ0FBQ3FCLFdBQVZyQixJQUF5QixrQkFBeERFO0VBRUEsT0FBT0EsZ0JBQVA7QUFDRCIsIm5hbWVzIjpbIk5BVElWRV9XUkFQUEVSX1BST1BTX0ZJTFRFUiIsIm5hdGl2ZVZpZXdQcm9wcyIsImNyZWF0ZU5hdGl2ZVdyYXBwZXIiLCJDb21wb25lbnQiLCJjb25maWciLCJDb21wb25lbnRXcmFwcGVyIiwiUmVhY3QiLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJnZXN0dXJlSGFuZGxlclByb3BzIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsInJlcyIsImtleSIsImFsbG93ZWRLZXlzIiwiaW5jbHVkZXMiLCJfcmVmIiwiX2dlc3R1cmVIYW5kbGVyUmVmIiwibm9kZSIsImN1cnJlbnQiLCJoYW5kbGVyVGFnIiwiX05hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlciIsImRpc3BsYXlOYW1lIl0sInNvdXJjZXMiOlsiY3JlYXRlTmF0aXZlV3JhcHBlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSW1wZXJhdGl2ZUhhbmRsZSwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIsXG4gIE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlclByb3BzLFxuICBuYXRpdmVWaWV3UHJvcHMsXG59IGZyb20gJy4vTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyJztcblxuLypcbiAqIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnNpc3Qgb2Y6XG4gKiAgIC0gQWxsIGtleXMgaW4gcHJvcFR5cGVzIGZyb20gTmF0aXZlR2VzdHVyZUhhbmRsZXJcbiAqICAgICAoYW5kIGFsbCBrZXlzIGluIEdlc3R1cmVIYW5kbGVyUHJvcFR5cGVzKVxuICogICAtICdvbkdlc3R1cmVIYW5kbGVyRXZlbnQnXG4gKiAgIC0gJ29uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZSdcbiAqL1xuY29uc3QgTkFUSVZFX1dSQVBQRVJfUFJPUFNfRklMVEVSID0gW1xuICAuLi5uYXRpdmVWaWV3UHJvcHMsXG4gICdvbkdlc3R1cmVIYW5kbGVyRXZlbnQnLFxuICAnb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlJyxcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU5hdGl2ZVdyYXBwZXI8UD4oXG4gIENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxQPixcbiAgY29uZmlnOiBSZWFkb25seTxOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXJQcm9wcz4gPSB7fVxuKSB7XG4gIGNvbnN0IENvbXBvbmVudFdyYXBwZXIgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICAgIFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PixcbiAgICBQICYgTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyUHJvcHNcbiAgPigocHJvcHMsIHJlZikgPT4ge1xuICAgIC8vIGZpbHRlciBvdXQgcHJvcHMgdGhhdCBzaG91bGQgYmUgcGFzc2VkIHRvIGdlc3R1cmUgaGFuZGxlciB3cmFwcGVyXG4gICAgY29uc3QgZ2VzdHVyZUhhbmRsZXJQcm9wcyA9IE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoXG4gICAgICAocmVzLCBrZXkpID0+IHtcbiAgICAgICAgLy8gVFMgYmVpbmcgb3Zlcmx5IHByb3RlY3RpdmUgd2l0aCBpdCdzIHR5cGVzLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8yNjI1NSNpc3N1ZWNvbW1lbnQtNDU4MDEzNzMxIGZvciBtb3JlIGluZm9cbiAgICAgICAgY29uc3QgYWxsb3dlZEtleXM6IHJlYWRvbmx5IHN0cmluZ1tdID0gTkFUSVZFX1dSQVBQRVJfUFJPUFNfRklMVEVSO1xuICAgICAgICBpZiAoYWxsb3dlZEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmUgRklYTUUoVFMpXG4gICAgICAgICAgcmVzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9LFxuICAgICAgeyAuLi5jb25maWcgfSAvLyB3YXRjaCBvdXQgbm90IHRvIG1vZGlmeSBjb25maWdcbiAgICApO1xuICAgIGNvbnN0IF9yZWYgPSB1c2VSZWY8UmVhY3QuQ29tcG9uZW50VHlwZTxQPj4oKTtcbiAgICBjb25zdCBfZ2VzdHVyZUhhbmRsZXJSZWYgPSB1c2VSZWY8UmVhY3QuQ29tcG9uZW50VHlwZTxQPj4oKTtcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlKFxuICAgICAgcmVmLFxuICAgICAgLy8gQHRzLWlnbm9yZSBUT0RPKFRTKSBkZWNpZGUgaG93IG51bGxzIHdvcmsgaW4gdGhpcyBjb250ZXh0XG4gICAgICAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBfZ2VzdHVyZUhhbmRsZXJSZWYuY3VycmVudDtcbiAgICAgICAgLy8gYWRkIGhhbmRsZXJUYWcgZm9yIHJlbGF0aW9ucyBjb25maWdcbiAgICAgICAgaWYgKF9yZWYuY3VycmVudCAmJiBub2RlKSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSBGSVhNRShUUykgdGhpbmsgYWJvdXQgY3JlYXRlSGFuZGxlciByZXR1cm4gdHlwZVxuICAgICAgICAgIF9yZWYuY3VycmVudC5oYW5kbGVyVGFnID0gbm9kZS5oYW5kbGVyVGFnO1xuICAgICAgICAgIHJldHVybiBfcmVmLmN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgW19yZWYsIF9nZXN0dXJlSGFuZGxlclJlZl1cbiAgICApO1xuICAgIHJldHVybiAoXG4gICAgICA8TmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyXG4gICAgICAgIHsuLi5nZXN0dXJlSGFuZGxlclByb3BzfVxuICAgICAgICAvLyBAdHMtaWdub3JlIFRPRE8oVFMpXG4gICAgICAgIHJlZj17X2dlc3R1cmVIYW5kbGVyUmVmfT5cbiAgICAgICAgPENvbXBvbmVudCB7Li4ucHJvcHN9IHJlZj17X3JlZn0gLz5cbiAgICAgIDwvTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyPlxuICAgICk7XG4gIH0pO1xuXG4gIENvbXBvbmVudFdyYXBwZXIuZGlzcGxheU5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgJ0NvbXBvbmVudFdyYXBwZXInO1xuXG4gIHJldHVybiBDb21wb25lbnRXcmFwcGVyO1xufVxuIl19