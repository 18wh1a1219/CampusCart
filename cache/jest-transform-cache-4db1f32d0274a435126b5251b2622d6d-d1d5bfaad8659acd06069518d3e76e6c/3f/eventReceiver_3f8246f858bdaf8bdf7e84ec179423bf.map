{"version":3,"mappings":"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","names":["gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","dummyStateManager","begin","console","warn","activate","end","fail","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","State","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","EventType","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","_handler$handlers$cha","startListening","stopListening","DeviceEventEmitter","addListener","removeSubscription"],"sources":["eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { findHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\n\nconst dummyStateManager: GestureStateManagerType = {\n  begin: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  activate: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  end: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  fail: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n};\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nfunction onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case EventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, dummyStateManager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    DeviceEventEmitter.removeSubscription(gestureHandlerEventSubscription);\n\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    DeviceEventEmitter.removeSubscription(\n      gestureHandlerStateChangeEventSubscription\n    );\n\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]}