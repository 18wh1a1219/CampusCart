{"version":3,"mappings":"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","names":["Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","React","useRef","Animated","Value","current","elevationDarkAdaptive","animation","dark","roundness","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","white","black","alpha","rgb","string","computedElevation","_Surface","borderRadius","styles","outlined","_reactNative","delayPressIn","disabled","onPressIn","undefined","onPressOut","innerContainer","index","cloneElement","Content","CardContent","Actions","CardActions","Cover","CardCover","Title","CardTitle","StyleSheet","create","flexGrow","flexShrink","borderWidth"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation: computedElevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]}