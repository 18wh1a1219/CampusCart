0e09280ef0e1f48c32f0b021545fa218
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["elevation", "onLongPress", "onPress", "mode", "children", "style", "theme", "testID", "accessible"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _colors = require("../../styles/colors");

var _CardContent = _interopRequireDefault(require("./CardContent"));

var _CardActions = _interopRequireDefault(require("./CardActions"));

var _CardCover2 = _interopRequireDefault(require("./CardCover"));

var _CardTitle2 = _interopRequireDefault(require("./CardTitle"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var Card = function Card(_ref) {
  var _ref$elevation = _ref.elevation,
      cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,
      onLongPress = _ref.onLongPress,
      onPress = _ref.onPress,
      _ref$mode = _ref.mode,
      cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,
      children = _ref.children,
      style = _ref.style,
      theme = _ref.theme,
      testID = _ref.testID,
      accessible = _ref.accessible,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(cardElevation)),
      elevation = _React$useRef.current;

  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(cardElevation)),
      elevationDarkAdaptive = _React$useRef2.current;

  var animation = theme.animation,
      dark = theme.dark,
      mode = theme.mode,
      roundness = theme.roundness;
  var prevDarkRef = React.useRef(dark);
  React.useEffect(function () {
    prevDarkRef.current = dark;
  });
  var prevDark = prevDarkRef.current;
  var isAdaptiveMode = mode === 'adaptive';
  var animationDuration = 150 * animation.scale;
  React.useEffect(function () {
    if (dark && isAdaptiveMode && !prevDark) {
      elevation.setValue(cardElevation);
      elevationDarkAdaptive.setValue(cardElevation);
    }
  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);

  var runElevationAnimation = function runElevationAnimation(pressType) {
    var isPressTypeIn = pressType === 'in';

    if (dark && isAdaptiveMode) {
      _reactNative.Animated.timing(elevationDarkAdaptive, {
        toValue: isPressTypeIn ? 8 : cardElevation,
        duration: animationDuration,
        useNativeDriver: false
      }).start();
    } else {
      _reactNative.Animated.timing(elevation, {
        toValue: isPressTypeIn ? 8 : cardElevation,
        duration: animationDuration,
        useNativeDriver: true
      }).start();
    }
  };

  var handlePressIn = function handlePressIn() {
    runElevationAnimation('in');
  };

  var handlePressOut = function handlePressOut() {
    runElevationAnimation('out');
  };

  var total = React.Children.count(children);
  var siblings = React.Children.map(children, function (child) {
    return React.isValidElement(child) && child.type ? child.type.displayName : null;
  });
  var borderColor = (0, _color.default)(dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;
  return React.createElement(_Surface.default, _extends({
    style: [{
      borderRadius: roundness,
      elevation: computedElevation,
      borderColor: borderColor
    }, cardMode === 'outlined' ? styles.outlined : {}, style],
    theme: theme
  }, rest), React.createElement(_reactNative.TouchableWithoutFeedback, {
    delayPressIn: 0,
    disabled: !(onPress || onLongPress),
    onLongPress: onLongPress,
    onPress: onPress,
    onPressIn: onPress || onLongPress ? handlePressIn : undefined,
    onPressOut: onPress || onLongPress ? handlePressOut : undefined,
    testID: testID,
    accessible: accessible
  }, React.createElement(_reactNative.View, {
    style: styles.innerContainer
  }, React.Children.map(children, function (child, index) {
    return React.isValidElement(child) ? React.cloneElement(child, {
      index: index,
      total: total,
      siblings: siblings
    }) : child;
  }))));
};

Card.Content = _CardContent.default;
Card.Actions = _CardActions.default;
Card.Cover = _CardCover2.default;
Card.Title = _CardTitle2.default;

var styles = _reactNative.StyleSheet.create({
  innerContainer: {
    flexGrow: 1,
    flexShrink: 1
  },
  outlined: {
    elevation: 0,
    borderWidth: 1
  }
});

var _default = (0, _theming.withTheme)(Card);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,