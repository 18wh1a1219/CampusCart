7ed019dcb06e503754e3533752f97a0a
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _AnimatedText = _interopRequireDefault(require("../../Typography/AnimatedText"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var LabelBackground = function LabelBackground(_ref) {
  var parentState = _ref.parentState,
      _ref$labelProps = _ref.labelProps,
      placeholderStyle = _ref$labelProps.placeholderStyle,
      baseLabelTranslateX = _ref$labelProps.baseLabelTranslateX,
      topPosition = _ref$labelProps.topPosition,
      hasActiveOutline = _ref$labelProps.hasActiveOutline,
      label = _ref$labelProps.label,
      backgroundColor = _ref$labelProps.backgroundColor,
      roundness = _ref$labelProps.roundness,
      labelStyle = _ref.labelStyle,
      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;
  var hasFocus = hasActiveOutline || parentState.value;
  var opacity = parentState.labeled.interpolate({
    inputRange: [0, 1],
    outputRange: [hasFocus ? 1 : 0, 0]
  });
  var labelTranslationX = {
    transform: [{
      translateX: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [-baseLabelTranslateX, 0]
      })
    }]
  };
  return label ? [React.createElement(_reactNative.Animated.View, {
    key: "labelBackground-view",
    pointerEvents: "none",
    style: [_reactNative.StyleSheet.absoluteFill, styles.view, {
      backgroundColor: backgroundColor,
      maxHeight: Math.max(roundness / 3, 2),
      opacity: opacity,
      bottom: Math.max(roundness, 2)
    }, labelTranslationX]
  }), React.createElement(_AnimatedText.default, {
    key: "labelBackground-text",
    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {
      top: topPosition + 1,
      backgroundColor: backgroundColor,
      opacity: opacity,
      transform: [].concat((0, _toConsumableArray2.default)(labelStyle.transform), [{
        scaleY: parentState.labeled.interpolate({
          inputRange: [0, 1],
          outputRange: [0.2, 1]
        })
      }]),
      maxWidth: parentState.labelLayout.width - 2 * placeholderStyle.paddingHorizontal
    }],
    numberOfLines: 1,
    maxFontSizeMultiplier: maxFontSizeMultiplier
  }, label)] : null;
};

var _default = LabelBackground;
exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  view: {
    position: 'absolute',
    top: 6,
    left: 10,
    width: 12
  },
  outlinedLabel: {
    position: 'absolute',
    left: 18,
    paddingHorizontal: 0,
    color: 'transparent'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBSkssQ0FGVDtJQXdCRUMsYUFBYSxFQUFFLENBeEJqQjtJQXlCRWpDLHFCQUFxQixFQUFFQTtFQXpCekIsR0EyQkdKLEtBM0JILENBaEJGLENBRFEsR0ErQ1IsSUEvQ0o7QUEvQkY7O2VBaUZlUDs7O0FBRWYsSUFBTThCLE1BQU0sR0FBR0Ysd0JBQVdpQixNQUFYakIsQ0FBa0I7RUFDL0JHLElBQUksRUFBRTtJQUNKZSxRQUFRLEVBQUUsVUFETjtJQUVKUixHQUFHLEVBQUUsQ0FGRDtJQUdKUyxJQUFJLEVBQUUsRUFIRjtJQUlKTCxLQUFLLEVBQUU7RUFKSCxDQUR5QjtFQU8vQkwsYUFBYSxFQUFFO0lBQ2JTLFFBQVEsRUFBRSxVQURHO0lBRWJDLElBQUksRUFBRSxFQUZPO0lBR2JKLGlCQUFpQixFQUFFLENBSE47SUFJYkssS0FBSyxFQUFFO0VBSk07QUFQZ0IsQ0FBbEJwQixDQUFmIiwibmFtZXMiOlsiTGFiZWxCYWNrZ3JvdW5kIiwicGFyZW50U3RhdGUiLCJsYWJlbFByb3BzIiwicGxhY2Vob2xkZXJTdHlsZSIsImJhc2VMYWJlbFRyYW5zbGF0ZVgiLCJ0b3BQb3NpdGlvbiIsImhhc0FjdGl2ZU91dGxpbmUiLCJsYWJlbCIsImJhY2tncm91bmRDb2xvciIsInJvdW5kbmVzcyIsImxhYmVsU3R5bGUiLCJtYXhGb250U2l6ZU11bHRpcGxpZXIiLCJoYXNGb2N1cyIsInZhbHVlIiwib3BhY2l0eSIsImxhYmVsZWQiLCJpbnRlcnBvbGF0ZSIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsImxhYmVsVHJhbnNsYXRpb25YIiwidHJhbnNmb3JtIiwidHJhbnNsYXRlWCIsIlJlYWN0IiwiX3JlYWN0TmF0aXZlIiwiVmlldyIsImtleSIsInBvaW50ZXJFdmVudHMiLCJzdHlsZSIsIlN0eWxlU2hlZXQiLCJhYnNvbHV0ZUZpbGwiLCJzdHlsZXMiLCJ2aWV3IiwibWF4SGVpZ2h0IiwiTWF0aCIsIm1heCIsImJvdHRvbSIsIl9BbmltYXRlZFRleHQiLCJvdXRsaW5lZExhYmVsIiwidG9wIiwic2NhbGVZIiwibWF4V2lkdGgiLCJsYWJlbExheW91dCIsIndpZHRoIiwicGFkZGluZ0hvcml6b250YWwiLCJudW1iZXJPZkxpbmVzIiwiY3JlYXRlIiwicG9zaXRpb24iLCJsZWZ0IiwiY29sb3IiXSwic291cmNlcyI6WyJMYWJlbEJhY2tncm91bmQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEFuaW1hdGVkLCBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IEFuaW1hdGVkVGV4dCBmcm9tICcuLi8uLi9UeXBvZ3JhcGh5L0FuaW1hdGVkVGV4dCc7XG5cbmltcG9ydCB0eXBlIHsgTGFiZWxCYWNrZ3JvdW5kUHJvcHMgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IExhYmVsQmFja2dyb3VuZCA9ICh7XG4gIHBhcmVudFN0YXRlLFxuICBsYWJlbFByb3BzOiB7XG4gICAgcGxhY2Vob2xkZXJTdHlsZSxcbiAgICBiYXNlTGFiZWxUcmFuc2xhdGVYLFxuICAgIHRvcFBvc2l0aW9uLFxuICAgIGhhc0FjdGl2ZU91dGxpbmUsXG4gICAgbGFiZWwsXG4gICAgYmFja2dyb3VuZENvbG9yLFxuICAgIHJvdW5kbmVzcyxcbiAgfSxcbiAgbGFiZWxTdHlsZSxcbiAgbWF4Rm9udFNpemVNdWx0aXBsaWVyLFxufTogTGFiZWxCYWNrZ3JvdW5kUHJvcHMpID0+IHtcbiAgY29uc3QgaGFzRm9jdXMgPSBoYXNBY3RpdmVPdXRsaW5lIHx8IHBhcmVudFN0YXRlLnZhbHVlO1xuICBjb25zdCBvcGFjaXR5ID0gcGFyZW50U3RhdGUubGFiZWxlZC5pbnRlcnBvbGF0ZSh7XG4gICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgIG91dHB1dFJhbmdlOiBbaGFzRm9jdXMgPyAxIDogMCwgMF0sXG4gIH0pO1xuXG4gIGNvbnN0IGxhYmVsVHJhbnNsYXRpb25YID0ge1xuICAgIHRyYW5zZm9ybTogW1xuICAgICAge1xuICAgICAgICB0cmFuc2xhdGVYOiBwYXJlbnRTdGF0ZS5sYWJlbGVkLmludGVycG9sYXRlKHtcbiAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgb3V0cHV0UmFuZ2U6IFstYmFzZUxhYmVsVHJhbnNsYXRlWCwgMF0sXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xuXG4gIHJldHVybiBsYWJlbFxuICAgID8gW1xuICAgICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICAgIGtleT1cImxhYmVsQmFja2dyb3VuZC12aWV3XCJcbiAgICAgICAgICBwb2ludGVyRXZlbnRzPVwibm9uZVwiXG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIFN0eWxlU2hlZXQuYWJzb2x1dGVGaWxsLFxuICAgICAgICAgICAgc3R5bGVzLnZpZXcsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgbWF4SGVpZ2h0OiBNYXRoLm1heChyb3VuZG5lc3MgLyAzLCAyKSxcbiAgICAgICAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgICAgICAgYm90dG9tOiBNYXRoLm1heChyb3VuZG5lc3MsIDIpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhYmVsVHJhbnNsYXRpb25YLFxuICAgICAgICAgIF19XG4gICAgICAgIC8+LFxuICAgICAgICA8QW5pbWF0ZWRUZXh0XG4gICAgICAgICAga2V5PVwibGFiZWxCYWNrZ3JvdW5kLXRleHRcIlxuICAgICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgICBwbGFjZWhvbGRlclN0eWxlLFxuICAgICAgICAgICAgbGFiZWxTdHlsZSxcbiAgICAgICAgICAgIHN0eWxlcy5vdXRsaW5lZExhYmVsLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0b3A6IHRvcFBvc2l0aW9uICsgMSxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICBvcGFjaXR5LFxuICAgICAgICAgICAgICB0cmFuc2Zvcm06IFtcbiAgICAgICAgICAgICAgICAuLi5sYWJlbFN0eWxlLnRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzY2FsZVk6IHBhcmVudFN0YXRlLmxhYmVsZWQuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFJhbmdlOiBbMC4yLCAxXSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIG1heFdpZHRoOlxuICAgICAgICAgICAgICAgIHBhcmVudFN0YXRlLmxhYmVsTGF5b3V0LndpZHRoIC1cbiAgICAgICAgICAgICAgICAyICogcGxhY2Vob2xkZXJTdHlsZS5wYWRkaW5nSG9yaXpvbnRhbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXX1cbiAgICAgICAgICBudW1iZXJPZkxpbmVzPXsxfVxuICAgICAgICAgIG1heEZvbnRTaXplTXVsdGlwbGllcj17bWF4Rm9udFNpemVNdWx0aXBsaWVyfVxuICAgICAgICA+XG4gICAgICAgICAge2xhYmVsfVxuICAgICAgICA8L0FuaW1hdGVkVGV4dD4sXG4gICAgICBdXG4gICAgOiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGFiZWxCYWNrZ3JvdW5kO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHZpZXc6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDYsXG4gICAgbGVmdDogMTAsXG4gICAgd2lkdGg6IDEyLFxuICB9LFxuICBvdXRsaW5lZExhYmVsOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbGVmdDogMTgsXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDAsXG4gICAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIH0sXG59KTtcbiJdfQ==