b81c69638b61b71e723ad159107c02c4
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = _interopRequireDefault(require("react-native"));

var _ = _interopRequireDefault(require("./"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Text = _reactNative.default.Text,
    TouchableWithoutFeedback = _reactNative.default.TouchableWithoutFeedback,
    View = _reactNative.default.View,
    Platform = _reactNative.default.Platform;

var SegmentedControls = function (_React$Component) {
  (0, _inherits2.default)(SegmentedControls, _React$Component);

  var _super = _createSuper(SegmentedControls);

  function SegmentedControls() {
    (0, _classCallCheck2.default)(this, SegmentedControls);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(SegmentedControls, [{
    key: "render",
    value: function render() {
      var config = this.getConfig();
      return _react.default.createElement(_.default, (0, _extends2.default)({}, this.props, {
        renderOption: this.renderOption.bind(this, config),
        renderContainer: this.renderContainer.bind(this, config)
      }));
    }
  }, {
    key: "getConfig",
    value: function getConfig() {
      var tint = this.props.tint || DEFAULTS.tint;
      var backTint = this.props.backTint || DEFAULTS.backTint;
      var colors = {
        tint: tint,
        selectedTint: backTint,
        backgroundColor: backTint,
        selectedBackgroundColor: tint,
        containerBorderTint: tint,
        separatorTint: tint
      };
      return (0, _extends2.default)({}, DEFAULTS, colors, this.props);
    }
  }, {
    key: "renderContainer",
    value: function renderContainer(config, options) {
      var baseContainerStyle = {
        flexDirection: config.direction,
        backgroundColor: config.backgroundColor,
        borderColor: config.containerBorderTint,
        borderWidth: config.containerBorderWidth,
        overflow: 'hidden'
      };
      baseContainerStyle.borderRadius = config.containerBorderRadius;
      var containerStyle = [baseContainerStyle, this.props.containerStyle];
      return _react.default.createElement(View, {
        style: containerStyle
      }, options);
    }
  }, {
    key: "renderOption",
    value: function renderOption(config, option, selected, onSelect, index) {
      var disabled = this.props.enabled === false;
      var baseTextStyle = {
        textAlign: config.textAlign
      };
      var normalTextStyle = [baseTextStyle, this.props.optionStyle, {
        color: config.tint
      }];
      var selectedTextStyle = [baseTextStyle, this.props.optionStyle, {
        color: config.selectedTint
      }];
      var baseColor = selected ? config.selectedBackgroundColor : config.backgroundColor;
      var opacity = disabled ? 0.5 : 1.0;
      var baseOptionContainerStyle = [{
        paddingTop: config.paddingTop,
        paddingBottom: config.paddingBottom,
        backgroundColor: baseColor,
        opacity: opacity
      }, config.direction === 'row' && {
        flex: 1
      }];
      var borderStyles = config.direction === 'row' ? {
        borderLeftWidth: config.separatorWidth,
        borderLeftColor: config.separatorTint
      } : {
        borderTopWidth: config.separatorWidth,
        borderTopColor: config.separatorTint
      };
      var separatorStyle = [baseOptionContainerStyle, borderStyles];
      var containerBorderRadius = config.containerBorderRadius,
          containerBorderWidth = config.containerBorderWidth;
      var borderRadiusStyle;

      if (Platform.OS === "android" && containerBorderRadius) {
        var adjustedBorderRadius = containerBorderRadius - containerBorderWidth;

        if (this.props.options.length > 1) {
          if (index === 0) {
            borderRadiusStyle = config.direction === 'row' ? {
              borderTopLeftRadius: adjustedBorderRadius,
              borderBottomLeftRadius: adjustedBorderRadius
            } : {
              borderTopLeftRadius: adjustedBorderRadius,
              borderTopRightRadius: adjustedBorderRadius
            };
          } else if (index === this.props.options.length - 1) {
            borderRadiusStyle = config.direction === 'row' ? {
              borderTopRightRadius: adjustedBorderRadius,
              borderBottomRightRadius: adjustedBorderRadius
            } : {
              borderBottomLeftRadius: adjustedBorderRadius,
              borderBottomRightRadius: adjustedBorderRadius
            };
          }

          if (index === this.props.options.length - 2) {
            borderRadiusStyle = config.direction === 'row' ? {
              borderRightWidth: config.separatorWidth,
              borderRightColor: config.separatorTint
            } : {
              borderBottomWidth: config.separatorWidth,
              borderBottomColor: config.separatorTint
            };
          }
        } else {
          borderRadiusStyle = {
            borderRadius: adjustedBorderRadius
          };
        }
      }

      var textStyle = selected ? selectedTextStyle : normalTextStyle;
      var label = this.props.extractText ? this.props.extractText(option) : option;
      var scaleFont = this.props.allowFontScaling === false ? false : true;
      return _react.default.createElement(TouchableWithoutFeedback, {
        onPress: onSelect,
        key: index,
        disabled: disabled
      }, _react.default.createElement(View, {
        style: [index > 0 ? separatorStyle : baseOptionContainerStyle, this.props.optionContainerStyle, borderRadiusStyle]
      }, typeof this.props.renderOption === 'function' ? this.props.renderOption.call(this, option, selected) : _react.default.createElement(Text, {
        allowFontScaling: scaleFont,
        style: textStyle
      }, label)));
    }
  }]);
  return SegmentedControls;
}(_react.default.Component);

var IOS_BLUE = '#007AFF';
var IOS_WHITE = '#ffffff';
var DEFAULTS = {
  direction: 'row',
  tint: IOS_BLUE,
  backTint: IOS_WHITE,
  paddingTop: 5,
  paddingBottom: 5,
  textAlign: 'center',
  selectedTint: IOS_WHITE,
  selectedBackgroundColor: IOS_WHITE,
  separatorTint: IOS_BLUE,
  separatorWidth: 1,
  containerBorderTint: IOS_BLUE,
  containerBorderWidth: 1,
  containerBorderRadius: 5
};
var _default = SegmentedControls;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,