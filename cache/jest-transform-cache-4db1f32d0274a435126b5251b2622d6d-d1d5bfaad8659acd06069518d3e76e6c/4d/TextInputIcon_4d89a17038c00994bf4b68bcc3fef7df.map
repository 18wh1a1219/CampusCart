{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BO,IAAMA,SAAS,GAAG,EAAlB;;AACP,IAAMC,WAAW,GAAG,EAApB;;AAQA,IAAMC,YAAY,GAAGC,eAAMC,aAAND,CAAsC;EACzDE,KAAK,EAAE,EADkD;EAEzDC,kBAAkB,EAAE,KAFqC;EAGzDC,UAAU,EAAE,sBAAM,CAAE;AAHqC,CAAtCJ,CAArB;;AAMA,IAAMK,aAOL,GAAG,SAPEA,aAOF,OAAiE;EAAA,IAA9DC,IAA8D,QAA9DA,IAA8D;EAAA,IAAxDC,WAAwD,QAAxDA,WAAwD;EAAA,IAA3CC,IAA2C,QAA3CA,IAA2C;EAAA,IAArCL,kBAAqC,QAArCA,kBAAqC;EAAA,IAAjBC,UAAiB,QAAjBA,UAAiB;EACnE,IAAMF,KAAK;IACTO,GAAG,EAAEF;EADI,GAERC,IAFQ,EAEDV,WAFC,CAAX;EAIA,IAAMY,YAAY,GAAG;IAAER,KAAF,EAAEA,KAAF;IAASC,kBAAT,EAASA,kBAAT;IAA6BC;EAA7B,CAArB;EAEA,OACEO,6BAACZ,YAAD,CAAca,QAAd;IAAuBC,KAAK,EAAEH;EAA9B,GAA6CJ,IAA7C,CADF;AAdF;;;;AAiDA,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,QAMT;EAAA,IALXC,IAKW,SALXA,IAKW;EAAA,IAJXC,OAIW,SAJXA,OAIW;EAAA,IAHXC,mBAGW,SAHXA,mBAGW;EAAA,IAFXC,KAEW,SAFXA,KAEW;EAAA,IADRC,IACQ;;EACX,4BACEnB,eAAMoB,UAANpB,CAAiBD,YAAjBC,CADF;EAAA,IAAQE,KAAR,yBAAQA,KAAR;EAAA,IAAeC,kBAAf,yBAAeA,kBAAf;EAAA,IAAmCC,UAAnC,yBAAmCA,UAAnC;;EAGA,IAAMiB,uBAAuB,GAAGrB,eAAMsB,WAANtB,CAAkB,YAAM;IACtD,IAAIiB,mBAAmB,IAAI,CAACd,kBAA5B,EAAgD;MAC9CC,UAAU;IACX;;IACDY,OAAO,SAAPA,WAAO,WAAPA,mBAAO,EAAPA;EAJ8B,GAK7B,CAACC,mBAAD,EAAsBb,UAAtB,EAAkCD,kBAAlC,EAAsDa,OAAtD,CAL6BhB,CAAhC;;EAOA,OACEW,6BAACY,iBAAD;IAAMrB,KAAK,EAAE,CAACsB,MAAM,CAACC,SAAR,EAAmBvB,KAAnB;EAAb,GACES,6BAACe,mBAAD;IACEpB,IAAI,EAAES,IADR;IAEEb,KAAK,EAAEsB,MAAM,CAACG,UAFhB;IAGEC,IAAI,EAAE/B,SAHR;IAIEmB,OAAO,EAAEK,uBAJX;IAKEH,KAAK,EAAE,OAAOA,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACf,kBAAD,CAAnC,GAA0De;EALnE,GAMMC,IANN,EADF,CADF;AAjBF;;AA8BAL,aAAa,CAACe,WAAdf,GAA4B,gBAA5BA;AAEAA,aAAa,CAACgB,YAAdhB,GAA6B;EAC3BG,mBAAmB,EAAE;AADM,CAA7BH;;AAIA,IAAMU,MAAM,GAAGO,wBAAWC,MAAXD,CAAkB;EAC/BN,SAAS,EAAE;IACTQ,QAAQ,EAAE,UADD;IAETC,KAAK,EAAErC,SAFE;IAGTsC,MAAM,EAAEtC,SAHC;IAITuC,cAAc,EAAE,QAJP;IAKTC,UAAU,EAAE;EALH,CADoB;EAQ/BV,UAAU,EAAE;IACVW,MAAM,EAAE;EADE;AARmB,CAAlBP,CAAf;;eAaejB","names":["ICON_SIZE","ICON_OFFSET","StyleContext","React","createContext","style","isTextInputFocused","forceFocus","IconAdornment","icon","topPosition","side","top","contextState","_react","Provider","value","TextInputIcon","name","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","_reactNative","styles","container","_IconButton","iconButton","size","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"sources":["TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\nimport type { IconSource } from '../../Icon';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * Icon to show.\n   */\n  name: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon name=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        color={typeof color === 'function' ? color(isTextInputFocused) : color}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]}