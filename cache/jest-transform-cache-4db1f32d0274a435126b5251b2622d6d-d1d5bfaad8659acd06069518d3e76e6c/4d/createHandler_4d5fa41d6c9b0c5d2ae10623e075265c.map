{"version":3,"mappings":"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","names":["UIManagerAny","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","_UIManagerAny$getView2","getConstants","_UIManagerAny$getCons","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","Platform","OS","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","node","viewNode","child","React","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","handlerIDToTag","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","componentDidUpdate","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","Component"],"sources":["createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]}