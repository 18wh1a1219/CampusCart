8c8befacc49d4a8f6899fcbc9b3213e5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggingOut = loggingOut;
exports.post = post;
exports.registration = registration;
exports.signIn = signIn;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _firebase = _interopRequireDefault(require("firebase"));

var _reactNative = require("react-native");

function registration(email, password, fullName, phone, address) {
  var currentUser, db;
  return _regenerator.default.async(function registration$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return _regenerator.default.awrap(_firebase.default.auth().createUserWithEmailAndPassword(email, password).then(function (userCredential) {
            userCredential.user.sendEmailVerification();

            _reactNative.Alert.alert("Email sent");
          }));

        case 3:
          currentUser = _firebase.default.auth().currentUser;
          db = _firebase.default.firestore();
          db.collection("users").doc(currentUser.uid).set({
            uid: currentUser.uid,
            email: currentUser.email,
            fullName: fullName,
            phone: phone,
            count: 0,
            rating: 0,
            address: address
          });

          _firebase.default.auth().signOut();

          _context.next = 12;
          break;

        case 9:
          _context.prev = 9;
          _context.t0 = _context["catch"](0);

          _reactNative.Alert.alert("There is something wrong!!!!", _context.t0.message);

        case 12:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[0, 9]], Promise);
}

function post(productName, desc, price, image, category, userName, userRating) {
  var currentUser, filename, uploadUri, formData, blob, ref, task;
  return _regenerator.default.async(function post$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          currentUser = _firebase.default.auth().currentUser;
          filename = image.substring(image.lastIndexOf('/') + 1);
          uploadUri = image.replace('file://', '');
          formData = new FormData();
          _context2.next = 7;
          return _regenerator.default.awrap(new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();

            xhr.onload = function () {
              resolve(xhr.response);
            };

            xhr.onerror = function () {
              reject(new TypeError("Network request failed"));
            };

            xhr.responseType = "blob";
            xhr.open("GET", image, true);
            xhr.send(null);
          }));

        case 7:
          blob = _context2.sent;
          ref = _firebase.default.storage().ref().child(filename);
          task = ref.put(blob, {
            contentType: 'image/jpg'
          });
          task.on('state_changed', function (snapshot) {
            console.log(snapshot.totalBytes);
          }, function (err) {
            console.log(err);
          }, function () {
            task.snapshot.ref.getDownloadURL().then(function (downloadURL) {
              var newDocRef = _firebase.default.firestore().collection('posts').doc();

              newDocRef.set({
                productName: productName,
                desc: desc,
                price: price,
                image: downloadURL,
                category: category,
                createdAt: new Date().toLocaleString(),
                userId: _firebase.default.auth().currentUser.uid,
                userName: userName,
                status: "available",
                buyer: "",
                rating: 0,
                id: newDocRef.id,
                userRating: userRating
              });
            });
          });
          _context2.next = 16;
          break;

        case 13:
          _context2.prev = 13;
          _context2.t0 = _context2["catch"](0);
          console.log(_context2.t0);

        case 16:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[0, 13]], Promise);
}

function signIn(email, password) {
  return _regenerator.default.async(function signIn$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return _regenerator.default.awrap(_firebase.default.auth().signInWithEmailAndPassword(email, password).then(function (authUser) {
            if (authUser.user.emailVerified) {} else {
              _firebase.default.auth().signOut();

              _reactNative.Alert.alert('email not verified');
            }
          }));

        case 3:
          _context3.next = 8;
          break;

        case 5:
          _context3.prev = 5;
          _context3.t0 = _context3["catch"](0);

          _reactNative.Alert.alert("There is something wrong!", _context3.t0.message);

        case 8:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[0, 5]], Promise);
}

function loggingOut() {
  return _regenerator.default.async(function loggingOut$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return _regenerator.default.awrap(_firebase.default.auth().signOut());

        case 3:
          _context4.next = 8;
          break;

        case 5:
          _context4.prev = 5;
          _context4.t0 = _context4["catch"](0);

          _reactNative.Alert.alert('There is something wrong!', _context4.t0.message);

        case 8:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, [[0, 5]], Promise);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,