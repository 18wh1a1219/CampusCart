297d189b85d8ce18630ca9aef3e47b50
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["children", "size", "style", "theme", "visible"],
    _excluded2 = ["backgroundColor"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _colors = require("../styles/colors");

var _theming = require("../core/theming");

var _getContrastingColor = _interopRequireDefault(require("../utils/getContrastingColor"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var defaultSize = 20;

var Badge = function Badge(_ref) {
  var children = _ref.children,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? defaultSize : _ref$size,
      style = _ref.style,
      theme = _ref.theme,
      _ref$visible = _ref.visible,
      visible = _ref$visible === void 0 ? true : _ref$visible,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
      opacity = _React$useRef.current;

  var isFirstRendering = React.useRef(true);
  var scale = theme.animation.scale;
  React.useEffect(function () {
    if (isFirstRendering.current) {
      isFirstRendering.current = false;
      return;
    }

    _reactNative.Animated.timing(opacity, {
      toValue: visible ? 1 : 0,
      duration: 150 * scale,
      useNativeDriver: true
    }).start();
  }, [visible, opacity, scale]);

  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.notification : _ref2$backgroundColor,
      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);

  var textColor = (0, _getContrastingColor.default)(backgroundColor, _colors.white, _colors.black);
  var borderRadius = size / 2;
  return React.createElement(_reactNative.Animated.Text, _extends({
    numberOfLines: 1,
    style: [(0, _extends3.default)({
      opacity: opacity,
      backgroundColor: backgroundColor,
      color: textColor,
      fontSize: size * 0.5
    }, theme.fonts.regular, {
      lineHeight: size,
      height: size,
      minWidth: size,
      borderRadius: borderRadius
    }), styles.container, restStyle]
  }, rest), children);
};

var _default = (0, _theming.withTheme)(Badge);

exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  container: {
    alignSelf: 'flex-end',
    textAlign: 'center',
    textAlignVertical: 'center',
    paddingHorizontal: 4,
    overflow: 'hidden'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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OlsiZGVmYXVsdFNpemUiLCJCYWRnZSIsImNoaWxkcmVuIiwic2l6ZSIsInN0eWxlIiwidGhlbWUiLCJ2aXNpYmxlIiwicmVzdCIsIlJlYWN0IiwidXNlUmVmIiwiQW5pbWF0ZWQiLCJWYWx1ZSIsIm9wYWNpdHkiLCJjdXJyZW50IiwiaXNGaXJzdFJlbmRlcmluZyIsInNjYWxlIiwiYW5pbWF0aW9uIiwidXNlRWZmZWN0IiwidGltaW5nIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwidXNlTmF0aXZlRHJpdmVyIiwic3RhcnQiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImJhY2tncm91bmRDb2xvciIsImNvbG9ycyIsIm5vdGlmaWNhdGlvbiIsInJlc3RTdHlsZSIsInRleHRDb2xvciIsIndoaXRlIiwiYmxhY2siLCJib3JkZXJSYWRpdXMiLCJfcmVhY3ROYXRpdmUiLCJUZXh0IiwibnVtYmVyT2ZMaW5lcyIsImNvbG9yIiwiZm9udFNpemUiLCJmb250cyIsInJlZ3VsYXIiLCJsaW5lSGVpZ2h0IiwiaGVpZ2h0IiwibWluV2lkdGgiLCJzdHlsZXMiLCJjb250YWluZXIiLCJjcmVhdGUiLCJhbGlnblNlbGYiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QWxpZ25WZXJ0aWNhbCIsInBhZGRpbmdIb3Jpem9udGFsIiwib3ZlcmZsb3ciXSwic291cmNlcyI6WyJCYWRnZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQW5pbWF0ZWQsIFN0eWxlU2hlZXQsIFN0eWxlUHJvcCwgVGV4dFN0eWxlIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdoaXRlLCBibGFjayB9IGZyb20gJy4uL3N0eWxlcy9jb2xvcnMnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29yZS90aGVtaW5nJztcbmltcG9ydCBnZXRDb250cmFzdGluZ0NvbG9yIGZyb20gJy4uL3V0aWxzL2dldENvbnRyYXN0aW5nQ29sb3InO1xuXG5jb25zdCBkZWZhdWx0U2l6ZSA9IDIwO1xuXG50eXBlIFByb3BzID0gUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIEFuaW1hdGVkLlRleHQ+ICYge1xuICAvKipcbiAgICogV2hldGhlciB0aGUgYmFkZ2UgaXMgdmlzaWJsZVxuICAgKi9cbiAgdmlzaWJsZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDb250ZW50IG9mIHRoZSBgQmFkZ2VgLlxuICAgKi9cbiAgY2hpbGRyZW4/OiBzdHJpbmcgfCBudW1iZXI7XG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBgQmFkZ2VgLlxuICAgKi9cbiAgc2l6ZT86IG51bWJlcjtcbiAgc3R5bGU/OiBTdHlsZVByb3A8VGV4dFN0eWxlPjtcbiAgcmVmPzogUmVhY3QuUmVmT2JqZWN0PHR5cGVvZiBBbmltYXRlZC5UZXh0PjtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFJlYWN0TmF0aXZlUGFwZXIuVGhlbWU7XG59O1xuXG4vKipcbiAqIEJhZGdlcyBhcmUgc21hbGwgc3RhdHVzIGRlc2NyaXB0b3JzIGZvciBVSSBlbGVtZW50cy5cbiAqIEEgYmFkZ2UgY29uc2lzdHMgb2YgYSBzbWFsbCBjaXJjbGUsIHR5cGljYWxseSBjb250YWluaW5nIGEgbnVtYmVyIG9yIG90aGVyIHNob3J0IHNldCBvZiBjaGFyYWN0ZXJzLCB0aGF0IGFwcGVhcnMgaW4gcHJveGltaXR5IHRvIGFub3RoZXIgb2JqZWN0LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgY2xhc3M9XCJzbWFsbFwiIHNyYz1cInNjcmVlbnNob3RzL2JhZGdlLTEucG5nXCIgLz5cbiAqICAgICA8ZmlnY2FwdGlvbj5CYWRnZSB3aXRoIGNvbnRlbnQ8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgY2xhc3M9XCJzbWFsbFwiIHNyYz1cInNjcmVlbnNob3RzL2JhZGdlLTIucG5nXCIgLz5cbiAqICAgICA8ZmlnY2FwdGlvbj5CYWRnZSB3aXRob3V0IGNvbnRlbnQ8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBCYWRnZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcic7XG4gKlxuICogY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiAoXG4gKiAgIDxCYWRnZT4zPC9CYWRnZT5cbiAqICk7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgTXlDb21wb25lbnQ7XG4gKiBgYGBcbiAqL1xuY29uc3QgQmFkZ2UgPSAoe1xuICBjaGlsZHJlbixcbiAgc2l6ZSA9IGRlZmF1bHRTaXplLFxuICBzdHlsZSxcbiAgdGhlbWUsXG4gIHZpc2libGUgPSB0cnVlLFxuICAuLi5yZXN0XG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IGN1cnJlbnQ6IG9wYWNpdHkgfSA9IFJlYWN0LnVzZVJlZjxBbmltYXRlZC5WYWx1ZT4oXG4gICAgbmV3IEFuaW1hdGVkLlZhbHVlKHZpc2libGUgPyAxIDogMClcbiAgKTtcbiAgY29uc3QgaXNGaXJzdFJlbmRlcmluZyA9IFJlYWN0LnVzZVJlZjxib29sZWFuPih0cnVlKTtcblxuICBjb25zdCB7XG4gICAgYW5pbWF0aW9uOiB7IHNjYWxlIH0sXG4gIH0gPSB0aGVtZTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIERvIG5vdCBydW4gYW5pbWF0aW9uIG9uIHZlcnkgZmlyc3QgcmVuZGVyaW5nXG4gICAgaWYgKGlzRmlyc3RSZW5kZXJpbmcuY3VycmVudCkge1xuICAgICAgaXNGaXJzdFJlbmRlcmluZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgQW5pbWF0ZWQudGltaW5nKG9wYWNpdHksIHtcbiAgICAgIHRvVmFsdWU6IHZpc2libGUgPyAxIDogMCxcbiAgICAgIGR1cmF0aW9uOiAxNTAgKiBzY2FsZSxcbiAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcbiAgICB9KS5zdGFydCgpO1xuICB9LCBbdmlzaWJsZSwgb3BhY2l0eSwgc2NhbGVdKTtcblxuICBjb25zdCB7IGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmNvbG9ycy5ub3RpZmljYXRpb24sIC4uLnJlc3RTdHlsZSB9ID1cbiAgICAoU3R5bGVTaGVldC5mbGF0dGVuKHN0eWxlKSB8fCB7fSkgYXMgVGV4dFN0eWxlO1xuXG4gIGNvbnN0IHRleHRDb2xvciA9IGdldENvbnRyYXN0aW5nQ29sb3IoYmFja2dyb3VuZENvbG9yLCB3aGl0ZSwgYmxhY2spO1xuXG4gIGNvbnN0IGJvcmRlclJhZGl1cyA9IHNpemUgLyAyO1xuXG4gIHJldHVybiAoXG4gICAgPEFuaW1hdGVkLlRleHRcbiAgICAgIG51bWJlck9mTGluZXM9ezF9XG4gICAgICBzdHlsZT17W1xuICAgICAgICB7XG4gICAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgY29sb3I6IHRleHRDb2xvcixcbiAgICAgICAgICBmb250U2l6ZTogc2l6ZSAqIDAuNSxcbiAgICAgICAgICAuLi50aGVtZS5mb250cy5yZWd1bGFyLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IHNpemUsXG4gICAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICAgIG1pbldpZHRoOiBzaXplLFxuICAgICAgICAgIGJvcmRlclJhZGl1cyxcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgcmVzdFN0eWxlLFxuICAgICAgXX1cbiAgICAgIHsuLi5yZXN0fVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0FuaW1hdGVkLlRleHQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQmFkZ2UpO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGFsaWduU2VsZjogJ2ZsZXgtZW5kJyxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIHRleHRBbGlnblZlcnRpY2FsOiAnY2VudGVyJyxcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogNCxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIH0sXG59KTtcbiJdfQ==