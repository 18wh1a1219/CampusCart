{"version":3,"mappings":"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","names":["Searchbar","React","forwardRef","ref","clearAccessibilityLabel","clearIcon","icon","customIconColor","iconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","theme","value","rest","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","onChangeText","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","_Surface","borderRadius","elevation","styles","container","_IconButton","accessibilityTraits","accessibilityComponentType","accessibilityRole","borderless","onPress","color","size","_MaterialCommunityIcon","name","direction","I18nManager","isRTL","accessibilityLabel","_reactNative","Platform","select","web","outline","placeholderTextColor","selectionColor","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","disabled","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"sources":["Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...font,\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]}