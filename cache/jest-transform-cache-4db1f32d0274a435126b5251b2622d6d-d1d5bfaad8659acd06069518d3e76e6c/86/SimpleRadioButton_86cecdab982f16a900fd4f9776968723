22a510abc012559cd61650641e3f2f0c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RadioButtonLabel = exports.RadioButtonInput = exports.RadioButton = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _Style = _interopRequireDefault(require("./Style.js"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var React = require('react');

var ReactNative = require('react-native');

var Text = ReactNative.Text,
    View = ReactNative.View,
    TouchableOpacity = ReactNative.TouchableOpacity,
    TouchableWithoutFeedback = ReactNative.TouchableWithoutFeedback,
    LayoutAnimation = ReactNative.LayoutAnimation,
    Platform = ReactNative.Platform,
    UIManager = ReactNative.UIManager;

var RadioForm = function (_React$Component) {
  (0, _inherits2.default)(RadioForm, _React$Component);

  var _super = _createSuper(RadioForm);

  function RadioForm(props) {
    var _this;

    (0, _classCallCheck2.default)(this, RadioForm);
    _this = _super.call(this, props);
    _this.state = {
      is_active_index: props.initial
    };

    if (Platform.OS === 'android') {
      UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);
    }

    _this._renderButton = _this._renderButton.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(RadioForm, [{
    key: "updateIsActiveIndex",
    value: function updateIsActiveIndex(index) {
      this.setState({
        is_active_index: index
      });
      this.props.onPress(this.props.radio_props[index], index);
    }
  }, {
    key: "clearSelection",
    value: function clearSelection() {
      this.setState({
        is_active_index: -1
      });
    }
  }, {
    key: "_renderButton",
    value: function _renderButton(obj, i) {
      var _this2 = this;

      return React.createElement(RadioButton, {
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel ? this.props.accessibilityLabel + '|' + i : 'radioButton' + '|' + i,
        testID: this.props.testID ? this.props.testID + '|' + i : 'radioButton' + '|' + i,
        isSelected: this.state.is_active_index === i,
        obj: obj,
        key: i,
        index: i,
        buttonColor: this.state.is_active_index === i ? this.props.selectedButtonColor : this.props.buttonColor,
        buttonSize: this.props.buttonSize,
        buttonOuterSize: this.props.buttonOuterSize,
        labelHorizontal: this.props.labelHorizontal,
        labelColor: this.state.is_active_index === i ? this.props.selectedLabelColor : this.props.labelColor,
        labelStyle: this.props.labelStyle,
        style: this.props.radioStyle,
        animation: this.props.animation,
        disabled: this.props.disabled,
        onPress: function onPress(value, index) {
          _this2.props.onPress(value, index);

          _this2.setState({
            is_active_index: index
          });
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var render_content = false;

      if (this.props.radio_props.length) {
        render_content = this.props.radio_props.map(this._renderButton);
      } else {
        render_content = this.props.children;
      }

      return React.createElement(View, {
        style: [_Style.default.radioFrom, this.props.style, this.props.formHorizontal && _Style.default.formHorizontal]
      }, render_content);
    }
  }]);
  return RadioForm;
}(React.Component);

exports.default = RadioForm;
RadioForm.defaultProps = {
  radio_props: [],
  initial: 0,
  buttonColor: '#2196f3',
  selectedButtonColor: '#2196f3',
  formHorizontal: false,
  labelHorizontal: true,
  animation: true,
  labelColor: '#000',
  selectedLabelColor: '#000',
  wrapStyle: {},
  disabled: false
};

var RadioButton = function (_React$Component2) {
  (0, _inherits2.default)(RadioButton, _React$Component2);

  var _super2 = _createSuper(RadioButton);

  function RadioButton(props) {
    var _this3;

    (0, _classCallCheck2.default)(this, RadioButton);
    _this3 = _super2.call(this, props);
    _this3.state = {};
    return _this3;
  }

  (0, _createClass2.default)(RadioButton, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return true;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.props.animation) {
        LayoutAnimation.spring();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var c = this.props.children;
      var idSeparator = this.props.idSeparator ? this.props.idSeparator : '|';
      var idSeparatorAccessibilityLabelIndex = this.props.accessibilityLabel ? this.props.accessibilityLabel.indexOf(idSeparator) : -1;
      var idSeparatorTestIdIndex = this.props.testID ? this.props.testID.indexOf(idSeparator) : -1;
      var accessibilityLabel = this.props.accessibilityLabel ? idSeparatorAccessibilityLabelIndex !== -1 ? this.props.accessibilityLabel.substring(0, idSeparatorAccessibilityLabelIndex) : this.props.accessibilityLabel : 'radioButton';
      var testID = this.props.testID ? idSeparatorTestIdIndex !== -1 ? this.props.testID.substring(0, idSeparatorTestIdIndex) : this.props.testID : 'radioButton';
      var accessibilityLabelIndex = this.props.accessibilityLabel && idSeparatorAccessibilityLabelIndex !== -1 ? this.props.accessibilityLabel.substring(idSeparatorAccessibilityLabelIndex + 1) : '';
      var testIDIndex = this.props.testID && testIDIndex !== -1 ? this.props.testID.split(testIDIndex + 1) : '';
      var renderContent = false;
      renderContent = c ? React.createElement(View, {
        style: [_Style.default.radioWrap, this.props.style, !this.props.labelHorizontal && _Style.default.labelVerticalWrap]
      }, c) : React.createElement(View, {
        style: [_Style.default.radioWrap, this.props.style, !this.props.labelHorizontal && _Style.default.labelVerticalWrap]
      }, React.createElement(RadioButtonInput, (0, _extends2.default)({}, this.props, {
        accessibilityLabel: accessibilityLabel + 'Input' + accessibilityLabelIndex,
        testID: testID + 'Input' + testIDIndex
      })), React.createElement(RadioButtonLabel, (0, _extends2.default)({}, this.props, {
        accessibilityLabel: accessibilityLabel + 'Label' + accessibilityLabelIndex,
        testID: testID + 'Label' + testIDIndex
      })));
      return React.createElement(View, {
        style: this.props.wrapStyle
      }, renderContent);
    }
  }]);
  return RadioButton;
}(React.Component);

exports.RadioButton = RadioButton;
RadioButton.defaultProps = {
  isSelected: false,
  buttonColor: '#2196f3',
  selectedButtonColor: '#2196f3',
  labelHorizontal: true,
  disabled: false,
  idSeparator: '|'
};

var RadioButtonInput = function (_React$Component3) {
  (0, _inherits2.default)(RadioButtonInput, _React$Component3);

  var _super3 = _createSuper(RadioButtonInput);

  function RadioButtonInput(props) {
    var _this4;

    (0, _classCallCheck2.default)(this, RadioButtonInput);
    _this4 = _super3.call(this, props);
    _this4.state = {
      isSelected: false,
      buttonColor: props.buttonColor || '#2196f3'
    };
    return _this4;
  }

  (0, _createClass2.default)(RadioButtonInput, [{
    key: "render",
    value: function render() {
      var _this5 = this;

      var innerSize = {
        width: 20,
        height: 20,
        borderRadius: 20 / 2
      };
      var outerSize = {
        width: 20 + 10,
        height: 20 + 10,
        borderRadius: (20 + 10) / 2
      };

      if (this.props.buttonSize) {
        innerSize.width = this.props.buttonSize;
        innerSize.height = this.props.buttonSize;
        innerSize.borderRadius = this.props.buttonSize / 2;
        outerSize.width = this.props.buttonSize + 10;
        outerSize.height = this.props.buttonSize + 10;
        outerSize.borderRadius = (this.props.buttonSize + 10) / 2;
      }

      if (this.props.buttonOuterSize) {
        outerSize.width = this.props.buttonOuterSize;
        outerSize.height = this.props.buttonOuterSize;
        outerSize.borderRadius = this.props.buttonOuterSize / 2;
      }

      var outerColor = this.props.buttonOuterColor;
      var borderWidth = this.props.borderWidth || 3;
      var innerColor = this.props.buttonInnerColor;

      if (this.props.buttonColor) {
        outerColor = this.props.buttonColor;
        innerColor = this.props.buttonColor;
      }

      var c = React.createElement(View, {
        style: [_Style.default.radioNormal, this.props.isSelected && _Style.default.radioActive, this.props.isSelected && innerSize, this.props.isSelected && {
          backgroundColor: innerColor
        }]
      });
      var radioStyle = [_Style.default.radio, {
        borderColor: outerColor,
        borderWidth: borderWidth
      }, this.props.buttonStyle, outerSize];

      if (this.props.disabled) {
        return React.createElement(View, {
          style: this.props.buttonWrapStyle
        }, React.createElement(View, {
          style: radioStyle
        }, c));
      }

      return React.createElement(View, {
        style: this.props.buttonWrapStyle
      }, React.createElement(TouchableOpacity, {
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel,
        testID: this.props.testID,
        style: radioStyle,
        onPress: function onPress() {
          _this5.props.onPress(_this5.props.obj.value, _this5.props.index);
        }
      }, c));
    }
  }]);
  return RadioButtonInput;
}(React.Component);

exports.RadioButtonInput = RadioButtonInput;
RadioButtonInput.defaultProps = {
  buttonInnerColor: '#2196f3',
  buttonOuterColor: '#2196f3',
  disabled: false
};

var RadioButtonLabel = function (_React$Component4) {
  (0, _inherits2.default)(RadioButtonLabel, _React$Component4);

  var _super4 = _createSuper(RadioButtonLabel);

  function RadioButtonLabel(props) {
    var _this6;

    (0, _classCallCheck2.default)(this, RadioButtonLabel);
    _this6 = _super4.call(this, props);
    _this6.state = {
      isSelected: false,
      buttonColor: '#2196f3'
    };
    return _this6;
  }

  (0, _createClass2.default)(RadioButtonLabel, [{
    key: "render",
    value: function render() {
      var _this7 = this;

      return React.createElement(TouchableWithoutFeedback, {
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel,
        testID: this.props.testID,
        onPress: function onPress() {
          if (!_this7.props.disabled) {
            _this7.props.onPress(_this7.props.obj.value, _this7.props.index);
          }
        }
      }, React.createElement(View, {
        style: [this.props.labelWrapStyle, _Style.default.labelWrapStyle]
      }, React.createElement(Text, {
        style: [_Style.default.radioLabel, !this.props.labelHorizontal && _Style.default.labelVertical, {
          color: this.props.labelColor
        }, this.props.labelStyle]
      }, this.props.obj.label)));
    }
  }]);
  return RadioButtonLabel;
}(React.Component);

exports.RadioButtonLabel = RadioButtonLabel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,