b73ff7340b9844fbcbeb9ff3253e7c97
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["name", "color", "size"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.accessibilityProps = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var MaterialCommunityIcons;

try {
  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons').default;
} catch (e) {
  var isErrorLogged = false;

  MaterialCommunityIcons = function MaterialCommunityIcons(_ref) {
    var name = _ref.name,
        color = _ref.color,
        size = _ref.size,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

    if (!isErrorLogged) {
      if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {
        console.error(e);
      }

      console.warn("Tried to use the icon '" + name + "' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.", "To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.");
      isErrorLogged = true;
    }

    return React.createElement(_reactNative.Text, _extends({}, rest, {
      style: [styles.icon, {
        color: color,
        fontSize: size
      }],
      pointerEvents: "none",
      selectable: false
    }), "\u25A1");
  };
}

var accessibilityProps = _reactNative.Platform.OS === 'web' ? {
  role: 'img',
  focusable: false
} : {
  accessibilityElementsHidden: true,
  importantForAccessibility: 'no-hide-descendants'
};
exports.accessibilityProps = accessibilityProps;

var defaultIcon = function defaultIcon(_ref2) {
  var name = _ref2.name,
      color = _ref2.color,
      size = _ref2.size,
      direction = _ref2.direction,
      allowFontScaling = _ref2.allowFontScaling;
  return React.createElement(MaterialCommunityIcons, _extends({
    allowFontScaling: allowFontScaling,
    name: name,
    color: color,
    size: size,
    style: [{
      transform: [{
        scaleX: direction === 'rtl' ? -1 : 1
      }],
      lineHeight: size
    }, styles.icon],
    pointerEvents: "none",
    selectable: false
  }, accessibilityProps));
};

var styles = _reactNative.StyleSheet.create({
  icon: {
    backgroundColor: 'transparent'
  }
});

var _default = defaultIcon;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFVQSxJQUFJQSxzQkFBSjs7QUFTQSxJQUFJO0VBRUZBLHNCQUFzQixHQUNwQkMsT0FBTyxDQUFDLGtEQUFELENBQVBBLENBQTREQyxPQUQ5REY7QUFGRixFQUlFLE9BQU9HLENBQVAsRUFBVTtFQUNWLElBQUlDLGFBQWEsR0FBRyxLQUFwQjs7RUFHQUosc0JBQXNCLEdBQUcsc0NBQW9DO0lBQUEsSUFBakNLLElBQWlDLFFBQWpDQSxJQUFpQztJQUFBLElBQTNCQyxLQUEyQixRQUEzQkEsS0FBMkI7SUFBQSxJQUFwQkMsSUFBb0IsUUFBcEJBLElBQW9CO0lBQUEsSUFBWEMsSUFBVzs7SUFFM0QsSUFBSSxDQUFDSixhQUFMLEVBQW9CO01BQ2xCLElBQ0UsQ0FBQyw4REFBOERLLElBQTlELENBQ0VOLENBQUQsQ0FBV08sT0FEWixDQURILEVBSUU7UUFDQUMsT0FBTyxDQUFDQyxLQUFSRCxDQUFjUixDQUFkUTtNQUNEOztNQUVEQSxPQUFPLENBQUNFLElBQVJGLDZCQUM0Qk4sSUFENUJNO01BS0FQLGFBQWEsR0FBRyxJQUFoQkE7SUFDRDs7SUFFRCxPQUNFVSxvQkFBQ0MsaUJBQUQsZUFDTVAsSUFETjtNQUVFUSxLQUFLLEVBQUUsQ0FBQ0MsTUFBTSxDQUFDQyxJQUFSLEVBQWM7UUFBRVosS0FBRixFQUFFQSxLQUFGO1FBQVNhLFFBQVEsRUFBRVo7TUFBbkIsQ0FBZCxDQUZUO01BSUVhLGFBQWEsRUFBQyxNQUpoQjtNQUtFQyxVQUFVLEVBQUU7SUFMZCxhQURGO0VBbkJGO0FBK0JEOztBQUVNLElBQU1DLGtCQUFrQixHQUM3QkMsc0JBQVNDLEVBQVRELEtBQWdCLEtBQWhCQSxHQUNJO0VBQ0VFLElBQUksRUFBRSxLQURSO0VBRUVDLFNBQVMsRUFBRTtBQUZiLENBREpILEdBS0k7RUFDRUksMkJBQTJCLEVBQUUsSUFEL0I7RUFFRUMseUJBQXlCLEVBQ3ZCO0FBSEosQ0FOQzs7O0FBWVAsSUFBTUMsV0FBVyxHQUFHLFNBQWRBLFdBQWM7RUFBQSxJQUNsQnhCLElBRGtCLFNBQ2xCQSxJQURrQjtFQUFBLElBRWxCQyxLQUZrQixTQUVsQkEsS0FGa0I7RUFBQSxJQUdsQkMsSUFIa0IsU0FHbEJBLElBSGtCO0VBQUEsSUFJbEJ1QixTQUprQixTQUlsQkEsU0FKa0I7RUFBQSxJQUtsQkMsZ0JBTGtCLFNBS2xCQSxnQkFMa0I7RUFBQSxPQU9sQmpCLG9CQUFDZCxzQkFBRDtJQUNFK0IsZ0JBQWdCLEVBQUVBLGdCQURwQjtJQUVFMUIsSUFBSSxFQUFFQSxJQUZSO0lBR0VDLEtBQUssRUFBRUEsS0FIVDtJQUlFQyxJQUFJLEVBQUVBLElBSlI7SUFLRVMsS0FBSyxFQUFFLENBQ0w7TUFDRWdCLFNBQVMsRUFBRSxDQUFDO1FBQUVDLE1BQU0sRUFBRUgsU0FBUyxLQUFLLEtBQWRBLEdBQXNCLENBQUMsQ0FBdkJBLEdBQTJCO01BQXJDLENBQUQsQ0FEYjtNQUVFSSxVQUFVLEVBQUUzQjtJQUZkLENBREssRUFLTFUsTUFBTSxDQUFDQyxJQUxGLENBTFQ7SUFZRUUsYUFBYSxFQUFDLE1BWmhCO0lBYUVDLFVBQVUsRUFBRTtFQWJkLEdBY01DLGtCQWROLEVBUGtCO0FBQXBCOztBQXlCQSxJQUFNTCxNQUFNLEdBQUdrQix3QkFBV0MsTUFBWEQsQ0FBa0I7RUFDL0JqQixJQUFJLEVBQUU7SUFDSm1CLGVBQWUsRUFBRTtFQURiO0FBRHlCLENBQWxCRixDQUFmOztlQU1lTiIsIm5hbWVzIjpbIk1hdGVyaWFsQ29tbXVuaXR5SWNvbnMiLCJyZXF1aXJlIiwiZGVmYXVsdCIsImUiLCJpc0Vycm9yTG9nZ2VkIiwibmFtZSIsImNvbG9yIiwic2l6ZSIsInJlc3QiLCJ0ZXN0IiwibWVzc2FnZSIsImNvbnNvbGUiLCJlcnJvciIsIndhcm4iLCJSZWFjdCIsIl9yZWFjdE5hdGl2ZSIsInN0eWxlIiwic3R5bGVzIiwiaWNvbiIsImZvbnRTaXplIiwicG9pbnRlckV2ZW50cyIsInNlbGVjdGFibGUiLCJhY2Nlc3NpYmlsaXR5UHJvcHMiLCJQbGF0Zm9ybSIsIk9TIiwicm9sZSIsImZvY3VzYWJsZSIsImFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbiIsImltcG9ydGFudEZvckFjY2Vzc2liaWxpdHkiLCJkZWZhdWx0SWNvbiIsImRpcmVjdGlvbiIsImFsbG93Rm9udFNjYWxpbmciLCJ0cmFuc2Zvcm0iLCJzY2FsZVgiLCJsaW5lSGVpZ2h0IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImJhY2tncm91bmRDb2xvciJdLCJzb3VyY2VzIjpbIk1hdGVyaWFsQ29tbXVuaXR5SWNvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgVGV4dCwgUGxhdGZvcm0sIFRleHRQcm9wcywgVmlld1Byb3BzIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuZXhwb3J0IHR5cGUgSWNvblByb3BzID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIGNvbG9yOiBzdHJpbmc7XG4gIHNpemU6IG51bWJlcjtcbiAgZGlyZWN0aW9uOiAncnRsJyB8ICdsdHInO1xuICBhbGxvd0ZvbnRTY2FsaW5nPzogYm9vbGVhbjtcbn07XG5cbmxldCBNYXRlcmlhbENvbW11bml0eUljb25zOiBSZWFjdC5Db21wb25lbnRUeXBlPFxuICBUZXh0UHJvcHMgJiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgc2l6ZTogbnVtYmVyO1xuICAgIHBvaW50ZXJFdmVudHM/OiBWaWV3UHJvcHNbJ3BvaW50ZXJFdmVudHMnXTtcbiAgfVxuPjtcblxudHJ5IHtcbiAgLy8gT3B0aW9uYWxseSByZXF1aXJlIHZlY3Rvci1pY29uc1xuICBNYXRlcmlhbENvbW11bml0eUljb25zID1cbiAgICByZXF1aXJlKCdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zL01hdGVyaWFsQ29tbXVuaXR5SWNvbnMnKS5kZWZhdWx0O1xufSBjYXRjaCAoZSkge1xuICBsZXQgaXNFcnJvckxvZ2dlZCA9IGZhbHNlO1xuXG4gIC8vIEZhbGxiYWNrIGNvbXBvbmVudCBmb3IgaWNvbnNcbiAgTWF0ZXJpYWxDb21tdW5pdHlJY29ucyA9ICh7IG5hbWUsIGNvbG9yLCBzaXplLCAuLi5yZXN0IH0pID0+IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgaWYgKCFpc0Vycm9yTG9nZ2VkKSB7XG4gICAgICBpZiAoXG4gICAgICAgICEvKENhbm5vdCBmaW5kIG1vZHVsZXxNb2R1bGUgbm90IGZvdW5kfENhbm5vdCByZXNvbHZlIG1vZHVsZSkvLnRlc3QoXG4gICAgICAgICAgKGUgYXMgYW55KS5tZXNzYWdlXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBUcmllZCB0byB1c2UgdGhlIGljb24gJyR7bmFtZX0nIGluIGEgY29tcG9uZW50IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcicsIGJ1dCAncmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucy9NYXRlcmlhbENvbW11bml0eUljb25zJyBjb3VsZCBub3QgYmUgbG9hZGVkLmAsXG4gICAgICAgIGBUbyByZW1vdmUgdGhpcyB3YXJuaW5nLCB0cnkgaW5zdGFsbGluZyAncmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucycgb3IgdXNlIGFub3RoZXIgbWV0aG9kIHRvIHNwZWNpZnkgaWNvbjogaHR0cHM6Ly9jYWxsc3RhY2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS1wYXBlci9pY29ucy5odG1sLmBcbiAgICAgICk7XG5cbiAgICAgIGlzRXJyb3JMb2dnZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8VGV4dFxuICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgc3R5bGU9e1tzdHlsZXMuaWNvbiwgeyBjb2xvciwgZm9udFNpemU6IHNpemUgfV19XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IFRleHQgZG9lc24ndCBzdXBwb3J0IHRoaXMsIGJ1dCBpdCBzZWVtcyB0byBhZmZlY3QgVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2tcbiAgICAgICAgcG9pbnRlckV2ZW50cz1cIm5vbmVcIlxuICAgICAgICBzZWxlY3RhYmxlPXtmYWxzZX1cbiAgICAgID5cbiAgICAgICAg4pahXG4gICAgICA8L1RleHQ+XG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGFjY2Vzc2liaWxpdHlQcm9wcyA9XG4gIFBsYXRmb3JtLk9TID09PSAnd2ViJ1xuICAgID8ge1xuICAgICAgICByb2xlOiAnaW1nJyxcbiAgICAgICAgZm9jdXNhYmxlOiBmYWxzZSxcbiAgICAgIH1cbiAgICA6IHtcbiAgICAgICAgYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuOiB0cnVlLFxuICAgICAgICBpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5OlxuICAgICAgICAgICduby1oaWRlLWRlc2NlbmRhbnRzJyBhcyAnbm8taGlkZS1kZXNjZW5kYW50cycsXG4gICAgICB9O1xuXG5jb25zdCBkZWZhdWx0SWNvbiA9ICh7XG4gIG5hbWUsXG4gIGNvbG9yLFxuICBzaXplLFxuICBkaXJlY3Rpb24sXG4gIGFsbG93Rm9udFNjYWxpbmcsXG59OiBJY29uUHJvcHMpID0+IChcbiAgPE1hdGVyaWFsQ29tbXVuaXR5SWNvbnNcbiAgICBhbGxvd0ZvbnRTY2FsaW5nPXthbGxvd0ZvbnRTY2FsaW5nfVxuICAgIG5hbWU9e25hbWV9XG4gICAgY29sb3I9e2NvbG9yfVxuICAgIHNpemU9e3NpemV9XG4gICAgc3R5bGU9e1tcbiAgICAgIHtcbiAgICAgICAgdHJhbnNmb3JtOiBbeyBzY2FsZVg6IGRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAtMSA6IDEgfV0sXG4gICAgICAgIGxpbmVIZWlnaHQ6IHNpemUsXG4gICAgICB9LFxuICAgICAgc3R5bGVzLmljb24sXG4gICAgXX1cbiAgICBwb2ludGVyRXZlbnRzPVwibm9uZVwiXG4gICAgc2VsZWN0YWJsZT17ZmFsc2V9XG4gICAgey4uLmFjY2Vzc2liaWxpdHlQcm9wc31cbiAgLz5cbik7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgaWNvbjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0SWNvbjtcbiJdfQ==