{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAIA,sBAAJ;;AASA,IAAI;EAEFA,sBAAsB,GACpBC,OAAO,CAAC,kDAAD,CAAPA,CAA4DC,OAD9DF;AAFF,EAIE,OAAOG,CAAP,EAAU;EACV,IAAIC,aAAa,GAAG,KAApB;;EAGAJ,sBAAsB,GAAG,sCAAoC;IAAA,IAAjCK,IAAiC,QAAjCA,IAAiC;IAAA,IAA3BC,KAA2B,QAA3BA,KAA2B;IAAA,IAApBC,IAAoB,QAApBA,IAAoB;IAAA,IAAXC,IAAW;;IAE3D,IAAI,CAACJ,aAAL,EAAoB;MAClB,IACE,CAAC,8DAA8DK,IAA9D,CACEN,CAAD,CAAWO,OADZ,CADH,EAIE;QACAC,OAAO,CAACC,KAARD,CAAcR,CAAdQ;MACD;;MAEDA,OAAO,CAACE,IAARF,6BAC4BN,IAD5BM;MAKAP,aAAa,GAAG,IAAhBA;IACD;;IAED,OACEU,oBAACC,iBAAD,eACMP,IADN;MAEEQ,KAAK,EAAE,CAACC,MAAM,CAACC,IAAR,EAAc;QAAEZ,KAAF,EAAEA,KAAF;QAASa,QAAQ,EAAEZ;MAAnB,CAAd,CAFT;MAIEa,aAAa,EAAC,MAJhB;MAKEC,UAAU,EAAE;IALd,aADF;EAnBF;AA+BD;;AAEM,IAAMC,kBAAkB,GAC7BC,sBAASC,EAATD,KAAgB,KAAhBA,GACI;EACEE,IAAI,EAAE,KADR;EAEEC,SAAS,EAAE;AAFb,CADJH,GAKI;EACEI,2BAA2B,EAAE,IAD/B;EAEEC,yBAAyB,EACvB;AAHJ,CANC;;;AAYP,IAAMC,WAAW,GAAG,SAAdA,WAAc;EAAA,IAClBxB,IADkB,SAClBA,IADkB;EAAA,IAElBC,KAFkB,SAElBA,KAFkB;EAAA,IAGlBC,IAHkB,SAGlBA,IAHkB;EAAA,IAIlBuB,SAJkB,SAIlBA,SAJkB;EAAA,IAKlBC,gBALkB,SAKlBA,gBALkB;EAAA,OAOlBjB,oBAACd,sBAAD;IACE+B,gBAAgB,EAAEA,gBADpB;IAEE1B,IAAI,EAAEA,IAFR;IAGEC,KAAK,EAAEA,KAHT;IAIEC,IAAI,EAAEA,IAJR;IAKES,KAAK,EAAE,CACL;MACEgB,SAAS,EAAE,CAAC;QAAEC,MAAM,EAAEH,SAAS,KAAK,KAAdA,GAAsB,CAAC,CAAvBA,GAA2B;MAArC,CAAD,CADb;MAEEI,UAAU,EAAE3B;IAFd,CADK,EAKLU,MAAM,CAACC,IALF,CALT;IAYEE,aAAa,EAAC,MAZhB;IAaEC,UAAU,EAAE;EAbd,GAcMC,kBAdN,EAPkB;AAApB;;AAyBA,IAAML,MAAM,GAAGkB,wBAAWC,MAAXD,CAAkB;EAC/BjB,IAAI,EAAE;IACJmB,eAAe,EAAE;EADb;AADyB,CAAlBF,CAAf;;eAMeN","names":["MaterialCommunityIcons","require","default","e","isErrorLogged","name","color","size","rest","test","message","console","error","warn","React","_reactNative","style","styles","icon","fontSize","pointerEvents","selectable","accessibilityProps","Platform","OS","role","focusable","accessibilityElementsHidden","importantForAccessibility","defaultIcon","direction","allowFontScaling","transform","scaleX","lineHeight","StyleSheet","create","backgroundColor"],"sources":["MaterialCommunityIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Text, Platform, TextProps, ViewProps } from 'react-native';\n\nexport type IconProps = {\n  name: string;\n  color: string;\n  size: number;\n  direction: 'rtl' | 'ltr';\n  allowFontScaling?: boolean;\n};\n\nlet MaterialCommunityIcons: React.ComponentType<\n  TextProps & {\n    name: string;\n    color: string;\n    size: number;\n    pointerEvents?: ViewProps['pointerEvents'];\n  }\n>;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons =\n    require('react-native-vector-icons/MaterialCommunityIcons').default;\n} catch (e) {\n  let isErrorLogged = false;\n\n  // Fallback component for icons\n  MaterialCommunityIcons = ({ name, color, size, ...rest }) => {\n    /* eslint-disable no-console */\n    if (!isErrorLogged) {\n      if (\n        !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n          (e as any).message\n        )\n      ) {\n        console.error(e);\n      }\n\n      console.warn(\n        `Tried to use the icon '${name}' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.`,\n        `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.`\n      );\n\n      isErrorLogged = true;\n    }\n\n    return (\n      <Text\n        {...rest}\n        style={[styles.icon, { color, fontSize: size }]}\n        // @ts-expect-error: Text doesn't support this, but it seems to affect TouchableNativeFeedback\n        pointerEvents=\"none\"\n        selectable={false}\n      >\n        â–¡\n      </Text>\n    );\n  };\n}\n\nexport const accessibilityProps =\n  Platform.OS === 'web'\n    ? {\n        role: 'img',\n        focusable: false,\n      }\n    : {\n        accessibilityElementsHidden: true,\n        importantForAccessibility:\n          'no-hide-descendants' as 'no-hide-descendants',\n      };\n\nconst defaultIcon = ({\n  name,\n  color,\n  size,\n  direction,\n  allowFontScaling,\n}: IconProps) => (\n  <MaterialCommunityIcons\n    allowFontScaling={allowFontScaling}\n    name={name}\n    color={color}\n    size={size}\n    style={[\n      {\n        transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n        lineHeight: size,\n      },\n      styles.icon,\n    ]}\n    pointerEvents=\"none\"\n    selectable={false}\n    {...accessibilityProps}\n  />\n);\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default defaultIcon;\n"]}