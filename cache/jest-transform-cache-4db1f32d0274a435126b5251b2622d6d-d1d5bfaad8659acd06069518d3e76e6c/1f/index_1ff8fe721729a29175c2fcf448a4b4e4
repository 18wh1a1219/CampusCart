7585d4578a21c846c20bbb3b849a0de9
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var STEP_STATUS = {
  CURRENT: 'current',
  FINISHED: 'finished',
  UNFINISHED: 'unfinished'
};
var defaultStyles = {
  stepIndicatorSize: 30,
  currentStepIndicatorSize: 40,
  separatorStrokeWidth: 3,
  separatorStrokeUnfinishedWidth: 0,
  separatorStrokeFinishedWidth: 0,
  currentStepStrokeWidth: 5,
  stepStrokeWidth: 0,
  stepStrokeCurrentColor: '#4aae4f',
  stepStrokeFinishedColor: '#4aae4f',
  stepStrokeUnFinishedColor: '#4aae4f',
  separatorFinishedColor: '#4aae4f',
  separatorUnFinishedColor: '#a4d4a5',
  stepIndicatorFinishedColor: '#4aae4f',
  stepIndicatorUnFinishedColor: '#a4d4a5',
  stepIndicatorCurrentColor: '#ffffff',
  stepIndicatorLabelFontSize: 15,
  currentStepIndicatorLabelFontSize: 15,
  stepIndicatorLabelCurrentColor: '#000000',
  stepIndicatorLabelFinishedColor: '#ffffff',
  stepIndicatorLabelUnFinishedColor: 'rgba(255,255,255,0.5)',
  labelColor: '#000000',
  labelSize: 13,
  labelAlign: 'center',
  currentStepLabelColor: '#4aae4f'
};

var StepIndicator = function StepIndicator(_ref) {
  var _ref$currentPosition = _ref.currentPosition,
      currentPosition = _ref$currentPosition === void 0 ? 0 : _ref$currentPosition,
      _ref$stepCount = _ref.stepCount,
      stepCount = _ref$stepCount === void 0 ? 5 : _ref$stepCount,
      _ref$direction = _ref.direction,
      direction = _ref$direction === void 0 ? 'horizontal' : _ref$direction,
      _ref$customStyles = _ref.customStyles,
      customStylesFromProps = _ref$customStyles === void 0 ? defaultStyles : _ref$customStyles,
      _ref$labels = _ref.labels,
      labels = _ref$labels === void 0 ? [] : _ref$labels,
      onPress = _ref.onPress,
      renderCustomStepIndicator = _ref.renderStepIndicator,
      renderLabel = _ref.renderLabel;

  var _react$default$useSta = _react.default.useState(0),
      _react$default$useSta2 = (0, _slicedToArray2.default)(_react$default$useSta, 2),
      width = _react$default$useSta2[0],
      setWidth = _react$default$useSta2[1];

  var _react$default$useSta3 = _react.default.useState(0),
      _react$default$useSta4 = (0, _slicedToArray2.default)(_react$default$useSta3, 2),
      height = _react$default$useSta4[0],
      setHeight = _react$default$useSta4[1];

  var _react$default$useSta5 = _react.default.useState(0),
      _react$default$useSta6 = (0, _slicedToArray2.default)(_react$default$useSta5, 2),
      progressBarSize = _react$default$useSta6[0],
      setProgressBarSize = _react$default$useSta6[1];

  var _react$default$useSta7 = _react.default.useState(_objectSpread(_objectSpread({}, defaultStyles), customStylesFromProps)),
      _react$default$useSta8 = (0, _slicedToArray2.default)(_react$default$useSta7, 2),
      customStyles = _react$default$useSta8[0],
      setCustomStyles = _react$default$useSta8[1];

  var progressAnim = _react.default.useRef(new _reactNative.Animated.Value(0)).current;

  var sizeAnim = _react.default.useRef(new _reactNative.Animated.Value(customStyles.stepIndicatorSize)).current;

  var staleSizeAnim = _react.default.useRef(new _reactNative.Animated.Value(customStyles.stepIndicatorSize)).current;

  var borderRadiusAnim = _react.default.useRef(new _reactNative.Animated.Value(customStyles.stepIndicatorSize / 2)).current;

  var stepPressed = function stepPressed(position) {
    if (onPress) {
      onPress(position);
    }
  };

  var effectCustomStyles = function effectCustomStyles() {
    setCustomStyles(_objectSpread(_objectSpread({}, customStyles), customStylesFromProps));
  };

  _react.default.useEffect(effectCustomStyles, [customStylesFromProps]);

  var effectCurrentPosition = function effectCurrentPosition() {
    onCurrentPositionChanged(currentPosition);
  };

  _react.default.useEffect(effectCurrentPosition, [currentPosition, progressBarSize]);

  var renderProgressBarBackground = function renderProgressBarBackground() {
    var progressBarBackgroundStyle = {
      backgroundColor: customStyles.separatorUnFinishedColor,
      position: 'absolute'
    };

    if (direction === 'vertical') {
      progressBarBackgroundStyle = _objectSpread(_objectSpread({}, progressBarBackgroundStyle), {}, {
        left: (width - customStyles.separatorStrokeWidth) / 2,
        top: height / (2 * stepCount),
        bottom: height / (2 * stepCount),
        width: customStyles.separatorStrokeUnfinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeUnfinishedWidth
      });
    } else {
      progressBarBackgroundStyle = _objectSpread(_objectSpread({}, progressBarBackgroundStyle), {}, {
        top: (height - customStyles.separatorStrokeWidth) / 2,
        left: width / (2 * stepCount),
        right: width / (2 * stepCount),
        height: customStyles.separatorStrokeUnfinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeUnfinishedWidth
      });
    }

    return _react.default.createElement(_reactNative.View, {
      onLayout: function onLayout(event) {
        if (direction === 'vertical') {
          setProgressBarSize(event.nativeEvent.layout.height);
        } else {
          setProgressBarSize(event.nativeEvent.layout.width);
        }
      },
      style: progressBarBackgroundStyle
    });
  };

  var renderProgressBar = function renderProgressBar() {
    var progressBarStyle = {
      backgroundColor: customStyles.separatorFinishedColor,
      position: 'absolute'
    };

    if (direction === 'vertical') {
      progressBarStyle = _objectSpread(_objectSpread({}, progressBarStyle), {}, {
        left: (width - customStyles.separatorStrokeWidth) / 2,
        top: height / (2 * stepCount),
        bottom: height / (2 * stepCount),
        width: customStyles.separatorStrokeFinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeFinishedWidth,
        height: progressAnim
      });
    } else {
      progressBarStyle = _objectSpread(_objectSpread({}, progressBarStyle), {}, {
        top: (height - customStyles.separatorStrokeWidth) / 2,
        left: width / (2 * stepCount),
        right: width / (2 * stepCount),
        height: customStyles.separatorStrokeFinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeFinishedWidth,
        width: progressAnim
      });
    }

    return _react.default.createElement(_reactNative.Animated.View, {
      style: progressBarStyle
    });
  };

  var renderStepIndicator = function renderStepIndicator() {
    var steps = [];

    var _loop = function _loop(position) {
      steps.push(_react.default.createElement(_reactNative.TouchableWithoutFeedback, {
        key: position,
        onPress: function onPress() {
          return stepPressed(position);
        }
      }, _react.default.createElement(_reactNative.View, {
        style: [styles.stepContainer, direction === 'vertical' ? {
          flexDirection: 'column'
        } : {
          flexDirection: 'row'
        }]
      }, renderStep(position))));
    };

    for (var position = 0; position < stepCount; position++) {
      _loop(position);
    }

    return _react.default.createElement(_reactNative.View, {
      onLayout: function onLayout(event) {
        setWidth(event.nativeEvent.layout.width);
        setHeight(event.nativeEvent.layout.height);
      },
      style: [styles.stepIndicatorContainer, direction === 'vertical' ? {
        flexDirection: 'column',
        width: customStyles.currentStepIndicatorSize
      } : {
        flexDirection: 'row',
        height: customStyles.currentStepIndicatorSize
      }]
    }, steps);
  };

  var renderStepLabels = function renderStepLabels() {
    if (!labels || labels.length === 0) {
      return;
    }

    var labelViews = labels.map(function (label, index) {
      var selectedStepLabelStyle = index === currentPosition ? {
        color: customStyles.currentStepLabelColor
      } : {
        color: customStyles.labelColor
      };
      return _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
        style: styles.stepLabelItem,
        key: index,
        onPress: function onPress() {
          return stepPressed(index);
        }
      }, _react.default.createElement(_reactNative.View, {
        style: styles.stepLabelItem
      }, renderLabel ? renderLabel({
        position: index,
        stepStatus: getStepStatus(index),
        label: label,
        currentPosition: currentPosition
      }) : _react.default.createElement(_reactNative.Text, {
        style: [styles.stepLabel, selectedStepLabelStyle, {
          fontSize: customStyles.labelSize,
          fontFamily: customStyles.labelFontFamily
        }]
      }, label)));
    });
    return _react.default.createElement(_reactNative.View, {
      style: [styles.stepLabelsContainer, direction === 'vertical' ? {
        flexDirection: 'column',
        paddingHorizontal: 4
      } : {
        flexDirection: 'row',
        paddingVertical: 4
      }, {
        alignItems: customStyles.labelAlign
      }]
    }, labelViews);
  };

  var renderStep = function renderStep(position) {
    var stepStyle;
    var indicatorLabelStyle = {};

    switch (getStepStatus(position)) {
      case STEP_STATUS.CURRENT:
        {
          stepStyle = {
            backgroundColor: customStyles.stepIndicatorCurrentColor,
            borderWidth: customStyles.currentStepStrokeWidth,
            borderColor: customStyles.stepStrokeCurrentColor,
            height: sizeAnim,
            width: sizeAnim,
            borderRadius: borderRadiusAnim,
            overflow: 'hidden'
          };
          indicatorLabelStyle = {
            overflow: 'hidden',
            fontSize: customStyles.currentStepIndicatorLabelFontSize,
            color: customStyles.stepIndicatorLabelCurrentColor
          };
          break;
        }

      case STEP_STATUS.FINISHED:
        {
          stepStyle = {
            backgroundColor: customStyles.stepIndicatorFinishedColor,
            borderWidth: customStyles.stepStrokeWidth,
            borderColor: customStyles.stepStrokeFinishedColor,
            height: staleSizeAnim,
            width: staleSizeAnim,
            borderRadius: customStyles.stepIndicatorSize / 2,
            overflow: 'hidden'
          };
          indicatorLabelStyle = {
            overflow: 'hidden',
            fontSize: customStyles.stepIndicatorLabelFontSize,
            color: customStyles.stepIndicatorLabelFinishedColor
          };
          break;
        }

      case STEP_STATUS.UNFINISHED:
        {
          stepStyle = {
            backgroundColor: customStyles.stepIndicatorUnFinishedColor,
            borderWidth: customStyles.stepStrokeWidth,
            borderColor: customStyles.stepStrokeUnFinishedColor,
            height: staleSizeAnim,
            width: staleSizeAnim,
            borderRadius: customStyles.stepIndicatorSize / 2,
            overflow: 'hidden'
          };
          indicatorLabelStyle = {
            overflow: 'hidden',
            fontSize: customStyles.stepIndicatorLabelFontSize,
            color: customStyles.stepIndicatorLabelUnFinishedColor
          };
          break;
        }

      default:
    }

    return _react.default.createElement(_reactNative.Animated.View, {
      key: 'step-indicator',
      style: [styles.step, stepStyle]
    }, renderCustomStepIndicator ? renderCustomStepIndicator({
      position: position,
      stepStatus: getStepStatus(position)
    }) : _react.default.createElement(_reactNative.Text, {
      style: indicatorLabelStyle
    }, "".concat(position + 1)));
  };

  var getStepStatus = function getStepStatus(stepPosition) {
    if (stepPosition === currentPosition) {
      return STEP_STATUS.CURRENT;
    } else if (stepPosition < currentPosition) {
      return STEP_STATUS.FINISHED;
    } else {
      return STEP_STATUS.UNFINISHED;
    }
  };

  var onCurrentPositionChanged = function onCurrentPositionChanged(position) {
    if (position > stepCount - 1) {
      position = stepCount - 1;
    }

    var animateToPosition = progressBarSize / (stepCount - 1) * position;
    sizeAnim.setValue(customStyles.stepIndicatorSize);
    staleSizeAnim.setValue(customStyles.stepIndicatorSize);
    borderRadiusAnim.setValue(customStyles.stepIndicatorSize / 2);

    _reactNative.Animated.sequence([_reactNative.Animated.timing(progressAnim, {
      toValue: isNaN(animateToPosition) ? 0 : animateToPosition,
      duration: 200,
      useNativeDriver: false
    }), _reactNative.Animated.parallel([_reactNative.Animated.timing(sizeAnim, {
      toValue: customStyles.currentStepIndicatorSize,
      duration: 100,
      useNativeDriver: false
    }), _reactNative.Animated.timing(borderRadiusAnim, {
      toValue: customStyles.currentStepIndicatorSize / 2,
      duration: 100,
      useNativeDriver: false
    })])]).start();
  };

  return _react.default.createElement(_reactNative.View, {
    style: [styles.container, direction === 'vertical' ? {
      flexDirection: 'row',
      flex: 1
    } : {
      flexDirection: 'column'
    }]
  }, width !== 0 && _react.default.createElement(_react.default.Fragment, null, renderProgressBarBackground(), renderProgressBar()), renderStepIndicator(), labels && renderStepLabels());
};

var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: 'rgba(1,0,0,0)'
  },
  stepIndicatorContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around',
    backgroundColor: 'rgba(1,0,0,0)'
  },
  stepLabelsContainer: {
    justifyContent: 'space-around'
  },
  step: {
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 2
  },
  stepContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  stepLabel: {
    fontSize: 12,
    textAlign: 'center',
    fontWeight: '500'
  },
  stepLabelItem: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  }
});

var _default = _react.default.memo(StepIndicator);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,