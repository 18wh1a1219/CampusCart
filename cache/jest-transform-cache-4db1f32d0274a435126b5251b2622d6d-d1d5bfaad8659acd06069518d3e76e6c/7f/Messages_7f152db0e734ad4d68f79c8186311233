24ccb6c6f6a7be0611248cbc3e583ba7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Messages;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNativeGiftedChat = require("react-native-gifted-chat");

var firebase = _interopRequireWildcard(require("firebase"));

var _firestore = require("firebase/firestore");

var _native = require("@react-navigation/native");

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Messages(_ref) {
  var navigation = _ref.navigation;

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      users = _useState2[0],
      setUsers = _useState2[1];

  var _useState3 = (0, _react.useState)(""),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      chat = _useState4[0],
      setChat = _useState4[1];

  var _useState5 = (0, _react.useState)(""),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      text = _useState6[0],
      setText = _useState6[1];

  var isFocused = (0, _native.useIsFocused)();

  var _useState7 = (0, _react.useState)(""),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      img = _useState8[0],
      setImg = _useState8[1];

  var _useState9 = (0, _react.useState)([]),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      msgs = _useState10[0],
      setMsgs = _useState10[1];

  var _useState11 = (0, _react.useState)(""),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      msg = _useState12[0],
      setMsg = _useState12[1];

  var _useState13 = (0, _react.useState)([]),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      usersList = _useState14[0],
      setUsersList = _useState14[1];

  var scrollRef = (0, _react.useRef)();

  var _useState15 = (0, _react.useState)([]),
      _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
      userMsgsInfo = _useState16[0],
      setUserMsgsInfo = _useState16[1];

  var screenWidth = _reactNative.Dimensions.get('window').width;

  var user1 = firebase.auth().currentUser.uid;
  var db = firebase.firestore();
  (0, _react.useEffect)(function () {
    function fetch() {
      firebase.firestore().collection('users').get().then(function (snapshot) {
        var userr = snapshot.docs.map(function (doc) {
          var data = doc.data();
          return (0, _extends2.default)({}, data);
        });
        setUsers(userr);
        var msgsInfo = [];
        var mappedObj = {};
        var u = [];
        console.log("users", userr);
        var count = 0;
        userr.forEach(function (user) {
          var len = userr.length;
          var user2 = user.uid;
          var id = user1 > user2 ? user1 + user2 : user2 + user1;
          var msgs = [];
          var unread = 0;
          firebase.firestore().collection("messages").doc(id).collection("chat").orderBy("createdAt", "asc").onSnapshot(function (querySnapshot) {
            querySnapshot.forEach(function (doc) {
              if (doc.data().from === user2 && doc.data().read === false) {
                unread = unread + 1;
              }

              msgs.push(doc.data());
            });

            if (msgs.length > 0) {
              var res = userr.find(function (userData) {
                return userData.uid === user2;
              });
              res.unread = unread;
              u.push(res);
            }

            count = count + 1;

            if (count === len) {
              console.log(u);
              setUsersList(u);
            }
          });
        });
      });
    }

    isFocused && fetch();
  }, [isFocused]);
  return _react.default.createElement(_reactNative.View, {
    style: styles.Container
  }, _react.default.createElement(_reactNative.View, {
    style: styles.card_template
  }, usersList.map(function (user) {
    return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {
      style: styles.button2,
      onPress: function onPress() {
        return navigation.navigate('Chat', {
          paramKey: user.fullName
        });
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.buttonText
    }, user.fullName, " ", user.unread)), _react.default.createElement(_reactNative.View, {
      style: {
        height: '2%'
      }
    }, _react.default.createElement(_reactNative.Text, null)));
  })));
}

var styles = _reactNative.StyleSheet.create({
  contentContainer: {
    marginTop: -170,
    paddingVertical: 20,
    backgroundColor: '#F5FCFF'
  },
  Container: {
    height: '100%',
    alignItems: 'center'
  },
  name: {
    top: '2%',
    fontWeight: 'bold',
    alignSelf: 'center',
    color: 'darkblue'
  },
  sender: {
    left: '83%',
    padding: '4%',
    borderWidth: 2,
    margin: '2%',
    borderColor: 'gray'
  },
  receiver: {
    left: '3%',
    padding: '4%',
    borderWidth: 2,
    margin: '2%'
  },
  textInput: {
    width: 300,
    fontSize: 18,
    borderWidth: 2,
    borderColor: 'gray',
    padding: 10,
    margin: 5,
    backgroundColor: '#ffffff'
  },
  card_template: {
    margin: '5%',
    width: '80%',
    alignContent: 'center',
    flexDirection: 'column',
    justifyContent: 'space-between'
  },
  b: {
    marginTop: '160%'
  },
  button2: {
    height: 50,
    borderRadius: 15,
    borderWidth: 3,
    borderColor: '#ffd60a',
    backgroundColor: '#ffd60a',
    padding: 9
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,