185fc342acc79d3b216ca40822517cdb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Feed;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _firebase = _interopRequireDefault(require("firebase"));

var _firebaseMethods = require("../API/firebaseMethods");

var _reactNativePaper = require("react-native-paper");

var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));

var _Cart = _interopRequireDefault(require("./Cart"));

var _reactNativeElementDropdown = require("react-native-element-dropdown");

var _radioButtons = require("react-native-radio-buttons/lib/radio-buttons");

var _native = require("@react-navigation/native");

var _colors = require("react-native-paper/lib/typescript/styles/colors");

var _Loaddd = _interopRequireDefault(require("./Loaddd"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Feed(_ref) {
  var navigation = _ref.navigation;

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      Name = _useState2[0],
      setName = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      price = _useState4[0],
      setPrice = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      image = _useState6[0],
      setImage = _useState6[1];

  var _useState7 = (0, _react.useState)(''),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      desc = _useState8[0],
      setDesc = _useState8[1];

  var _useState9 = (0, _react.useState)(''),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      allPosts = _useState10[0],
      setAllPosts = _useState10[1];

  var _useState11 = (0, _react.useState)([]),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      post = _useState12[0],
      setPost = _useState12[1];

  var _useState13 = (0, _react.useState)([]),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      r = _useState14[0],
      setR = _useState14[1];

  var isFocused = (0, _native.useIsFocused)();

  var _useState15 = (0, _react.useState)(0),
      _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
      rating = _useState16[0],
      setRating = _useState16[1];

  var _useState17 = (0, _react.useState)(0),
      _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
      count = _useState18[0],
      setCount = _useState18[1];

  var _useState19 = (0, _react.useState)(0),
      _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
      avgrating = _useState20[0],
      setAvgRating = _useState20[1];

  var _useState21 = (0, _react.useState)(null),
      _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
      category = _useState22[0],
      setCategory = _useState22[1];

  var _useState23 = (0, _react.useState)(false),
      _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
      isFocus = _useState24[0],
      setIsFocus = _useState24[1];

  var _useState25 = (0, _react.useState)(''),
      _useState26 = (0, _slicedToArray2.default)(_useState25, 2),
      docId = _useState26[0],
      setDocId = _useState26[1];

  var _useState27 = (0, _react.useState)(true),
      _useState28 = (0, _slicedToArray2.default)(_useState27, 2),
      loading = _useState28[0],
      setLoading = _useState28[1];

  (0, _react.useEffect)(function () {
    function fetchUserPosts() {
      setCategory('All');

      _firebase.default.firestore().collection("posts").orderBy("createdAt", "desc").where("status", "==", "available").get().then(function (snapshot) {
        var posts = snapshot.docs.map(function (doc) {
          var data = doc.data();

          _firebase.default.storage().ref('/' + data.image).getDownloadURL();

          return (0, _extends2.default)({}, data);
        });
        setAllPosts(posts);
        setPost(posts);
      }).catch(function () {
        console.log("Handled");
      });
    }

    isFocused && fetchUserPosts();
  }, [isFocused]);

  var change = function change(value) {
    if (value === 'All') {
      _firebase.default.firestore().collection("posts").orderBy("createdAt", "desc").where("status", "==", "available").get().then(function (snapshot) {
        var posts = snapshot.docs.map(function (doc) {
          var data = doc.data();

          _firebase.default.storage().ref('/' + data.image).getDownloadURL();

          return (0, _extends2.default)({}, data);
        });
        setAllPosts(posts);
        setPost(posts);
      }).catch(function () {});
    } else {
      setPost(allPosts.filter(function (item) {
        return value === item.category;
      }));
    }
  };

  var renderLabel = function renderLabel() {
    if (category || isFocus) {
      return _react.default.createElement(_reactNative.Text, {
        style: [styles.label, isFocus && {
          color: 'black'
        }]
      }, "Choose Category");
    }

    return null;
  };

  var data = [{
    label: 'All',
    value: 'All'
  }, {
    label: 'Books',
    value: 'Books'
  }, {
    label: 'Stationary',
    value: 'Stationary'
  }, {
    label: 'Electronics',
    value: 'Electronics'
  }, {
    label: 'Clothes',
    value: 'Clothes'
  }, {
    label: 'Others',
    value: 'Others'
  }];

  var handlePress = function handlePress(username) {
    setName(username);
  };

  var Product = [];

  var addToCart = function addToCart(image) {
    setLoading(false);

    var d = _firebase.default.firestore().collection('posts').where("image", "==", image).get().then(function (querySnapshot) {
      var id = 0;
      console.log("heyyyy");
      querySnapshot.forEach(function (doc) {
        return id = doc.id;
      });
      setDocId(id);

      var data = _firebase.default.firestore().collection("posts").doc(id).get().then(function (querySnapshot) {
        var data = querySnapshot.data();

        _firebase.default.firestore().collection('Cartt').doc(_firebase.default.auth().currentUser.uid).collection('cart').get().then(function (snapshot) {
          if (snapshot.empty) {
            _firebase.default.firestore().collection('Cartt').doc(_firebase.default.auth().currentUser.uid).collection('cart').doc(id).set(data).then(function () {
              setLoading(true);
              alert("Successfully added to Cat");
            });
          } else {
            _firebase.default.firestore().collection('Cartt').doc(_firebase.default.auth().currentUser.uid).collection('cart').get().then(function (querySnapshot) {
              querySnapshot.forEach(function (snapshot) {
                var doc = snapshot.data();

                if (doc.userId === data.userId) {
                  _firebase.default.firestore().collection('Cartt').doc(_firebase.default.auth().currentUser.uid).collection('cart').doc(id).set(data).then(function () {
                    setLoading(true);
                    alert("Successfully added to Cart");
                  });
                } else {
                  setLoading(true);
                  alert('Seller must be same to buy all at once');
                }
              });
            });
          }
        });
      });
    });
  };

  var handleAddToCart = function handleAddToCart(item) {
    addToCart(item);
  };

  return _react.default.createElement(_reactNative.ImageBackground, {
    source: require('../assets/feeed.jpeg'),
    resizeMode: "stretch",
    style: styles.image
  }, loading ? _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.View, {
    style: styles.container1
  }, renderLabel(), _react.default.createElement(_reactNativeElementDropdown.Dropdown, {
    style: [styles.dropdown, isFocus && {
      borderColor: 'darkblue'
    }],
    placeholderStyle: styles.placeholderStyle,
    selectedTextStyle: styles.selectedTextStyle,
    inputSearchStyle: styles.inputSearchStyle,
    iconStyle: styles.iconStyle,
    data: data,
    search: true,
    maxHeight: 300,
    labelField: "label",
    valueField: "value",
    placeholder: !isFocus ? 'Categories' : '...',
    searchPlaceholder: "Search...",
    value: category,
    onFocus: function onFocus() {
      return setIsFocus(true);
    },
    onBlur: function onBlur() {
      return setIsFocus(false);
    },
    onChange: function onChange(item) {
      setCategory(item.value);
      change(item.value);
      setIsFocus(false);
    }
  })), _react.default.createElement(_reactNative.View, {
    style: styles.b
  }, post.map(function (item, key) {
    return _react.default.createElement(_reactNative.Text, {
      key: key
    }, item.userId != _firebase.default.auth().currentUser.uid ? _react.default.createElement(_reactNative.View, {
      style: {
        padding: 5,
        width: '95%'
      }
    }, _react.default.createElement(_reactNativePaper.Card, {
      style: {
        height: 530,
        shadowColor: "#000",
        marginBottom: -5,
        width: 380,
        marginLeft: 10,
        shadowOffset: {
          width: 0,
          height: 4
        },
        shadowOpacity: 0.60,
        shadowRadius: 4.75,
        elevation: 8,
        borderRadius: 20
      }
    }, _react.default.createElement(_reactNativePaper.Card.Content, null, _react.default.createElement(_reactNativePaper.Card.Actions, null, _react.default.createElement(_reactNativePaper.Button, {
      style: {
        alignSelf: 'center',
        marginTop: '-2%'
      },
      onPress: function onPress() {
        return navigation.navigate('UserProfile', {
          paramKey: item.userId
        });
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.Book
    }, item.userName, "  ", _react.default.createElement(_reactNative.Image, {
      style: styles.img,
      source: require('../assets/star.png')
    }), item.userRating, " ")))), _react.default.createElement(_reactNativePaper.Card.Cover, {
      style: styles.card_image,
      source: {
        uri: item.image
      }
    }), _react.default.createElement(_reactNative.Text, null), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title
    }, " Product: ", item.productName), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title
    }, " Category: ", item.category, " "), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title
    }, " Description: ", item.desc, " "), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title
    }, " Price: ", "\u20B9", " ", item.price), _react.default.createElement(_reactNativePaper.Card.Actions, null, _react.default.createElement(_reactNativePaper.Button, {
      style: styles.button,
      onPress: function onPress() {
        return addToCart(item.image);
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.Book
    }, "Add to Cart"))), _react.default.createElement(_reactNativePaper.Card.Actions, null, _react.default.createElement(_reactNativePaper.Button, {
      style: styles.button1,
      onPress: function onPress() {
        return navigation.navigate('Chat', {
          paramKey: item.userName
        });
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.Book
    }, "Book")))), _react.default.createElement(_reactNative.Text, null)) : null);
  }))) : _react.default.createElement(_Loaddd.default, null));
}

var styles = _reactNative.StyleSheet.create({
  img: {
    height: 24,
    width: 24
  },
  image: {
    flex: 1,
    justifyContent: "center"
  },
  background: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    height: null,
    width: '100%'
  },
  card_title1: {
    fontWeight: 'bold',
    top: 2,
    left: 20,
    color: "black",
    fontStyle: 'italic',
    fontSize: 15,
    padding: 2,
    marginBottom: 5
  },
  Book: {
    color: 'darkblue'
  },
  container1: {
    backgroundColor: 'white',
    padding: 16,
    fontFamily: 'Montserrat-Italic'
  },
  dropdown: {
    height: 50,
    borderColor: 'gray',
    borderWidth: 0.5,
    borderRadius: 8,
    alignSelf: 'center',
    width: '80%',
    marginTop: '3%'
  },
  icon: {
    marginRight: 5
  },
  label: {
    position: 'absolute',
    left: 22,
    zIndex: 999,
    paddingHorizontal: 8,
    fontSize: 14,
    marginTop: 5,
    paddingLeft: 25
  },
  placeholderStyle: {
    fontSize: 16
  },
  selectedTextStyle: {
    fontSize: 16
  },
  iconStyle: {
    width: 20,
    height: 20
  },
  inputSearchStyle: {
    height: 40,
    fontSize: 16
  },
  b: {
    top: '0.5%',
    width: '100%'
  },
  card_template: {
    width: 400,
    height: 540,
    marginBottom: '3%'
  },
  card_image: {
    width: '80%',
    height: 230,
    borderRadius: 5,
    alignSelf: 'center'
  },
  text_container: {
    position: "absolute",
    width: 250,
    height: 100,
    bottom: 0,
    padding: 5,
    backgroundColor: "rgba(0,0,0, 0.3)",
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10
  },
  card_title: {
    top: -7,
    left: 20,
    color: "black",
    fontFamily: 'Montserrat-Italic',
    fontSize: 15,
    padding: 2
  },
  background: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  button: {
    width: 150,
    left: 20,
    padding: 0,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 10,
    alignSelf: 'center'
  },
  button1: {
    top: -63,
    left: 200,
    width: 120,
    padding: 0,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 10,
    alignSelf: 'center'
  },
  buttonText: {
    fontSize: 18,
    color: '#0b2b4f',
    textAlign: 'center',
    padding: '5%',
    color: 'darkblue'
  },
  container: {
    height: '100%',
    width: '100%',
    backgroundColor: '#001d3d',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    textAlign: 'center',
    fontSize: 20,
    fontStyle: 'italic',
    marginTop: '2%',
    marginBottom: '10%',
    fontWeight: 'bold',
    color: 'darkblue'
  },
  titleText: {
    textAlign: 'center',
    fontSize: 20,
    fontWeight: 'bold',
    color: 'darkblue',
    top: '-23%',
    left: '-30%'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,