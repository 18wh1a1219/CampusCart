81f2e23b7d197c958a203f59e2325a06
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["index", "total", "style", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CardCover = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _colors = require("../../styles/colors");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var CardCover = function CardCover(_ref) {
  var index = _ref.index,
      total = _ref.total,
      style = _ref.style,
      theme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var roundness = theme.roundness;
  var coverStyle;

  if (index === 0) {
    if (total === 1) {
      coverStyle = {
        borderRadius: roundness
      };
    } else {
      coverStyle = {
        borderTopLeftRadius: roundness,
        borderTopRightRadius: roundness
      };
    }
  } else if (typeof total === 'number' && index === total - 1) {
    coverStyle = {
      borderBottomLeftRadius: roundness
    };
  }

  return React.createElement(_reactNative.View, {
    style: [styles.container, coverStyle, style]
  }, React.createElement(_reactNative.Image, _extends({}, rest, {
    style: [styles.image, coverStyle]
  })));
};

exports.CardCover = CardCover;
CardCover.displayName = 'Card.Cover';

var styles = _reactNative.StyleSheet.create({
  container: {
    height: 195,
    backgroundColor: _colors.grey200,
    overflow: 'hidden'
  },
  image: {
    flex: 1,
    height: undefined,
    width: undefined,
    padding: 16,
    justifyContent: 'flex-end'
  }
});

var _default = (0, _theming.withTheme)(CardCover);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQ0EsSUFBTUEsU0FBUyxHQUFHLFNBQVpBLFNBQVksT0FBb0Q7RUFBQSxJQUFqREMsS0FBaUQsUUFBakRBLEtBQWlEO0VBQUEsSUFBMUNDLEtBQTBDLFFBQTFDQSxLQUEwQztFQUFBLElBQW5DQyxLQUFtQyxRQUFuQ0EsS0FBbUM7RUFBQSxJQUE1QkMsS0FBNEIsUUFBNUJBLEtBQTRCO0VBQUEsSUFBbEJDLElBQWtCO0VBQ3BFLElBQVFDLFNBQVIsR0FBc0JGLEtBQXRCLENBQVFFLFNBQVI7RUFFQSxJQUFJQyxVQUFKOztFQUVBLElBQUlOLEtBQUssS0FBSyxDQUFkLEVBQWlCO0lBQ2YsSUFBSUMsS0FBSyxLQUFLLENBQWQsRUFBaUI7TUFDZkssVUFBVSxHQUFHO1FBQ1hDLFlBQVksRUFBRUY7TUFESCxDQUFiQztJQURGLE9BSU87TUFDTEEsVUFBVSxHQUFHO1FBQ1hFLG1CQUFtQixFQUFFSCxTQURWO1FBRVhJLG9CQUFvQixFQUFFSjtNQUZYLENBQWJDO0lBSUQ7RUFWSCxPQVdPLElBQUksT0FBT0wsS0FBUCxLQUFpQixRQUFqQixJQUE2QkQsS0FBSyxLQUFLQyxLQUFLLEdBQUcsQ0FBbkQsRUFBc0Q7SUFDM0RLLFVBQVUsR0FBRztNQUNYSSxzQkFBc0IsRUFBRUw7SUFEYixDQUFiQztFQUdEOztFQUVELE9BQ0VLLG9CQUFDQyxpQkFBRDtJQUFNVixLQUFLLEVBQUUsQ0FBQ1csTUFBTSxDQUFDQyxTQUFSLEVBQW1CUixVQUFuQixFQUErQkosS0FBL0I7RUFBYixHQUNFUyxvQkFBQ0Msa0JBQUQsZUFBV1IsSUFBWDtJQUFpQkYsS0FBSyxFQUFFLENBQUNXLE1BQU0sQ0FBQ0UsS0FBUixFQUFlVCxVQUFmO0VBQXhCLEdBREYsQ0FERjtBQXRCRjs7O0FBNkJBUCxTQUFTLENBQUNpQixXQUFWakIsR0FBd0IsWUFBeEJBOztBQUNBLElBQU1jLE1BQU0sR0FBR0ksd0JBQVdDLE1BQVhELENBQWtCO0VBQy9CSCxTQUFTLEVBQUU7SUFDVEssTUFBTSxFQUFFLEdBREM7SUFFVEMsZUFBZSxFQUFFQyxlQUZSO0lBR1RDLFFBQVEsRUFBRTtFQUhELENBRG9CO0VBTS9CUCxLQUFLLEVBQUU7SUFDTFEsSUFBSSxFQUFFLENBREQ7SUFFTEosTUFBTSxFQUFFSyxTQUZIO0lBR0xDLEtBQUssRUFBRUQsU0FIRjtJQUlMRSxPQUFPLEVBQUUsRUFKSjtJQUtMQyxjQUFjLEVBQUU7RUFMWDtBQU53QixDQUFsQlYsQ0FBZjs7ZUFlZSx3QkFBVWxCLFNBQVYiLCJuYW1lcyI6WyJDYXJkQ292ZXIiLCJpbmRleCIsInRvdGFsIiwic3R5bGUiLCJ0aGVtZSIsInJlc3QiLCJyb3VuZG5lc3MiLCJjb3ZlclN0eWxlIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsIlJlYWN0IiwiX3JlYWN0TmF0aXZlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiaW1hZ2UiLCJkaXNwbGF5TmFtZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJncmV5MjAwIiwib3ZlcmZsb3ciLCJmbGV4IiwidW5kZWZpbmVkIiwid2lkdGgiLCJwYWRkaW5nIiwianVzdGlmeUNvbnRlbnQiXSwic291cmNlcyI6WyJDYXJkQ292ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIFZpZXcsIFZpZXdTdHlsZSwgSW1hZ2UsIFN0eWxlUHJvcCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi9jb3JlL3RoZW1pbmcnO1xuaW1wb3J0IHsgZ3JleTIwMCB9IGZyb20gJy4uLy4uL3N0eWxlcy9jb2xvcnMnO1xuXG50eXBlIFByb3BzID0gUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRoUmVmPHR5cGVvZiBJbWFnZT4gJiB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGluZGV4PzogbnVtYmVyO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICB0b3RhbD86IG51bWJlcjtcbiAgc3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFJlYWN0TmF0aXZlUGFwZXIuVGhlbWU7XG59O1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIHNob3cgYSBjb3ZlciBpbWFnZSBpbnNpZGUgYSBDYXJkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgY2xhc3M9XCJtZWRpdW1cIiBzcmM9XCJzY3JlZW5zaG90cy9jYXJkLWNvdmVyLnBuZ1wiIC8+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBDYXJkIH0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcbiAqXG4gKiBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IChcbiAqICAgPENhcmQ+XG4gKiAgICAgPENhcmQuQ292ZXIgc291cmNlPXt7IHVyaTogJ2h0dHBzOi8vcGljc3VtLnBob3Rvcy83MDAnIH19IC8+XG4gKiAgIDwvQ2FyZD5cbiAqICk7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgTXlDb21wb25lbnQ7XG4gKiBgYGBcbiAqXG4gKiBAZXh0ZW5kcyBJbWFnZSBwcm9wcyBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ltYWdlI3Byb3BzXG4gKi9cbmNvbnN0IENhcmRDb3ZlciA9ICh7IGluZGV4LCB0b3RhbCwgc3R5bGUsIHRoZW1lLCAuLi5yZXN0IH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcm91bmRuZXNzIH0gPSB0aGVtZTtcblxuICBsZXQgY292ZXJTdHlsZTtcblxuICBpZiAoaW5kZXggPT09IDApIHtcbiAgICBpZiAodG90YWwgPT09IDEpIHtcbiAgICAgIGNvdmVyU3R5bGUgPSB7XG4gICAgICAgIGJvcmRlclJhZGl1czogcm91bmRuZXNzLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY292ZXJTdHlsZSA9IHtcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogcm91bmRuZXNzLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogcm91bmRuZXNzLFxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRvdGFsID09PSAnbnVtYmVyJyAmJiBpbmRleCA9PT0gdG90YWwgLSAxKSB7XG4gICAgY292ZXJTdHlsZSA9IHtcbiAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHJvdW5kbmVzcyxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5jb250YWluZXIsIGNvdmVyU3R5bGUsIHN0eWxlXX0+XG4gICAgICA8SW1hZ2Ugey4uLnJlc3R9IHN0eWxlPXtbc3R5bGVzLmltYWdlLCBjb3ZlclN0eWxlXX0gLz5cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5DYXJkQ292ZXIuZGlzcGxheU5hbWUgPSAnQ2FyZC5Db3Zlcic7XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGhlaWdodDogMTk1LFxuICAgIGJhY2tncm91bmRDb2xvcjogZ3JleTIwMCxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIH0sXG4gIGltYWdlOiB7XG4gICAgZmxleDogMSxcbiAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgIHBhZGRpbmc6IDE2LFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShDYXJkQ292ZXIpO1xuXG4vLyBAY29tcG9uZW50LWRvY3MgaWdub3JlLW5leHQtbGluZVxuZXhwb3J0IHsgQ2FyZENvdmVyIH07XG4iXX0=