2782e494d114325bd058ab132647aedc
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault2(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _Portal = _interopRequireDefault(require("../Portal/Portal"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _MenuItem = _interopRequireDefault(require("./MenuItem"));

var _constants = require("../../constants");

var _addEventListener = require("../../utils/addEventListener");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SCREEN_INDENT = 8;
var ANIMATION_DURATION = 250;

var EASING = _reactNative.Easing.bezier(0.4, 0, 0.2, 1);

var Menu = function (_React$Component) {
  (0, _inherits2.default)(Menu, _React$Component);

  var _super = _createSuper(Menu);

  function Menu() {
    var _this;

    (0, _classCallCheck2.default)(this, Menu);
    _this = _super.apply(this, arguments);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "state", {
      rendered: _this.props.visible,
      top: 0,
      left: 0,
      menuLayout: {
        width: 0,
        height: 0
      },
      anchorLayout: {
        width: 0,
        height: 0
      },
      opacityAnimation: new _reactNative.Animated.Value(0),
      scaleAnimation: new _reactNative.Animated.ValueXY({
        x: 0,
        y: 0
      })
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "anchor", null);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "menu", null);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "backHandlerSubscription", void 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "dimensionsSubscription", void 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "isCoordinate", function (anchor) {
      return !React.isValidElement(anchor) && typeof (anchor === null || anchor === void 0 ? void 0 : anchor.x) === 'number' && typeof (anchor === null || anchor === void 0 ? void 0 : anchor.y) === 'number';
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "measureMenuLayout", function () {
      return new Promise(function (resolve) {
        if (_this.menu) {
          _this.menu.measureInWindow(function (x, y, width, height) {
            resolve({
              x: x,
              y: y,
              width: width,
              height: height
            });
          });
        }
      });
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "measureAnchorLayout", function () {
      return new Promise(function (resolve) {
        var anchor = _this.props.anchor;

        if (_this.isCoordinate(anchor)) {
          resolve({
            x: anchor.x,
            y: anchor.y,
            width: 0,
            height: 0
          });
          return;
        }

        if (_this.anchor) {
          _this.anchor.measureInWindow(function (x, y, width, height) {
            resolve({
              x: x,
              y: y,
              width: width,
              height: height
            });
          });
        }
      });
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "updateVisibility", function _callee() {
      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _regenerator.default.awrap(Promise.resolve());

            case 2:
              if (_this.props.visible) {
                _this.show();
              } else {
                _this.hide();
              }

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, null, Promise);
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "isBrowser", function () {
      return _reactNative.Platform.OS === 'web' && 'document' in global;
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "focusFirstDOMNode", function (el) {
      if (el && _this.isBrowser()) {
        var node = (0, _reactNative.findNodeHandle)(el);
        var focusableNode = node.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        focusableNode === null || focusableNode === void 0 ? void 0 : focusableNode.focus();
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleDismiss", function () {
      if (_this.props.visible) {
        _this.props.onDismiss();
      }

      return true;
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleKeypress", function (e) {
      if (e.key === 'Escape') {
        _this.props.onDismiss();
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "attachListeners", function () {
      _this.backHandlerSubscription = (0, _addEventListener.addEventListener)(_reactNative.BackHandler, 'hardwareBackPress', _this.handleDismiss);
      _this.dimensionsSubscription = (0, _addEventListener.addEventListener)(_reactNative.Dimensions, 'change', _this.handleDismiss);
      _this.isBrowser() && document.addEventListener('keyup', _this.handleKeypress);
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "removeListeners", function () {
      var _this$backHandlerSubs, _this$dimensionsSubsc;

      (_this$backHandlerSubs = _this.backHandlerSubscription) === null || _this$backHandlerSubs === void 0 ? void 0 : _this$backHandlerSubs.remove();
      (_this$dimensionsSubsc = _this.dimensionsSubscription) === null || _this$dimensionsSubsc === void 0 ? void 0 : _this$dimensionsSubsc.remove();
      _this.isBrowser() && document.removeEventListener('keyup', _this.handleKeypress);
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "show", function _callee2() {
      var windowLayout, _await$Promise$all, _await$Promise$all2, menuLayout, anchorLayout;

      return _regenerator.default.async(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              windowLayout = _reactNative.Dimensions.get('window');
              _context2.next = 3;
              return _regenerator.default.awrap(Promise.all([_this.measureMenuLayout(), _this.measureAnchorLayout()]));

            case 3:
              _await$Promise$all = _context2.sent;
              _await$Promise$all2 = (0, _slicedToArray2.default)(_await$Promise$all, 2);
              menuLayout = _await$Promise$all2[0];
              anchorLayout = _await$Promise$all2[1];

              if (!(!windowLayout.width || !windowLayout.height || !menuLayout.width || !menuLayout.height || !anchorLayout.width && !_this.isCoordinate(_this.props.anchor) || !anchorLayout.height && !_this.isCoordinate(_this.props.anchor))) {
                _context2.next = 10;
                break;
              }

              requestAnimationFrame(_this.show);
              return _context2.abrupt("return");

            case 10:
              _this.setState(function () {
                return {
                  left: anchorLayout.x,
                  top: anchorLayout.y,
                  anchorLayout: {
                    height: anchorLayout.height,
                    width: anchorLayout.width
                  },
                  menuLayout: {
                    width: menuLayout.width,
                    height: menuLayout.height
                  }
                };
              }, function () {
                _this.attachListeners();

                var animation = _this.props.theme.animation;

                _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.state.scaleAnimation, {
                  toValue: {
                    x: menuLayout.width,
                    y: menuLayout.height
                  },
                  duration: ANIMATION_DURATION * animation.scale,
                  easing: EASING,
                  useNativeDriver: true
                }), _reactNative.Animated.timing(_this.state.opacityAnimation, {
                  toValue: 1,
                  duration: ANIMATION_DURATION * animation.scale,
                  easing: EASING,
                  useNativeDriver: true
                })]).start(function (_ref) {
                  var finished = _ref.finished;

                  if (finished) {
                    _this.focusFirstDOMNode(_this.menu);
                  }
                });
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, null, null, null, Promise);
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "hide", function () {
      _this.removeListeners();

      var animation = _this.props.theme.animation;

      _reactNative.Animated.timing(_this.state.opacityAnimation, {
        toValue: 0,
        duration: ANIMATION_DURATION * animation.scale,
        easing: EASING,
        useNativeDriver: true
      }).start(function (_ref2) {
        var finished = _ref2.finished;

        if (finished) {
          _this.setState({
            menuLayout: {
              width: 0,
              height: 0
            },
            rendered: false
          });

          _this.state.scaleAnimation.setValue({
            x: 0,
            y: 0
          });

          _this.focusFirstDOMNode(_this.anchor);
        }
      });
    });

    return _this;
  }

  (0, _createClass2.default)(Menu, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.visible !== this.props.visible) {
        this.updateVisibility();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeListeners();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          visible = _this$props.visible,
          anchor = _this$props.anchor,
          contentStyle = _this$props.contentStyle,
          style = _this$props.style,
          children = _this$props.children,
          theme = _this$props.theme,
          statusBarHeight = _this$props.statusBarHeight,
          onDismiss = _this$props.onDismiss,
          overlayAccessibilityLabel = _this$props.overlayAccessibilityLabel;
      var _this$state = this.state,
          rendered = _this$state.rendered,
          menuLayout = _this$state.menuLayout,
          anchorLayout = _this$state.anchorLayout,
          opacityAnimation = _this$state.opacityAnimation,
          scaleAnimation = _this$state.scaleAnimation;
      var _this$state2 = this.state,
          left = _this$state2.left,
          top = _this$state2.top;

      var additionalVerticalValue = _reactNative.Platform.select({
        android: statusBarHeight,
        default: 0
      });

      var scaleTransforms = [{
        scaleX: scaleAnimation.x.interpolate({
          inputRange: [0, menuLayout.width],
          outputRange: [0, 1]
        })
      }, {
        scaleY: scaleAnimation.y.interpolate({
          inputRange: [0, menuLayout.height],
          outputRange: [0, 1]
        })
      }];

      var windowLayout = _reactNative.Dimensions.get('window');

      var positionTransforms = [];

      if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {
        positionTransforms.push({
          translateX: scaleAnimation.x.interpolate({
            inputRange: [0, menuLayout.width],
            outputRange: [-(menuLayout.width / 2), 0]
          })
        });

        if (left < SCREEN_INDENT) {
          left = SCREEN_INDENT;
        }
      } else {
        positionTransforms.push({
          translateX: scaleAnimation.x.interpolate({
            inputRange: [0, menuLayout.width],
            outputRange: [menuLayout.width / 2, 0]
          })
        });
        left += anchorLayout.width - menuLayout.width;
        var right = left + menuLayout.width;

        if (right > windowLayout.width - SCREEN_INDENT) {
          left = windowLayout.width - SCREEN_INDENT - menuLayout.width;
        }
      }

      var scrollableMenuHeight = 0;

      if (top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && top <= windowLayout.height - top) {
        scrollableMenuHeight = windowLayout.height - top - SCREEN_INDENT - additionalVerticalValue;
      } else if (top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && top >= windowLayout.height - top && top <= menuLayout.height - anchorLayout.height + SCREEN_INDENT - additionalVerticalValue) {
        scrollableMenuHeight = top + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;
      }

      scrollableMenuHeight = scrollableMenuHeight > windowLayout.height - 2 * SCREEN_INDENT ? windowLayout.height - 2 * SCREEN_INDENT : scrollableMenuHeight;

      if (top <= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue || top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && top <= windowLayout.height - top) {
        positionTransforms.push({
          translateY: scaleAnimation.y.interpolate({
            inputRange: [0, menuLayout.height],
            outputRange: [-((scrollableMenuHeight || menuLayout.height) / 2), 0]
          })
        });

        if (top < SCREEN_INDENT) {
          top = SCREEN_INDENT;
        }
      } else {
        positionTransforms.push({
          translateY: scaleAnimation.y.interpolate({
            inputRange: [0, menuLayout.height],
            outputRange: [(scrollableMenuHeight || menuLayout.height) / 2, 0]
          })
        });
        top += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);
        var bottom = top + (scrollableMenuHeight || menuLayout.height) + additionalVerticalValue;

        if (bottom > windowLayout.height - SCREEN_INDENT) {
          top = scrollableMenuHeight === windowLayout.height - 2 * SCREEN_INDENT ? -SCREEN_INDENT * 2 : windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue;
        }
      }

      var shadowMenuContainerStyle = (0, _extends2.default)({
        opacity: opacityAnimation,
        transform: scaleTransforms,
        borderRadius: theme.roundness
      }, scrollableMenuHeight ? {
        height: scrollableMenuHeight
      } : {});
      var positionStyle = (0, _extends2.default)({
        top: this.isCoordinate(anchor) ? top : top + additionalVerticalValue
      }, _reactNative.I18nManager.isRTL ? {
        right: left
      } : {
        left: left
      });
      return React.createElement(_reactNative.View, {
        ref: function ref(_ref3) {
          _this2.anchor = _ref3;
        },
        collapsable: false
      }, this.isCoordinate(anchor) ? null : anchor, rendered ? React.createElement(_Portal.default, null, React.createElement(_reactNative.TouchableWithoutFeedback, {
        accessibilityLabel: overlayAccessibilityLabel,
        accessibilityRole: "button",
        onPress: onDismiss
      }, React.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.absoluteFill
      })), React.createElement(_reactNative.View, {
        ref: function ref(_ref4) {
          _this2.menu = _ref4;
        },
        collapsable: false,
        accessibilityViewIsModal: visible,
        style: [styles.wrapper, positionStyle, style],
        pointerEvents: visible ? 'box-none' : 'none',
        onAccessibilityEscape: onDismiss
      }, React.createElement(_reactNative.Animated.View, {
        style: {
          transform: positionTransforms
        }
      }, React.createElement(_Surface.default, {
        style: [styles.shadowMenuContainer, shadowMenuContainerStyle, contentStyle]
      }, scrollableMenuHeight && React.createElement(_reactNative.ScrollView, null, children) || React.createElement(React.Fragment, null, children))))) : null);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.visible && !prevState.rendered) {
        return {
          rendered: true
        };
      }

      return null;
    }
  }]);
  return Menu;
}(React.Component);

_defineProperty(Menu, "Item", _MenuItem.default);

_defineProperty(Menu, "defaultProps", {
  statusBarHeight: _constants.APPROX_STATUSBAR_HEIGHT,
  overlayAccessibilityLabel: 'Close menu'
});

var styles = _reactNative.StyleSheet.create({
  wrapper: {
    position: 'absolute'
  },
  shadowMenuContainer: {
    opacity: 0,
    paddingVertical: 8,
    elevation: 8
  }
});

var _default = (0, _theming.withTheme)(Menu);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,