4b7c91d6406fa541df9c17366d427aed
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["disabled", "compact", "mode", "dark", "loading", "icon", "color", "children", "uppercase", "accessibilityLabel", "accessibilityHint", "onPress", "onLongPress", "style", "theme", "contentStyle", "labelStyle", "testID", "accessible"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _ActivityIndicator = _interopRequireDefault(require("./ActivityIndicator"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple/TouchableRipple"));

var _colors = require("../styles/colors");

var _theming = require("../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var Button = function Button(_ref) {
  var _StyleSheet$flatten;

  var disabled = _ref.disabled,
      compact = _ref.compact,
      _ref$mode = _ref.mode,
      mode = _ref$mode === void 0 ? 'text' : _ref$mode,
      dark = _ref.dark,
      loading = _ref.loading,
      icon = _ref.icon,
      buttonColor = _ref.color,
      children = _ref.children,
      _ref$uppercase = _ref.uppercase,
      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,
      accessibilityLabel = _ref.accessibilityLabel,
      accessibilityHint = _ref.accessibilityHint,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      style = _ref.style,
      theme = _ref.theme,
      contentStyle = _ref.contentStyle,
      labelStyle = _ref.labelStyle,
      testID = _ref.testID,
      accessible = _ref.accessible,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(disabled || mode !== 'contained' ? 0 : 2)),
      elevation = _React$useRef.current;

  React.useEffect(function () {
    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);
  }, [mode, elevation, disabled]);

  var handlePressIn = function handlePressIn() {
    if (mode === 'contained') {
      var scale = theme.animation.scale;

      _reactNative.Animated.timing(elevation, {
        toValue: 8,
        duration: 200 * scale,
        useNativeDriver: true
      }).start();
    }
  };

  var handlePressOut = function handlePressOut() {
    if (mode === 'contained') {
      var scale = theme.animation.scale;

      _reactNative.Animated.timing(elevation, {
        toValue: 2,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    }
  };

  var colors = theme.colors,
      roundness = theme.roundness;
  var font = theme.fonts.medium;
  var backgroundColor, borderColor, textColor, borderWidth;

  if (mode === 'contained') {
    if (disabled) {
      backgroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
    } else if (buttonColor) {
      backgroundColor = buttonColor;
    } else {
      backgroundColor = colors.primary;
    }
  } else {
    backgroundColor = 'transparent';
  }

  if (mode === 'outlined') {
    borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
    borderWidth = _reactNative.StyleSheet.hairlineWidth;
  } else {
    borderColor = 'transparent';
    borderWidth = 0;
  }

  if (disabled) {
    textColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
  } else if (mode === 'contained') {
    var isDark;

    if (typeof dark === 'boolean') {
      isDark = dark;
    } else {
      isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).isLight();
    }

    textColor = isDark ? _colors.white : _colors.black;
  } else if (buttonColor) {
    textColor = buttonColor;
  } else {
    textColor = colors.primary;
  }

  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
  var buttonStyle = {
    backgroundColor: backgroundColor,
    borderColor: borderColor,
    borderWidth: borderWidth,
    borderRadius: roundness
  };
  var touchableStyle = {
    borderRadius: style ? (_reactNative.StyleSheet.flatten(style) || {}).borderRadius || roundness : roundness
  };

  var _ref2 = _reactNative.StyleSheet.flatten(labelStyle) || {},
      customLabelColor = _ref2.color,
      customLabelSize = _ref2.fontSize;

  var textStyle = (0, _extends3.default)({
    color: textColor
  }, font);
  var iconStyle = ((_StyleSheet$flatten = _reactNative.StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;
  return React.createElement(_Surface.default, _extends({}, rest, {
    style: [styles.button, compact && styles.compact, {
      elevation: elevation
    }, buttonStyle, style]
  }), React.createElement(_TouchableRipple.default, {
    borderless: true,
    delayPressIn: 0,
    onPress: onPress,
    onLongPress: onLongPress,
    onPressIn: handlePressIn,
    onPressOut: handlePressOut,
    accessibilityLabel: accessibilityLabel,
    accessibilityHint: accessibilityHint,
    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      disabled: disabled
    },
    accessible: accessible,
    disabled: disabled,
    rippleColor: rippleColor,
    style: touchableStyle,
    testID: testID
  }, React.createElement(_reactNative.View, {
    style: [styles.content, contentStyle]
  }, icon && loading !== true ? React.createElement(_reactNative.View, {
    style: iconStyle
  }, React.createElement(_Icon.default, {
    source: icon,
    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,
    color: typeof customLabelColor === 'string' ? customLabelColor : textColor
  })) : null, loading ? React.createElement(_ActivityIndicator.default, {
    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,
    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,
    style: iconStyle
  }) : null, React.createElement(_Text.default, {
    selectable: false,
    numberOfLines: 1,
    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]
  }, children))));
};

var styles = _reactNative.StyleSheet.create({
  button: {
    minWidth: 64,
    borderStyle: 'solid'
  },
  compact: {
    minWidth: 'auto'
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    marginLeft: 12,
    marginRight: -4
  },
  iconReverse: {
    marginRight: 12,
    marginLeft: -4
  },
  label: {
    textAlign: 'center',
    letterSpacing: 1,
    marginVertical: 9,
    marginHorizontal: 16
  },
  compactLabel: {
    marginHorizontal: 8
  },
  uppercaseLabel: {
    textTransform: 'uppercase'
  }
});

var _default = (0, _theming.withTheme)(Button);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUUsRUFERjtJQUVYRCxVQUFVLEVBQUUsQ0FBQztFQUZGLENBakJrQjtFQXFCL0JSLEtBQUssRUFBRTtJQUNMVSxTQUFTLEVBQUUsUUFETjtJQUVMQyxhQUFhLEVBQUUsQ0FGVjtJQUdMQyxjQUFjLEVBQUUsQ0FIWDtJQUlMQyxnQkFBZ0IsRUFBRTtFQUpiLENBckJ3QjtFQTJCL0JaLFlBQVksRUFBRTtJQUNaWSxnQkFBZ0IsRUFBRTtFQUROLENBM0JpQjtFQThCL0JYLGNBQWMsRUFBRTtJQUNkWSxhQUFhLEVBQUU7RUFERDtBQTlCZSxDQUFsQm5ELENBQWY7O2VBbUNlLHdCQUFVdEQsTUFBViIsIm5hbWVzIjpbIkJ1dHRvbiIsImRpc2FibGVkIiwiY29tcGFjdCIsIm1vZGUiLCJkYXJrIiwibG9hZGluZyIsImljb24iLCJidXR0b25Db2xvciIsImNvbG9yIiwiY2hpbGRyZW4iLCJ1cHBlcmNhc2UiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJhY2Nlc3NpYmlsaXR5SGludCIsIm9uUHJlc3MiLCJvbkxvbmdQcmVzcyIsInN0eWxlIiwidGhlbWUiLCJjb250ZW50U3R5bGUiLCJsYWJlbFN0eWxlIiwidGVzdElEIiwiYWNjZXNzaWJsZSIsInJlc3QiLCJSZWFjdCIsInVzZVJlZiIsIkFuaW1hdGVkIiwiVmFsdWUiLCJlbGV2YXRpb24iLCJjdXJyZW50IiwidXNlRWZmZWN0Iiwic2V0VmFsdWUiLCJoYW5kbGVQcmVzc0luIiwic2NhbGUiLCJhbmltYXRpb24iLCJ0aW1pbmciLCJ0b1ZhbHVlIiwiZHVyYXRpb24iLCJ1c2VOYXRpdmVEcml2ZXIiLCJzdGFydCIsImhhbmRsZVByZXNzT3V0IiwiY29sb3JzIiwicm91bmRuZXNzIiwiZm9udCIsImZvbnRzIiwibWVkaXVtIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQ29sb3IiLCJ0ZXh0Q29sb3IiLCJib3JkZXJXaWR0aCIsIndoaXRlIiwiYmxhY2siLCJhbHBoYSIsInJnYiIsInN0cmluZyIsInByaW1hcnkiLCJTdHlsZVNoZWV0IiwiaGFpcmxpbmVXaWR0aCIsImlzRGFyayIsImlzTGlnaHQiLCJyaXBwbGVDb2xvciIsImJ1dHRvblN0eWxlIiwiYm9yZGVyUmFkaXVzIiwidG91Y2hhYmxlU3R5bGUiLCJmbGF0dGVuIiwiY3VzdG9tTGFiZWxDb2xvciIsImN1c3RvbUxhYmVsU2l6ZSIsImZvbnRTaXplIiwidGV4dFN0eWxlIiwiaWNvblN0eWxlIiwiZmxleERpcmVjdGlvbiIsInN0eWxlcyIsImljb25SZXZlcnNlIiwiX1N1cmZhY2UiLCJidXR0b24iLCJfVG91Y2hhYmxlUmlwcGxlIiwiYm9yZGVybGVzcyIsImRlbGF5UHJlc3NJbiIsIm9uUHJlc3NJbiIsIm9uUHJlc3NPdXQiLCJhY2Nlc3NpYmlsaXR5VHJhaXRzIiwiYWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGUiLCJhY2Nlc3NpYmlsaXR5Um9sZSIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsIl9yZWFjdE5hdGl2ZSIsImNvbnRlbnQiLCJfSWNvbiIsInNvdXJjZSIsInNpemUiLCJfQWN0aXZpdHlJbmRpY2F0b3IiLCJfVGV4dCIsInNlbGVjdGFibGUiLCJudW1iZXJPZkxpbmVzIiwibGFiZWwiLCJjb21wYWN0TGFiZWwiLCJ1cHBlcmNhc2VMYWJlbCIsImNyZWF0ZSIsIm1pbldpZHRoIiwiYm9yZGVyU3R5bGUiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJ0ZXh0QWxpZ24iLCJsZXR0ZXJTcGFjaW5nIiwibWFyZ2luVmVydGljYWwiLCJtYXJnaW5Ib3Jpem9udGFsIiwidGV4dFRyYW5zZm9ybSJdLCJzb3VyY2VzIjpbIkJ1dHRvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQW5pbWF0ZWQsXG4gIFZpZXcsXG4gIFZpZXdTdHlsZSxcbiAgU3R5bGVTaGVldCxcbiAgU3R5bGVQcm9wLFxuICBUZXh0U3R5bGUsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgY29sb3IgZnJvbSAnY29sb3InO1xuXG5pbXBvcnQgQWN0aXZpdHlJbmRpY2F0b3IgZnJvbSAnLi9BY3Rpdml0eUluZGljYXRvcic7XG5pbXBvcnQgSWNvbiwgeyBJY29uU291cmNlIH0gZnJvbSAnLi9JY29uJztcbmltcG9ydCBTdXJmYWNlIGZyb20gJy4vU3VyZmFjZSc7XG5pbXBvcnQgVGV4dCBmcm9tICcuL1R5cG9ncmFwaHkvVGV4dCc7XG5pbXBvcnQgVG91Y2hhYmxlUmlwcGxlIGZyb20gJy4vVG91Y2hhYmxlUmlwcGxlL1RvdWNoYWJsZVJpcHBsZSc7XG5pbXBvcnQgeyBibGFjaywgd2hpdGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JzJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvcmUvdGhlbWluZyc7XG5cbnR5cGUgUHJvcHMgPSBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgU3VyZmFjZT4gJiB7XG4gIC8qKlxuICAgKiBNb2RlIG9mIHRoZSBidXR0b24uIFlvdSBjYW4gY2hhbmdlIHRoZSBtb2RlIHRvIGFkanVzdCB0aGUgc3R5bGluZyB0byBnaXZlIGl0IGRlc2lyZWQgZW1waGFzaXMuXG4gICAqIC0gYHRleHRgIC0gZmxhdCBidXR0b24gd2l0aG91dCBiYWNrZ3JvdW5kIG9yIG91dGxpbmUgKGxvdyBlbXBoYXNpcylcbiAgICogLSBgb3V0bGluZWRgIC0gYnV0dG9uIHdpdGggYW4gb3V0bGluZSAobWVkaXVtIGVtcGhhc2lzKVxuICAgKiAtIGBjb250YWluZWRgIC0gYnV0dG9uIHdpdGggYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCBlbGV2YXRpb24gc2hhZG93IChoaWdoIGVtcGhhc2lzKVxuICAgKi9cbiAgbW9kZT86ICd0ZXh0JyB8ICdvdXRsaW5lZCcgfCAnY29udGFpbmVkJztcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGNvbG9yIGlzIGEgZGFyayBjb2xvci4gQSBkYXJrIGJ1dHRvbiB3aWxsIHJlbmRlciBsaWdodCB0ZXh0IGFuZCB2aWNlLXZlcnNhLiBPbmx5IGFwcGxpY2FibGUgZm9yIGBjb250YWluZWRgIG1vZGUuXG4gICAqL1xuICBkYXJrPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFVzZSBhIGNvbXBhY3QgbG9vaywgdXNlZnVsIGZvciBgdGV4dGAgYnV0dG9ucyBpbiBhIHJvdy5cbiAgICovXG4gIGNvbXBhY3Q/OiBib29sZWFuO1xuICAvKipcbiAgICogQ3VzdG9tIHRleHQgY29sb3IgZm9yIGZsYXQgYnV0dG9uLCBvciBiYWNrZ3JvdW5kIGNvbG9yIGZvciBjb250YWluZWQgYnV0dG9uLlxuICAgKi9cbiAgY29sb3I/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHNob3cgYSBsb2FkaW5nIGluZGljYXRvci5cbiAgICovXG4gIGxvYWRpbmc/OiBib29sZWFuO1xuICAvKipcbiAgICogSWNvbiB0byBkaXNwbGF5IGZvciB0aGUgYEJ1dHRvbmAuXG4gICAqL1xuICBpY29uPzogSWNvblNvdXJjZTtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGJ1dHRvbiBpcyBkaXNhYmxlZC4gQSBkaXNhYmxlZCBidXR0b24gaXMgZ3JleWVkIG91dCBhbmQgYG9uUHJlc3NgIGlzIG5vdCBjYWxsZWQgb24gdG91Y2guXG4gICAqL1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBMYWJlbCB0ZXh0IG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICAvKipcbiAgICogTWFrZSB0aGUgbGFiZWwgdGV4dCB1cHBlcmNhc2VkLiBOb3RlIHRoYXQgdGhpcyB3b24ndCB3b3JrIGlmIHlvdSBwYXNzIFJlYWN0IGVsZW1lbnRzIGFzIGNoaWxkcmVuLlxuICAgKi9cbiAgdXBwZXJjYXNlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEFjY2Vzc2liaWxpdHkgbGFiZWwgZm9yIHRoZSBidXR0b24uIFRoaXMgaXMgcmVhZCBieSB0aGUgc2NyZWVuIHJlYWRlciB3aGVuIHRoZSB1c2VyIHRhcHMgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGFjY2Vzc2liaWxpdHlMYWJlbD86IHN0cmluZztcbiAgLyoqXG4gICAqIEFjY2Vzc2liaWxpdHkgaGludCBmb3IgdGhlIGJ1dHRvbi4gVGhpcyBpcyByZWFkIGJ5IHRoZSBzY3JlZW4gcmVhZGVyIHdoZW4gdGhlIHVzZXIgdGFwcyB0aGUgYnV0dG9uLlxuICAgKi9cbiAgYWNjZXNzaWJpbGl0eUhpbnQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIHByZXNzLlxuICAgKi9cbiAgb25QcmVzcz86ICgpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIGxvbmcgcHJlc3MuXG4gICAqL1xuICBvbkxvbmdQcmVzcz86ICgpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBTdHlsZSBvZiBidXR0b24ncyBpbm5lciBjb250ZW50LlxuICAgKiBVc2UgdGhpcyBwcm9wIHRvIGFwcGx5IGN1c3RvbSBoZWlnaHQgYW5kIHdpZHRoIGFuZCB0byBzZXQgdGhlIGljb24gb24gdGhlIHJpZ2h0IHdpdGggYGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZSdgLlxuICAgKi9cbiAgY29udGVudFN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG4gIHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG4gIC8qKlxuICAgKiBTdHlsZSBmb3IgdGhlIGJ1dHRvbiB0ZXh0LlxuICAgKi9cbiAgbGFiZWxTdHlsZT86IFN0eWxlUHJvcDxUZXh0U3R5bGU+O1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogUmVhY3ROYXRpdmVQYXBlci5UaGVtZTtcbiAgLyoqXG4gICAqIHRlc3RJRCB0byBiZSB1c2VkIG9uIHRlc3RzLlxuICAgKi9cbiAgdGVzdElEPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBIGJ1dHRvbiBpcyBjb21wb25lbnQgdGhhdCB0aGUgdXNlciBjYW4gcHJlc3MgdG8gdHJpZ2dlciBhbiBhY3Rpb24uXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9idXR0b24tMS5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPlRleHQgYnV0dG9uPC9maWdjYXB0aW9uPlxuICogICA8L2ZpZ3VyZT5cbiAqICAgPGZpZ3VyZT5cbiAqICAgICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL2J1dHRvbi0yLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+T3V0bGluZWQgYnV0dG9uPC9maWdjYXB0aW9uPlxuICogICA8L2ZpZ3VyZT5cbiAqICAgPGZpZ3VyZT5cbiAqICAgICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL2J1dHRvbi0zLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+Q29udGFpbmVkIGJ1dHRvbjwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcic7XG4gKlxuICogY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiAoXG4gKiAgIDxCdXR0b24gaWNvbj1cImNhbWVyYVwiIG1vZGU9XCJjb250YWluZWRcIiBvblByZXNzPXsoKSA9PiBjb25zb2xlLmxvZygnUHJlc3NlZCcpfT5cbiAqICAgICBQcmVzcyBtZVxuICogICA8L0J1dHRvbj5cbiAqICk7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgTXlDb21wb25lbnQ7XG4gKiBgYGBcbiAqL1xuY29uc3QgQnV0dG9uID0gKHtcbiAgZGlzYWJsZWQsXG4gIGNvbXBhY3QsXG4gIG1vZGUgPSAndGV4dCcsXG4gIGRhcmssXG4gIGxvYWRpbmcsXG4gIGljb24sXG4gIGNvbG9yOiBidXR0b25Db2xvcixcbiAgY2hpbGRyZW4sXG4gIHVwcGVyY2FzZSA9IHRydWUsXG4gIGFjY2Vzc2liaWxpdHlMYWJlbCxcbiAgYWNjZXNzaWJpbGl0eUhpbnQsXG4gIG9uUHJlc3MsXG4gIG9uTG9uZ1ByZXNzLFxuICBzdHlsZSxcbiAgdGhlbWUsXG4gIGNvbnRlbnRTdHlsZSxcbiAgbGFiZWxTdHlsZSxcbiAgdGVzdElELFxuICBhY2Nlc3NpYmxlLFxuICAuLi5yZXN0XG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IGN1cnJlbnQ6IGVsZXZhdGlvbiB9ID0gUmVhY3QudXNlUmVmPEFuaW1hdGVkLlZhbHVlPihcbiAgICBuZXcgQW5pbWF0ZWQuVmFsdWUoZGlzYWJsZWQgfHwgbW9kZSAhPT0gJ2NvbnRhaW5lZCcgPyAwIDogMilcbiAgKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBlbGV2YXRpb24uc2V0VmFsdWUoZGlzYWJsZWQgfHwgbW9kZSAhPT0gJ2NvbnRhaW5lZCcgPyAwIDogMik7XG4gIH0sIFttb2RlLCBlbGV2YXRpb24sIGRpc2FibGVkXSk7XG5cbiAgY29uc3QgaGFuZGxlUHJlc3NJbiA9ICgpID0+IHtcbiAgICBpZiAobW9kZSA9PT0gJ2NvbnRhaW5lZCcpIHtcbiAgICAgIGNvbnN0IHsgc2NhbGUgfSA9IHRoZW1lLmFuaW1hdGlvbjtcbiAgICAgIEFuaW1hdGVkLnRpbWluZyhlbGV2YXRpb24sIHtcbiAgICAgICAgdG9WYWx1ZTogOCxcbiAgICAgICAgZHVyYXRpb246IDIwMCAqIHNjYWxlLFxuICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IHRydWUsXG4gICAgICB9KS5zdGFydCgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVQcmVzc091dCA9ICgpID0+IHtcbiAgICBpZiAobW9kZSA9PT0gJ2NvbnRhaW5lZCcpIHtcbiAgICAgIGNvbnN0IHsgc2NhbGUgfSA9IHRoZW1lLmFuaW1hdGlvbjtcbiAgICAgIEFuaW1hdGVkLnRpbWluZyhlbGV2YXRpb24sIHtcbiAgICAgICAgdG9WYWx1ZTogMixcbiAgICAgICAgZHVyYXRpb246IDE1MCAqIHNjYWxlLFxuICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IHRydWUsXG4gICAgICB9KS5zdGFydCgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB7IGNvbG9ycywgcm91bmRuZXNzIH0gPSB0aGVtZTtcbiAgY29uc3QgZm9udCA9IHRoZW1lLmZvbnRzLm1lZGl1bTtcblxuICBsZXQgYmFja2dyb3VuZENvbG9yOiBzdHJpbmcsXG4gICAgYm9yZGVyQ29sb3I6IHN0cmluZyxcbiAgICB0ZXh0Q29sb3I6IHN0cmluZyxcbiAgICBib3JkZXJXaWR0aDogbnVtYmVyO1xuXG4gIGlmIChtb2RlID09PSAnY29udGFpbmVkJykge1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgYmFja2dyb3VuZENvbG9yID0gY29sb3IodGhlbWUuZGFyayA/IHdoaXRlIDogYmxhY2spXG4gICAgICAgIC5hbHBoYSgwLjEyKVxuICAgICAgICAucmdiKClcbiAgICAgICAgLnN0cmluZygpO1xuICAgIH0gZWxzZSBpZiAoYnV0dG9uQ29sb3IpIHtcbiAgICAgIGJhY2tncm91bmRDb2xvciA9IGJ1dHRvbkNvbG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcnMucHJpbWFyeTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgfVxuXG4gIGlmIChtb2RlID09PSAnb3V0bGluZWQnKSB7XG4gICAgYm9yZGVyQ29sb3IgPSBjb2xvcih0aGVtZS5kYXJrID8gd2hpdGUgOiBibGFjaylcbiAgICAgIC5hbHBoYSgwLjI5KVxuICAgICAgLnJnYigpXG4gICAgICAuc3RyaW5nKCk7XG4gICAgYm9yZGVyV2lkdGggPSBTdHlsZVNoZWV0LmhhaXJsaW5lV2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgYm9yZGVyQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xuICAgIGJvcmRlcldpZHRoID0gMDtcbiAgfVxuXG4gIGlmIChkaXNhYmxlZCkge1xuICAgIHRleHRDb2xvciA9IGNvbG9yKHRoZW1lLmRhcmsgPyB3aGl0ZSA6IGJsYWNrKVxuICAgICAgLmFscGhhKDAuMzIpXG4gICAgICAucmdiKClcbiAgICAgIC5zdHJpbmcoKTtcbiAgfSBlbHNlIGlmIChtb2RlID09PSAnY29udGFpbmVkJykge1xuICAgIGxldCBpc0Rhcms7XG5cbiAgICBpZiAodHlwZW9mIGRhcmsgPT09ICdib29sZWFuJykge1xuICAgICAgaXNEYXJrID0gZGFyaztcbiAgICB9IGVsc2Uge1xuICAgICAgaXNEYXJrID1cbiAgICAgICAgYmFja2dyb3VuZENvbG9yID09PSAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgIDogIWNvbG9yKGJhY2tncm91bmRDb2xvcikuaXNMaWdodCgpO1xuICAgIH1cblxuICAgIHRleHRDb2xvciA9IGlzRGFyayA/IHdoaXRlIDogYmxhY2s7XG4gIH0gZWxzZSBpZiAoYnV0dG9uQ29sb3IpIHtcbiAgICB0ZXh0Q29sb3IgPSBidXR0b25Db2xvcjtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0Q29sb3IgPSBjb2xvcnMucHJpbWFyeTtcbiAgfVxuXG4gIGNvbnN0IHJpcHBsZUNvbG9yID0gY29sb3IodGV4dENvbG9yKS5hbHBoYSgwLjMyKS5yZ2IoKS5zdHJpbmcoKTtcbiAgY29uc3QgYnV0dG9uU3R5bGUgPSB7XG4gICAgYmFja2dyb3VuZENvbG9yLFxuICAgIGJvcmRlckNvbG9yLFxuICAgIGJvcmRlcldpZHRoLFxuICAgIGJvcmRlclJhZGl1czogcm91bmRuZXNzLFxuICB9O1xuICBjb25zdCB0b3VjaGFibGVTdHlsZSA9IHtcbiAgICBib3JkZXJSYWRpdXM6IHN0eWxlXG4gICAgICA/ICgoU3R5bGVTaGVldC5mbGF0dGVuKHN0eWxlKSB8fCB7fSkgYXMgVmlld1N0eWxlKS5ib3JkZXJSYWRpdXMgfHxcbiAgICAgICAgcm91bmRuZXNzXG4gICAgICA6IHJvdW5kbmVzcyxcbiAgfTtcblxuICBjb25zdCB7IGNvbG9yOiBjdXN0b21MYWJlbENvbG9yLCBmb250U2l6ZTogY3VzdG9tTGFiZWxTaXplIH0gPVxuICAgIFN0eWxlU2hlZXQuZmxhdHRlbihsYWJlbFN0eWxlKSB8fCB7fTtcblxuICBjb25zdCB0ZXh0U3R5bGUgPSB7IGNvbG9yOiB0ZXh0Q29sb3IsIC4uLmZvbnQgfTtcbiAgY29uc3QgaWNvblN0eWxlID1cbiAgICBTdHlsZVNoZWV0LmZsYXR0ZW4oY29udGVudFN0eWxlKT8uZmxleERpcmVjdGlvbiA9PT0gJ3Jvdy1yZXZlcnNlJ1xuICAgICAgPyBzdHlsZXMuaWNvblJldmVyc2VcbiAgICAgIDogc3R5bGVzLmljb247XG5cbiAgcmV0dXJuIChcbiAgICA8U3VyZmFjZVxuICAgICAgey4uLnJlc3R9XG4gICAgICBzdHlsZT17W1xuICAgICAgICBzdHlsZXMuYnV0dG9uLFxuICAgICAgICBjb21wYWN0ICYmIHN0eWxlcy5jb21wYWN0LFxuICAgICAgICB7IGVsZXZhdGlvbiB9LFxuICAgICAgICBidXR0b25TdHlsZSxcbiAgICAgICAgc3R5bGUsXG4gICAgICBdfVxuICAgID5cbiAgICAgIDxUb3VjaGFibGVSaXBwbGVcbiAgICAgICAgYm9yZGVybGVzc1xuICAgICAgICBkZWxheVByZXNzSW49ezB9XG4gICAgICAgIG9uUHJlc3M9e29uUHJlc3N9XG4gICAgICAgIG9uTG9uZ1ByZXNzPXtvbkxvbmdQcmVzc31cbiAgICAgICAgb25QcmVzc0luPXtoYW5kbGVQcmVzc0lufVxuICAgICAgICBvblByZXNzT3V0PXtoYW5kbGVQcmVzc091dH1cbiAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPXthY2Nlc3NpYmlsaXR5TGFiZWx9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlIaW50PXthY2Nlc3NpYmlsaXR5SGludH1cbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBrZWVwIG9sZCBhMTF5IHByb3BzIGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggb2xkIFJOIHZlcnNpb25zXG4gICAgICAgIGFjY2Vzc2liaWxpdHlUcmFpdHM9e2Rpc2FibGVkID8gWydidXR0b24nLCAnZGlzYWJsZWQnXSA6ICdidXR0b24nfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZT1cImJ1dHRvblwiXG4gICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgYWNjZXNzaWJpbGl0eVN0YXRlPXt7IGRpc2FibGVkIH19XG4gICAgICAgIGFjY2Vzc2libGU9e2FjY2Vzc2libGV9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgcmlwcGxlQ29sb3I9e3JpcHBsZUNvbG9yfVxuICAgICAgICBzdHlsZT17dG91Y2hhYmxlU3R5bGV9XG4gICAgICAgIHRlc3RJRD17dGVzdElEfVxuICAgICAgPlxuICAgICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5jb250ZW50LCBjb250ZW50U3R5bGVdfT5cbiAgICAgICAgICB7aWNvbiAmJiBsb2FkaW5nICE9PSB0cnVlID8gKFxuICAgICAgICAgICAgPFZpZXcgc3R5bGU9e2ljb25TdHlsZX0+XG4gICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgc291cmNlPXtpY29ufVxuICAgICAgICAgICAgICAgIHNpemU9e2N1c3RvbUxhYmVsU2l6ZSA/PyAxNn1cbiAgICAgICAgICAgICAgICBjb2xvcj17XG4gICAgICAgICAgICAgICAgICB0eXBlb2YgY3VzdG9tTGFiZWxDb2xvciA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyBjdXN0b21MYWJlbENvbG9yXG4gICAgICAgICAgICAgICAgICAgIDogdGV4dENvbG9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIHtsb2FkaW5nID8gKFxuICAgICAgICAgICAgPEFjdGl2aXR5SW5kaWNhdG9yXG4gICAgICAgICAgICAgIHNpemU9e2N1c3RvbUxhYmVsU2l6ZSA/PyAxNn1cbiAgICAgICAgICAgICAgY29sb3I9e1xuICAgICAgICAgICAgICAgIHR5cGVvZiBjdXN0b21MYWJlbENvbG9yID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgPyBjdXN0b21MYWJlbENvbG9yXG4gICAgICAgICAgICAgICAgICA6IHRleHRDb2xvclxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0eWxlPXtpY29uU3R5bGV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICBzZWxlY3RhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgIG51bWJlck9mTGluZXM9ezF9XG4gICAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgICBzdHlsZXMubGFiZWwsXG4gICAgICAgICAgICAgIGNvbXBhY3QgJiYgc3R5bGVzLmNvbXBhY3RMYWJlbCxcbiAgICAgICAgICAgICAgdXBwZXJjYXNlICYmIHN0eWxlcy51cHBlcmNhc2VMYWJlbCxcbiAgICAgICAgICAgICAgdGV4dFN0eWxlLFxuICAgICAgICAgICAgICBmb250LFxuICAgICAgICAgICAgICBsYWJlbFN0eWxlLFxuICAgICAgICAgICAgXX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1RvdWNoYWJsZVJpcHBsZT5cbiAgICA8L1N1cmZhY2U+XG4gICk7XG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJ1dHRvbjoge1xuICAgIG1pbldpZHRoOiA2NCxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgfSxcbiAgY29tcGFjdDoge1xuICAgIG1pbldpZHRoOiAnYXV0bycsXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIH0sXG4gIGljb246IHtcbiAgICBtYXJnaW5MZWZ0OiAxMixcbiAgICBtYXJnaW5SaWdodDogLTQsXG4gIH0sXG4gIGljb25SZXZlcnNlOiB7XG4gICAgbWFyZ2luUmlnaHQ6IDEyLFxuICAgIG1hcmdpbkxlZnQ6IC00LFxuICB9LFxuICBsYWJlbDoge1xuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgbGV0dGVyU3BhY2luZzogMSxcbiAgICBtYXJnaW5WZXJ0aWNhbDogOSxcbiAgICBtYXJnaW5Ib3Jpem9udGFsOiAxNixcbiAgfSxcbiAgY29tcGFjdExhYmVsOiB7XG4gICAgbWFyZ2luSG9yaXpvbnRhbDogOCxcbiAgfSxcbiAgdXBwZXJjYXNlTGFiZWw6IHtcbiAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQnV0dG9uKTtcbiJdfQ==