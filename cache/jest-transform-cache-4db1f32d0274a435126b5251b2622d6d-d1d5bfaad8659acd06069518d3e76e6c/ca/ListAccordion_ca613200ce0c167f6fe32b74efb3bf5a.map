{"version":3,"mappings":"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","names":["ListAccordion","left","right","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expandedProp","expanded","accessibilityLabel","React","useState","setExpanded","handlePressAction","undefined","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","useContext","ListAccordionGroupContext","Error","isExpanded","expandedId","handlePress","onAccordionPress","_reactNative","backgroundColor","background","_TouchableRipple","styles","container","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","delayPressIn","borderless","row","pointerEvents","color","primary","item","content","_Text","selectable","numberOfLines","multiline","_MaterialCommunityIcon","name","size","direction","I18nManager","isRTL","Children","map","child","isValidElement","props","cloneElement","displayName","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"sources":["ListAccordion.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n  GestureResponderEvent,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the TouchableRipple. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n  accessibilityLabel,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <View style={{ backgroundColor: theme.colors.background }}>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ expanded: isExpanded }}\n          accessibilityLabel={accessibilityLabel}\n          testID={testID}\n          delayPressIn={0}\n          borderless\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: isExpanded ? theme.colors.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                selectable={false}\n                numberOfLines={titleNumberOfLines}\n                style={[\n                  styles.title,\n                  {\n                    color: isExpanded ? theme.colors.primary : titleColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description ? (\n                <Text\n                  selectable={false}\n                  numberOfLines={descriptionNumberOfLines}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              ) : null}\n            </View>\n            <View\n              style={[styles.item, description ? styles.multiline : undefined]}\n            >\n              {right ? (\n                right({\n                  isExpanded: isExpanded,\n                })\n              ) : (\n                <MaterialCommunityIcon\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                  color={titleColor}\n                  size={24}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              )}\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]}