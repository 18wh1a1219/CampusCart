{"version":3,"mappings":"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","names":["DrawerItem","icon","label","active","theme","style","onPress","accessibilityLabel","right","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","font","fonts","medium","labelMargin","React","_reactNative","_TouchableRipple","borderless","delayPressIn","styles","container","borderRadius","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","wrapper","content","_Icon","source","size","color","_Text","selectable","numberOfLines","marginLeft","displayName","StyleSheet","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","flex","marginRight"],"sources":["DrawerItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback which returns a React element to display on the right side. For instance a Badge.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  right,\n  ...rest\n}: Props) => {\n  const { colors, roundness } = theme;\n  const backgroundColor = active\n    ? color(colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? colors.primary\n    : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n\n  return (\n    <View {...rest}>\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <View style={styles.content}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n          {right?.({ color: contentColor })}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]}