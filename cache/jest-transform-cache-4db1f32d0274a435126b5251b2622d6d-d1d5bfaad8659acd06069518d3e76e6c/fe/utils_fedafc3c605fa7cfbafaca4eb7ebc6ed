3ef919b76cc757a17d7283e59ca1cbef
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCombinedStyles = void 0;

var _reactNative = require("react-native");

var getCombinedStyles = function getCombinedStyles(_ref) {
  var isAnimatedFromRight = _ref.isAnimatedFromRight,
      isIconStatic = _ref.isIconStatic,
      distance = _ref.distance,
      animFAB = _ref.animFAB;
  var isRTL = _reactNative.I18nManager.isRTL;
  var defaultPositionStyles = {
    left: -distance,
    right: undefined
  };
  var combinedStyles = {
    innerWrapper: (0, _extends2.default)({}, defaultPositionStyles),
    iconWrapper: (0, _extends2.default)({}, defaultPositionStyles),
    absoluteFill: {}
  };
  var animatedFromRight = isAnimatedFromRight && !isRTL;
  var animatedFromRightRTL = isAnimatedFromRight && isRTL;
  var animatedFromLeft = !isAnimatedFromRight && !isRTL;
  var animatedFromLeftRTL = !isAnimatedFromRight && isRTL;

  if (animatedFromRight) {
    combinedStyles.innerWrapper.transform = [{
      translateX: animFAB.interpolate({
        inputRange: [distance, 0],
        outputRange: [distance, 0]
      })
    }];
    combinedStyles.iconWrapper.transform = [{
      translateX: isIconStatic ? 0 : animFAB
    }];
    combinedStyles.absoluteFill.transform = [{
      translateX: animFAB.interpolate({
        inputRange: [distance, 0],
        outputRange: [Math.abs(distance) / 2, Math.abs(distance)]
      })
    }];
  } else if (animatedFromRightRTL) {
    combinedStyles.iconWrapper.transform = [{
      translateX: isIconStatic ? 0 : animFAB.interpolate({
        inputRange: [distance, 0],
        outputRange: [-distance, 0]
      })
    }];
    combinedStyles.innerWrapper.transform = [{
      translateX: animFAB.interpolate({
        inputRange: [distance, 0],
        outputRange: [-distance, 0]
      })
    }];
    combinedStyles.absoluteFill.transform = [{
      translateX: animFAB.interpolate({
        inputRange: [distance, 0],
        outputRange: [0, distance]
      })
    }];
  } else if (animatedFromLeft) {
    combinedStyles.iconWrapper.transform = [{
      translateX: isIconStatic ? distance : animFAB.interpolate({
        inputRange: [0, distance],
        outputRange: [distance, distance * 2]
      })
    }];
    combinedStyles.innerWrapper.transform = [{
      translateX: animFAB
    }];
    combinedStyles.absoluteFill.transform = [{
      translateX: animFAB.interpolate({
        inputRange: [0, distance],
        outputRange: [0, Math.abs(distance) / 2]
      })
    }];
  } else if (animatedFromLeftRTL) {
    combinedStyles.iconWrapper.transform = [{
      translateX: isIconStatic ? animFAB.interpolate({
        inputRange: [0, distance],
        outputRange: [-distance, -distance * 2]
      }) : -distance
    }];
    combinedStyles.innerWrapper.transform = [{
      translateX: animFAB.interpolate({
        inputRange: [0, distance],
        outputRange: [0, -distance]
      })
    }];
    combinedStyles.absoluteFill.transform = [{
      translateX: animFAB.interpolate({
        inputRange: [0, distance],
        outputRange: [0, -distance]
      })
    }];
  }

  return combinedStyles;
};

exports.getCombinedStyles = getCombinedStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFlTyxJQUFNQSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLE9BS2E7RUFBQSxJQUo1Q0MsbUJBSTRDLFFBSjVDQSxtQkFJNEM7RUFBQSxJQUg1Q0MsWUFHNEMsUUFINUNBLFlBRzRDO0VBQUEsSUFGNUNDLFFBRTRDLFFBRjVDQSxRQUU0QztFQUFBLElBRDVDQyxPQUM0QyxRQUQ1Q0EsT0FDNEM7RUFDNUMsSUFBUUMsS0FBUixHQUFrQkMsd0JBQWxCLENBQVFELEtBQVI7RUFFQSxJQUFNRSxxQkFBcUIsR0FBRztJQUFFQyxJQUFJLEVBQUUsQ0FBQ0wsUUFBVDtJQUFtQk0sS0FBSyxFQUFFQztFQUExQixDQUE5QjtFQUVBLElBQU1DLGNBQThCLEdBQUc7SUFDckNDLFlBQVksNkJBQ1BMLHFCQURPLENBRHlCO0lBSXJDTSxXQUFXLDZCQUNOTixxQkFETSxDQUowQjtJQU9yQ08sWUFBWSxFQUFFO0VBUHVCLENBQXZDO0VBVUEsSUFBTUMsaUJBQWlCLEdBQUdkLG1CQUFtQixJQUFJLENBQUNJLEtBQWxEO0VBQ0EsSUFBTVcsb0JBQW9CLEdBQUdmLG1CQUFtQixJQUFJSSxLQUFwRDtFQUNBLElBQU1ZLGdCQUFnQixHQUFHLENBQUNoQixtQkFBRCxJQUF3QixDQUFDSSxLQUFsRDtFQUNBLElBQU1hLG1CQUFtQixHQUFHLENBQUNqQixtQkFBRCxJQUF3QkksS0FBcEQ7O0VBRUEsSUFBSVUsaUJBQUosRUFBdUI7SUFDckJKLGNBQWMsQ0FBQ0MsWUFBZkQsQ0FBNEJRLFNBQTVCUixHQUF3QyxDQUN0QztNQUNFUyxVQUFVLEVBQUVoQixPQUFPLENBQUNpQixXQUFSakIsQ0FBb0I7UUFDOUJrQixVQUFVLEVBQUUsQ0FBQ25CLFFBQUQsRUFBVyxDQUFYLENBRGtCO1FBRTlCb0IsV0FBVyxFQUFFLENBQUNwQixRQUFELEVBQVcsQ0FBWDtNQUZpQixDQUFwQkM7SUFEZCxDQURzQyxDQUF4Q087SUFRQUEsY0FBYyxDQUFDRSxXQUFmRixDQUEyQlEsU0FBM0JSLEdBQXVDLENBQ3JDO01BQ0VTLFVBQVUsRUFBRWxCLFlBQVksR0FBRyxDQUFILEdBQU9FO0lBRGpDLENBRHFDLENBQXZDTztJQUtBQSxjQUFjLENBQUNHLFlBQWZILENBQTRCUSxTQUE1QlIsR0FBd0MsQ0FDdEM7TUFDRVMsVUFBVSxFQUFFaEIsT0FBTyxDQUFDaUIsV0FBUmpCLENBQW9CO1FBQzlCa0IsVUFBVSxFQUFFLENBQUNuQixRQUFELEVBQVcsQ0FBWCxDQURrQjtRQUU5Qm9CLFdBQVcsRUFBRSxDQUFDQyxJQUFJLENBQUNDLEdBQUxELENBQVNyQixRQUFUcUIsSUFBcUIsQ0FBdEIsRUFBeUJBLElBQUksQ0FBQ0MsR0FBTEQsQ0FBU3JCLFFBQVRxQixDQUF6QjtNQUZpQixDQUFwQnBCO0lBRGQsQ0FEc0MsQ0FBeENPO0VBZEYsT0FzQk8sSUFBSUssb0JBQUosRUFBMEI7SUFDL0JMLGNBQWMsQ0FBQ0UsV0FBZkYsQ0FBMkJRLFNBQTNCUixHQUF1QyxDQUNyQztNQUNFUyxVQUFVLEVBQUVsQixZQUFZLEdBQ3BCLENBRG9CLEdBRXBCRSxPQUFPLENBQUNpQixXQUFSakIsQ0FBb0I7UUFDbEJrQixVQUFVLEVBQUUsQ0FBQ25CLFFBQUQsRUFBVyxDQUFYLENBRE07UUFFbEJvQixXQUFXLEVBQUUsQ0FBQyxDQUFDcEIsUUFBRixFQUFZLENBQVo7TUFGSyxDQUFwQkM7SUFITixDQURxQyxDQUF2Q087SUFVQUEsY0FBYyxDQUFDQyxZQUFmRCxDQUE0QlEsU0FBNUJSLEdBQXdDLENBQ3RDO01BQ0VTLFVBQVUsRUFBRWhCLE9BQU8sQ0FBQ2lCLFdBQVJqQixDQUFvQjtRQUM5QmtCLFVBQVUsRUFBRSxDQUFDbkIsUUFBRCxFQUFXLENBQVgsQ0FEa0I7UUFFOUJvQixXQUFXLEVBQUUsQ0FBQyxDQUFDcEIsUUFBRixFQUFZLENBQVo7TUFGaUIsQ0FBcEJDO0lBRGQsQ0FEc0MsQ0FBeENPO0lBUUFBLGNBQWMsQ0FBQ0csWUFBZkgsQ0FBNEJRLFNBQTVCUixHQUF3QyxDQUN0QztNQUNFUyxVQUFVLEVBQUVoQixPQUFPLENBQUNpQixXQUFSakIsQ0FBb0I7UUFDOUJrQixVQUFVLEVBQUUsQ0FBQ25CLFFBQUQsRUFBVyxDQUFYLENBRGtCO1FBRTlCb0IsV0FBVyxFQUFFLENBQUMsQ0FBRCxFQUFJcEIsUUFBSjtNQUZpQixDQUFwQkM7SUFEZCxDQURzQyxDQUF4Q087RUFuQkssT0EyQkEsSUFBSU0sZ0JBQUosRUFBc0I7SUFDM0JOLGNBQWMsQ0FBQ0UsV0FBZkYsQ0FBMkJRLFNBQTNCUixHQUF1QyxDQUNyQztNQUNFUyxVQUFVLEVBQUVsQixZQUFZLEdBQ3BCQyxRQURvQixHQUVwQkMsT0FBTyxDQUFDaUIsV0FBUmpCLENBQW9CO1FBQ2xCa0IsVUFBVSxFQUFFLENBQUMsQ0FBRCxFQUFJbkIsUUFBSixDQURNO1FBRWxCb0IsV0FBVyxFQUFFLENBQUNwQixRQUFELEVBQVdBLFFBQVEsR0FBRyxDQUF0QjtNQUZLLENBQXBCQztJQUhOLENBRHFDLENBQXZDTztJQVVBQSxjQUFjLENBQUNDLFlBQWZELENBQTRCUSxTQUE1QlIsR0FBd0MsQ0FDdEM7TUFDRVMsVUFBVSxFQUFFaEI7SUFEZCxDQURzQyxDQUF4Q087SUFLQUEsY0FBYyxDQUFDRyxZQUFmSCxDQUE0QlEsU0FBNUJSLEdBQXdDLENBQ3RDO01BQ0VTLFVBQVUsRUFBRWhCLE9BQU8sQ0FBQ2lCLFdBQVJqQixDQUFvQjtRQUM5QmtCLFVBQVUsRUFBRSxDQUFDLENBQUQsRUFBSW5CLFFBQUosQ0FEa0I7UUFFOUJvQixXQUFXLEVBQUUsQ0FBQyxDQUFELEVBQUlDLElBQUksQ0FBQ0MsR0FBTEQsQ0FBU3JCLFFBQVRxQixJQUFxQixDQUF6QjtNQUZpQixDQUFwQnBCO0lBRGQsQ0FEc0MsQ0FBeENPO0VBaEJLLE9Bd0JBLElBQUlPLG1CQUFKLEVBQXlCO0lBQzlCUCxjQUFjLENBQUNFLFdBQWZGLENBQTJCUSxTQUEzQlIsR0FBdUMsQ0FDckM7TUFDRVMsVUFBVSxFQUFFbEIsWUFBWSxHQUNwQkUsT0FBTyxDQUFDaUIsV0FBUmpCLENBQW9CO1FBQ2xCa0IsVUFBVSxFQUFFLENBQUMsQ0FBRCxFQUFJbkIsUUFBSixDQURNO1FBRWxCb0IsV0FBVyxFQUFFLENBQUMsQ0FBQ3BCLFFBQUYsRUFBWSxDQUFDQSxRQUFELEdBQVksQ0FBeEI7TUFGSyxDQUFwQkMsQ0FEb0IsR0FLcEIsQ0FBQ0Q7SUFOUCxDQURxQyxDQUF2Q1E7SUFVQUEsY0FBYyxDQUFDQyxZQUFmRCxDQUE0QlEsU0FBNUJSLEdBQXdDLENBQ3RDO01BQ0VTLFVBQVUsRUFBRWhCLE9BQU8sQ0FBQ2lCLFdBQVJqQixDQUFvQjtRQUM5QmtCLFVBQVUsRUFBRSxDQUFDLENBQUQsRUFBSW5CLFFBQUosQ0FEa0I7UUFFOUJvQixXQUFXLEVBQUUsQ0FBQyxDQUFELEVBQUksQ0FBQ3BCLFFBQUw7TUFGaUIsQ0FBcEJDO0lBRGQsQ0FEc0MsQ0FBeENPO0lBUUFBLGNBQWMsQ0FBQ0csWUFBZkgsQ0FBNEJRLFNBQTVCUixHQUF3QyxDQUN0QztNQUNFUyxVQUFVLEVBQUVoQixPQUFPLENBQUNpQixXQUFSakIsQ0FBb0I7UUFDOUJrQixVQUFVLEVBQUUsQ0FBQyxDQUFELEVBQUluQixRQUFKLENBRGtCO1FBRTlCb0IsV0FBVyxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUNwQixRQUFMO01BRmlCLENBQXBCQztJQURkLENBRHNDLENBQXhDTztFQVFEOztFQUVELE9BQU9BLGNBQVA7QUEvSEsiLCJuYW1lcyI6WyJnZXRDb21iaW5lZFN0eWxlcyIsImlzQW5pbWF0ZWRGcm9tUmlnaHQiLCJpc0ljb25TdGF0aWMiLCJkaXN0YW5jZSIsImFuaW1GQUIiLCJpc1JUTCIsIkkxOG5NYW5hZ2VyIiwiZGVmYXVsdFBvc2l0aW9uU3R5bGVzIiwibGVmdCIsInJpZ2h0IiwidW5kZWZpbmVkIiwiY29tYmluZWRTdHlsZXMiLCJpbm5lcldyYXBwZXIiLCJpY29uV3JhcHBlciIsImFic29sdXRlRmlsbCIsImFuaW1hdGVkRnJvbVJpZ2h0IiwiYW5pbWF0ZWRGcm9tUmlnaHRSVEwiLCJhbmltYXRlZEZyb21MZWZ0IiwiYW5pbWF0ZWRGcm9tTGVmdFJUTCIsInRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJpbnRlcnBvbGF0ZSIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsIk1hdGgiLCJhYnMiXSwic291cmNlcyI6WyJ1dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmltYXRlZCwgSTE4bk1hbmFnZXIsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbnR5cGUgR2V0Q29tYmluZWRTdHlsZXNQcm9wcyA9IHtcbiAgaXNBbmltYXRlZEZyb21SaWdodDogYm9vbGVhbjtcbiAgaXNJY29uU3RhdGljOiBib29sZWFuO1xuICBkaXN0YW5jZTogbnVtYmVyO1xuICBhbmltRkFCOiBBbmltYXRlZC5WYWx1ZTtcbn07XG5cbnR5cGUgQ29tYmluZWRTdHlsZXMgPSB7XG4gIGlubmVyV3JhcHBlcjogQW5pbWF0ZWQuV2l0aEFuaW1hdGVkVmFsdWU8Vmlld1N0eWxlPjtcbiAgaWNvbldyYXBwZXI6IEFuaW1hdGVkLldpdGhBbmltYXRlZFZhbHVlPFZpZXdTdHlsZT47XG4gIGFic29sdXRlRmlsbDogQW5pbWF0ZWQuV2l0aEFuaW1hdGVkVmFsdWU8Vmlld1N0eWxlPjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb21iaW5lZFN0eWxlcyA9ICh7XG4gIGlzQW5pbWF0ZWRGcm9tUmlnaHQsXG4gIGlzSWNvblN0YXRpYyxcbiAgZGlzdGFuY2UsXG4gIGFuaW1GQUIsXG59OiBHZXRDb21iaW5lZFN0eWxlc1Byb3BzKTogQ29tYmluZWRTdHlsZXMgPT4ge1xuICBjb25zdCB7IGlzUlRMIH0gPSBJMThuTWFuYWdlcjtcblxuICBjb25zdCBkZWZhdWx0UG9zaXRpb25TdHlsZXMgPSB7IGxlZnQ6IC1kaXN0YW5jZSwgcmlnaHQ6IHVuZGVmaW5lZCB9O1xuXG4gIGNvbnN0IGNvbWJpbmVkU3R5bGVzOiBDb21iaW5lZFN0eWxlcyA9IHtcbiAgICBpbm5lcldyYXBwZXI6IHtcbiAgICAgIC4uLmRlZmF1bHRQb3NpdGlvblN0eWxlcyxcbiAgICB9LFxuICAgIGljb25XcmFwcGVyOiB7XG4gICAgICAuLi5kZWZhdWx0UG9zaXRpb25TdHlsZXMsXG4gICAgfSxcbiAgICBhYnNvbHV0ZUZpbGw6IHt9LFxuICB9O1xuXG4gIGNvbnN0IGFuaW1hdGVkRnJvbVJpZ2h0ID0gaXNBbmltYXRlZEZyb21SaWdodCAmJiAhaXNSVEw7XG4gIGNvbnN0IGFuaW1hdGVkRnJvbVJpZ2h0UlRMID0gaXNBbmltYXRlZEZyb21SaWdodCAmJiBpc1JUTDtcbiAgY29uc3QgYW5pbWF0ZWRGcm9tTGVmdCA9ICFpc0FuaW1hdGVkRnJvbVJpZ2h0ICYmICFpc1JUTDtcbiAgY29uc3QgYW5pbWF0ZWRGcm9tTGVmdFJUTCA9ICFpc0FuaW1hdGVkRnJvbVJpZ2h0ICYmIGlzUlRMO1xuXG4gIGlmIChhbmltYXRlZEZyb21SaWdodCkge1xuICAgIGNvbWJpbmVkU3R5bGVzLmlubmVyV3JhcHBlci50cmFuc2Zvcm0gPSBbXG4gICAgICB7XG4gICAgICAgIHRyYW5zbGF0ZVg6IGFuaW1GQUIuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgIGlucHV0UmFuZ2U6IFtkaXN0YW5jZSwgMF0sXG4gICAgICAgICAgb3V0cHV0UmFuZ2U6IFtkaXN0YW5jZSwgMF0sXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICBdO1xuICAgIGNvbWJpbmVkU3R5bGVzLmljb25XcmFwcGVyLnRyYW5zZm9ybSA9IFtcbiAgICAgIHtcbiAgICAgICAgdHJhbnNsYXRlWDogaXNJY29uU3RhdGljID8gMCA6IGFuaW1GQUIsXG4gICAgICB9LFxuICAgIF07XG4gICAgY29tYmluZWRTdHlsZXMuYWJzb2x1dGVGaWxsLnRyYW5zZm9ybSA9IFtcbiAgICAgIHtcbiAgICAgICAgdHJhbnNsYXRlWDogYW5pbUZBQi5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgaW5wdXRSYW5nZTogW2Rpc3RhbmNlLCAwXSxcbiAgICAgICAgICBvdXRwdXRSYW5nZTogW01hdGguYWJzKGRpc3RhbmNlKSAvIDIsIE1hdGguYWJzKGRpc3RhbmNlKV0sXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICBdO1xuICB9IGVsc2UgaWYgKGFuaW1hdGVkRnJvbVJpZ2h0UlRMKSB7XG4gICAgY29tYmluZWRTdHlsZXMuaWNvbldyYXBwZXIudHJhbnNmb3JtID0gW1xuICAgICAge1xuICAgICAgICB0cmFuc2xhdGVYOiBpc0ljb25TdGF0aWNcbiAgICAgICAgICA/IDBcbiAgICAgICAgICA6IGFuaW1GQUIuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgICAgICBpbnB1dFJhbmdlOiBbZGlzdGFuY2UsIDBdLFxuICAgICAgICAgICAgICBvdXRwdXRSYW5nZTogWy1kaXN0YW5jZSwgMF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBjb21iaW5lZFN0eWxlcy5pbm5lcldyYXBwZXIudHJhbnNmb3JtID0gW1xuICAgICAge1xuICAgICAgICB0cmFuc2xhdGVYOiBhbmltRkFCLmludGVycG9sYXRlKHtcbiAgICAgICAgICBpbnB1dFJhbmdlOiBbZGlzdGFuY2UsIDBdLFxuICAgICAgICAgIG91dHB1dFJhbmdlOiBbLWRpc3RhbmNlLCAwXSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgIF07XG4gICAgY29tYmluZWRTdHlsZXMuYWJzb2x1dGVGaWxsLnRyYW5zZm9ybSA9IFtcbiAgICAgIHtcbiAgICAgICAgdHJhbnNsYXRlWDogYW5pbUZBQi5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgaW5wdXRSYW5nZTogW2Rpc3RhbmNlLCAwXSxcbiAgICAgICAgICBvdXRwdXRSYW5nZTogWzAsIGRpc3RhbmNlXSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgIF07XG4gIH0gZWxzZSBpZiAoYW5pbWF0ZWRGcm9tTGVmdCkge1xuICAgIGNvbWJpbmVkU3R5bGVzLmljb25XcmFwcGVyLnRyYW5zZm9ybSA9IFtcbiAgICAgIHtcbiAgICAgICAgdHJhbnNsYXRlWDogaXNJY29uU3RhdGljXG4gICAgICAgICAgPyBkaXN0YW5jZVxuICAgICAgICAgIDogYW5pbUZBQi5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCBkaXN0YW5jZV0sXG4gICAgICAgICAgICAgIG91dHB1dFJhbmdlOiBbZGlzdGFuY2UsIGRpc3RhbmNlICogMl0sXG4gICAgICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBjb21iaW5lZFN0eWxlcy5pbm5lcldyYXBwZXIudHJhbnNmb3JtID0gW1xuICAgICAge1xuICAgICAgICB0cmFuc2xhdGVYOiBhbmltRkFCLFxuICAgICAgfSxcbiAgICBdO1xuICAgIGNvbWJpbmVkU3R5bGVzLmFic29sdXRlRmlsbC50cmFuc2Zvcm0gPSBbXG4gICAgICB7XG4gICAgICAgIHRyYW5zbGF0ZVg6IGFuaW1GQUIuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCBkaXN0YW5jZV0sXG4gICAgICAgICAgb3V0cHV0UmFuZ2U6IFswLCBNYXRoLmFicyhkaXN0YW5jZSkgLyAyXSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgIF07XG4gIH0gZWxzZSBpZiAoYW5pbWF0ZWRGcm9tTGVmdFJUTCkge1xuICAgIGNvbWJpbmVkU3R5bGVzLmljb25XcmFwcGVyLnRyYW5zZm9ybSA9IFtcbiAgICAgIHtcbiAgICAgICAgdHJhbnNsYXRlWDogaXNJY29uU3RhdGljXG4gICAgICAgICAgPyBhbmltRkFCLmludGVycG9sYXRlKHtcbiAgICAgICAgICAgICAgaW5wdXRSYW5nZTogWzAsIGRpc3RhbmNlXSxcbiAgICAgICAgICAgICAgb3V0cHV0UmFuZ2U6IFstZGlzdGFuY2UsIC1kaXN0YW5jZSAqIDJdLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IC1kaXN0YW5jZSxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBjb21iaW5lZFN0eWxlcy5pbm5lcldyYXBwZXIudHJhbnNmb3JtID0gW1xuICAgICAge1xuICAgICAgICB0cmFuc2xhdGVYOiBhbmltRkFCLmludGVycG9sYXRlKHtcbiAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgZGlzdGFuY2VdLFxuICAgICAgICAgIG91dHB1dFJhbmdlOiBbMCwgLWRpc3RhbmNlXSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgIF07XG4gICAgY29tYmluZWRTdHlsZXMuYWJzb2x1dGVGaWxsLnRyYW5zZm9ybSA9IFtcbiAgICAgIHtcbiAgICAgICAgdHJhbnNsYXRlWDogYW5pbUZBQi5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgaW5wdXRSYW5nZTogWzAsIGRpc3RhbmNlXSxcbiAgICAgICAgICBvdXRwdXRSYW5nZTogWzAsIC1kaXN0YW5jZV0sXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICBdO1xuICB9XG5cbiAgcmV0dXJuIGNvbWJpbmVkU3R5bGVzO1xufTtcbiJdfQ==