c9f86243715c2c0841a30c449817b1d5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UserProfile;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _firebase = _interopRequireDefault(require("firebase"));

var _firebaseMethods = require("../API/firebaseMethods");

var _reactNativePaper = require("react-native-paper");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function UserProfile(_ref) {
  var navigation = _ref.navigation,
      route = _ref.route;

  var _useState = (0, _react.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      fullName = _useState2[0],
      setFullName = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      phone = _useState4[0],
      setPhone = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      email = _useState6[0],
      setEmail = _useState6[1];

  var _useState7 = (0, _react.useState)([]),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      user = _useState8[0],
      setUser = _useState8[1];

  var _useState9 = (0, _react.useState)(0),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      rating = _useState10[0],
      setRating = _useState10[1];

  var _useState11 = (0, _react.useState)([]),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      post = _useState12[0],
      setPost = _useState12[1];

  var _useState13 = (0, _react.useState)(0),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      avgrating = _useState14[0],
      setAvgRating = _useState14[1];

  (0, _react.useEffect)(function () {
    function fetchUserPosts() {
      _firebase.default.firestore().collection("posts").where("userId", "==", route.params.paramKey).orderBy("createdAt", "desc").get().then(function (snapshot) {
        var posts = snapshot.docs.map(function (doc) {
          var data = doc.data();

          _firebase.default.storage().ref('/' + data.image).getDownloadURL().then(function (url) {});

          return (0, _extends2.default)({}, data);
        });
        setPost(posts);
      });
    }

    fetchUserPosts();
  }, []);
  (0, _react.useEffect)(function () {
    function fetchUserPosts() {
      var data = _firebase.default.firestore().collection("users").doc(route.params.paramKey).get().then(function (querySnapshot) {
        var data = querySnapshot.data();
        setFullName(data.fullName);
        setEmail(data.email);
        setPhone(data.phone);
        setRating(data.rating);
        setUser(data);
        setAvgRating(data.rating / data.count);
      });
    }

    fetchUserPosts();
  }, []);
  return _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.View, {
    style: styles.div
  }, _react.default.createElement(_reactNative.Image, {
    style: styles.card_image,
    source: require('../assets/human.png')
  }), _react.default.createElement(_reactNative.Text, {
    style: {
      color: 'black',
      fontSize: 16,
      fontWeight: '500',
      alignSelf: 'center',
      top: '-3%'
    }
  }, fullName, "   ", _react.default.createElement(_reactNative.Image, {
    style: styles.img,
    source: require('../assets/star.png')
  }), " ", avgrating.toFixed(2)), _react.default.createElement(_reactNative.Text, {
    style: {
      color: 'black',
      fontSize: 16,
      fontWeight: '500',
      alignSelf: 'flex-start'
    }
  }, "POSTS"), _react.default.createElement(_reactNative.View, {
    style: styles.b1
  }, post.map(function (item, key) {
    return _react.default.createElement(_reactNative.Text, {
      key: key
    }, _react.default.createElement(_reactNative.View, {
      style: {
        padding: 5
      }
    }, _react.default.createElement(_reactNative.View, {
      style: styles.card_template1
    }, _react.default.createElement(_reactNativePaper.Card, {
      style: styles.card_template1
    }, _react.default.createElement(_reactNativePaper.Card.Content, null, _react.default.createElement(_reactNativePaper.Title, null, item.productName)), _react.default.createElement(_reactNativePaper.Card.Cover, {
      style: styles.card_image1,
      source: {
        uri: item.image
      }
    }), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title1
    }, " ", item.desc, " "), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title1
    }, "\u20B9", " ", item.price), item.status === "sold" ? _react.default.createElement(_reactNative.Text, {
      style: {
        top: -120,
        left: 190,
        borderRadius: 10,
        color: "black",
        height: 30,
        fontStyle: 'italic',
        padding: 4,
        paddingLeft: 4,
        fontSize: 15,
        backgroundColor: 'red',
        color: 'white',
        width: '23%'
      }
    }, "SOLD OUT") : null))));
  }))));
}

var styles = _reactNative.StyleSheet.create({
  img: {
    height: 24,
    width: 24
  },
  b1: {
    left: '-12%',
    marginTop: 20
  },
  card_template1: {
    width: 380,
    height: 230,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 4
    },
    shadowOpacity: 0.30,
    shadowRadius: 4.65,
    elevation: 8
  },
  Sold: {
    color: 'white'
  },
  card_image1: {
    marginTop: '1%',
    left: '2%',
    width: 150,
    height: 150,
    borderRadius: 10
  },
  text_container1: {
    position: "absolute",
    width: 250,
    height: 100,
    bottom: 0,
    padding: 5,
    backgroundColor: "rgba(0,0,0, 0.3)",
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10
  },
  card_title1: {
    top: -120,
    left: 190,
    color: "black",
    fontStyle: 'italic',
    fontSize: 15
  },
  background1: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  button1: {
    top: -40,
    left: 250,
    width: 120,
    padding: 0,
    backgroundColor: '#B6DCB6',
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 10,
    alignSelf: 'center'
  },
  button3: {
    top: '-35%',
    width: 120,
    padding: 5,
    backgroundColor: 'red',
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 15,
    alignSelf: 'center',
    height: 50,
    marginRight: 290,
    marginLeft: 180
  },
  buttonText1: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    textAlign: 'center'
  },
  container1: {
    height: '100%',
    width: '100%',
    backgroundColor: '#c0f3ff',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text1: {
    textAlign: 'center',
    fontSize: 20,
    fontStyle: 'italic',
    marginTop: '2%',
    marginBottom: '10%',
    fontWeight: 'bold',
    color: 'black'
  },
  titleText1: {
    textAlign: 'center',
    fontSize: 20,
    fontWeight: 'bold',
    color: 'black',
    top: '-23%',
    left: '-30%'
  },
  input: {
    top: '5%'
  },
  div: {
    left: '15%',
    alignContent: 'center',
    height: '100%'
  },
  formInput: {
    width: 300,
    fontSize: 18,
    borderBottomWidth: 1,
    borderColor: '#48494B',
    padding: 10,
    margin: 5
  },
  b: {
    top: '5%',
    left: '18%'
  },
  card_template: {
    width: 380,
    height: 230,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 4
    },
    shadowOpacity: 0.30,
    shadowRadius: 4.65,
    elevation: 8
  },
  card_image: {
    width: 100,
    height: 100,
    borderRadius: 45,
    left: '-5%',
    backgroundColor: 'white'
  },
  text_container: {
    position: "absolute",
    width: 250,
    height: 100,
    bottom: 0,
    padding: 5,
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10
  },
  card_title: {
    color: "black"
  },
  background: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  button: {
    top: '35%',
    left: '-12%',
    width: 120,
    padding: 5,
    backgroundColor: '#B6DCB6',
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 15,
    alignSelf: 'center'
  },
  buttonText: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    textAlign: 'center'
  },
  container: {
    height: '100%',
    width: '100%',
    backgroundColor: '#ECF3FB',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    textAlign: 'center',
    fontSize: 20,
    fontStyle: 'italic',
    marginTop: '2%',
    marginBottom: '10%',
    fontWeight: 'bold',
    color: 'black'
  },
  titleText: {
    textAlign: 'center',
    fontSize: 20,
    fontWeight: 'bold',
    color: 'black',
    top: '-23%',
    left: '-30%'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,