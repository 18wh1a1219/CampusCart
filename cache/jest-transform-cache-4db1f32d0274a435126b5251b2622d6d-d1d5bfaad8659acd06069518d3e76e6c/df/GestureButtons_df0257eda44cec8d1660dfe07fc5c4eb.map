{"version":3,"mappings":"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","names":["RawButton","GestureHandlerButton","shouldCancelWhenOutside","shouldActivateOnStart","BaseButton","constructor","props","_defineProperty","nativeEvent","state","oldState","pointerInside","active","State","ACTIVE","lastActive","onActiveStateChange","CANCELLED","onPress","e","onHandlerStateChange","handleEvent","onGestureEvent","render","rippleColor","rest","React","Component","AnimatedBaseButton","Animated","createAnimatedComponent","btnStyles","StyleSheet","create","underlay","position","left","right","bottom","top","RectButton","Platform","OS","opacity","setValue","activeOpacity","Value","children","style","resolvedStyle","flatten","_reactNative","View","backgroundColor","underlayColor","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","BorderlessButton","borderless"],"sources":["GestureButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  processColor,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport createNativeWrapper from '../handlers/createNativeWrapper';\nimport GestureHandlerButton from './GestureHandlerButton';\nimport { State } from '../State';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  NativeViewGestureHandlerPayload,\n  NativeViewGestureHandlerProps,\n} from '../handlers/NativeViewGestureHandler';\n\nexport interface RawButtonProps extends NativeViewGestureHandlerProps {\n  /**\n   * Defines if more than one button could be pressed simultaneously. By default\n   * set true.\n   */\n  exclusive?: boolean;\n  // TODO: we should transform props in `createNativeWrapper`\n\n  /**\n   * Android only.\n   *\n   * Defines color of native ripple animation used since API level 21.\n   */\n  rippleColor?: any; // it was present in BaseButtonProps before but is used here in code\n}\n\nexport interface BaseButtonProps extends RawButtonProps {\n  /**\n   * Called when the button gets pressed (analogous to `onPress` in\n   * `TouchableHighlight` from RN core).\n   */\n  onPress?: (pointerInside: boolean) => void;\n\n  /**\n   * Called when button changes from inactive to active and vice versa. It\n   * passes active state as a boolean variable as a first parameter for that\n   * method.\n   */\n  onActiveStateChange?: (active: boolean) => void;\n  style?: StyleProp<ViewStyle>;\n  testID?: string;\n}\n\nexport interface RectButtonProps extends BaseButtonProps {\n  /**\n   * Background color that will be dimmed when button is in active state.\n   */\n  underlayColor?: string;\n\n  /**\n   * iOS only.\n   *\n   * Opacity applied to the underlay when button is in active state.\n   */\n  activeOpacity?: number;\n}\n\nexport interface BorderlessButtonProps extends BaseButtonProps {\n  /**\n   * Android only.\n   *\n   * Set this to false if you want the ripple animation to render only within view bounds.\n   */\n  borderless?: boolean;\n\n  /**\n   * iOS only.\n   *\n   * Opacity applied to the button when it is in an active state.\n   */\n  activeOpacity?: number;\n}\n\nexport const RawButton = createNativeWrapper(GestureHandlerButton, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: false,\n});\n\nexport class BaseButton extends React.Component<BaseButtonProps> {\n  private lastActive: boolean;\n\n  constructor(props: BaseButtonProps) {\n    super(props);\n    this.lastActive = false;\n  }\n\n  private handleEvent = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state, oldState, pointerInside } = nativeEvent;\n    const active = pointerInside && state === State.ACTIVE;\n\n    if (active !== this.lastActive && this.props.onActiveStateChange) {\n      this.props.onActiveStateChange(active);\n    }\n\n    if (\n      oldState === State.ACTIVE &&\n      state !== State.CANCELLED &&\n      this.lastActive &&\n      this.props.onPress\n    ) {\n      this.props.onPress(active);\n    }\n\n    this.lastActive = active;\n  };\n\n  // Normally, the parent would execute it's handler first, then forward the\n  // event to listeners. However, here our handler is virtually only forwarding\n  // events to listeners, so we reverse the order to keep the proper order of\n  // the callbacks (from \"raw\" ones to \"processed\").\n  private onHandlerStateChange = (\n    e: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onHandlerStateChange?.(e);\n    this.handleEvent(e);\n  };\n\n  private onGestureEvent = (\n    e: GestureEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onGestureEvent?.(e);\n    this.handleEvent(\n      e as HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n    ); // TODO: maybe it is not correct\n  };\n\n  render() {\n    const { rippleColor, ...rest } = this.props;\n\n    return (\n      <RawButton\n        rippleColor={processColor(rippleColor)}\n        {...rest}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}\n      />\n    );\n  }\n}\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\nconst btnStyles = StyleSheet.create({\n  underlay: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0,\n  },\n});\n\nexport class RectButton extends React.Component<RectButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.105,\n    underlayColor: 'black',\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: RectButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(0);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 0);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    const resolvedStyle = StyleSheet.flatten(style ?? {});\n\n    return (\n      <BaseButton\n        {...rest}\n        style={resolvedStyle}\n        onActiveStateChange={this.onActiveStateChange}>\n        <Animated.View\n          style={[\n            btnStyles.underlay,\n            {\n              opacity: this.opacity,\n              backgroundColor: this.props.underlayColor,\n              borderRadius: resolvedStyle.borderRadius,\n              borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n              borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n              borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n              borderBottomRightRadius: resolvedStyle.borderBottomRightRadius,\n            },\n          ]}\n        />\n        {children}\n      </BaseButton>\n    );\n  }\n}\n\nexport class BorderlessButton extends React.Component<BorderlessButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: BorderlessButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(1);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 1);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    return (\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this.onActiveStateChange}\n        style={[style, Platform.OS === 'ios' && { opacity: this.opacity }]}>\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n\nexport { default as PureNativeButton } from './GestureHandlerButton';\n"]}