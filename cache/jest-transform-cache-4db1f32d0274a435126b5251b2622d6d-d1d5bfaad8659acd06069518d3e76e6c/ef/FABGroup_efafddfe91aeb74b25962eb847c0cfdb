e0acde6e5cb9baf7bb13ef1130bbb993
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FABGroup = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _FAB = _interopRequireDefault(require("./FAB"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _Card = _interopRequireDefault(require("../Card/Card"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var FABGroup = function FABGroup(_ref) {
  var actions = _ref.actions,
      icon = _ref.icon,
      open = _ref.open,
      _onPress = _ref.onPress,
      accessibilityLabel = _ref.accessibilityLabel,
      theme = _ref.theme,
      style = _ref.style,
      fabStyle = _ref.fabStyle,
      visible = _ref.visible,
      testID = _ref.testID,
      onStateChange = _ref.onStateChange,
      colorProp = _ref.color;

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(0)),
      backdrop = _React$useRef.current;

  var animations = React.useRef(actions.map(function () {
    return new _reactNative.Animated.Value(open ? 1 : 0);
  }));

  var _React$useState = React.useState(null),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      prevActions = _React$useState2[0],
      setPrevActions = _React$useState2[1];

  var scale = theme.animation.scale;
  React.useEffect(function () {
    if (open) {
      _reactNative.Animated.parallel([_reactNative.Animated.timing(backdrop, {
        toValue: 1,
        duration: 250 * scale,
        useNativeDriver: true
      }), _reactNative.Animated.stagger(50 * scale, animations.current.map(function (animation) {
        return _reactNative.Animated.timing(animation, {
          toValue: 1,
          duration: 150 * scale,
          useNativeDriver: true
        });
      }).reverse())]).start();
    } else {
      _reactNative.Animated.parallel([_reactNative.Animated.timing(backdrop, {
        toValue: 0,
        duration: 200 * scale,
        useNativeDriver: true
      })].concat((0, _toConsumableArray2.default)(animations.current.map(function (animation) {
        return _reactNative.Animated.timing(animation, {
          toValue: 0,
          duration: 150 * scale,
          useNativeDriver: true
        });
      })))).start();
    }
  }, [open, actions, backdrop, scale]);

  var close = function close() {
    return onStateChange({
      open: false
    });
  };

  var toggle = function toggle() {
    return onStateChange({
      open: !open
    });
  };

  var colors = theme.colors;
  var labelColor = theme.dark ? colors.text : (0, _color.default)(colors.text).fade(0.54).rgb().string();
  var backdropOpacity = open ? backdrop.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: [0, 1, 1]
  }) : backdrop;
  var opacities = animations.current;
  var scales = opacities.map(function (opacity) {
    return open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [0.8, 1]
    }) : 1;
  });

  if (actions.length !== (prevActions === null || prevActions === void 0 ? void 0 : prevActions.length)) {
    animations.current = actions.map(function (_, i) {
      return animations.current[i] || new _reactNative.Animated.Value(open ? 1 : 0);
    });
    setPrevActions(actions);
  }

  return React.createElement(_reactNative.View, {
    pointerEvents: "box-none",
    style: [styles.container, style]
  }, React.createElement(_reactNative.TouchableWithoutFeedback, {
    onPress: close
  }, React.createElement(_reactNative.Animated.View, {
    pointerEvents: open ? 'auto' : 'none',
    style: [styles.backdrop, {
      opacity: backdropOpacity,
      backgroundColor: colors.backdrop
    }]
  })), React.createElement(_reactNative.SafeAreaView, {
    pointerEvents: "box-none",
    style: styles.safeArea
  }, React.createElement(_reactNative.View, {
    pointerEvents: open ? 'box-none' : 'none'
  }, actions.map(function (it, i) {
    var _it$labelTextColor;

    return React.createElement(_reactNative.View, {
      key: i,
      style: [styles.item, {
        marginHorizontal: typeof it.small === 'undefined' || it.small ? 24 : 16
      }],
      pointerEvents: open ? 'box-none' : 'none'
    }, it.label && React.createElement(_reactNative.View, null, React.createElement(_Card.default, {
      style: [styles.label, {
        transform: [{
          scale: scales[i]
        }],
        opacity: opacities[i]
      }, it.labelStyle],
      onPress: function onPress() {
        it.onPress();
        close();
      },
      accessibilityLabel: it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label,
      accessibilityTraits: "button",
      accessibilityComponentType: "button",
      accessibilityRole: "button"
    }, React.createElement(_Text.default, {
      style: {
        color: (_it$labelTextColor = it.labelTextColor) !== null && _it$labelTextColor !== void 0 ? _it$labelTextColor : labelColor
      }
    }, it.label))), React.createElement(_FAB.default, {
      small: typeof it.small !== 'undefined' ? it.small : true,
      icon: it.icon,
      color: it.color,
      style: [{
        transform: [{
          scale: scales[i]
        }],
        opacity: opacities[i],
        backgroundColor: theme.colors.surface
      }, it.style],
      onPress: function onPress() {
        it.onPress();
        close();
      },
      accessibilityLabel: typeof it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label,
      accessibilityTraits: "button",
      accessibilityComponentType: "button",
      accessibilityRole: "button",
      testID: it.testID,
      visible: open
    }));
  })), React.createElement(_FAB.default, {
    onPress: function onPress() {
      _onPress === null || _onPress === void 0 ? void 0 : _onPress();
      toggle();
    },
    icon: icon,
    color: colorProp,
    accessibilityLabel: accessibilityLabel,
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      expanded: open
    },
    style: [styles.fab, fabStyle],
    visible: visible,
    testID: testID
  })));
};

FABGroup.displayName = 'FAB.Group';

var _default = (0, _theming.withTheme)(FABGroup);

exports.default = _default;
var FABGroupWithTheme = (0, _theming.withTheme)(FABGroup);
exports.FABGroup = FABGroupWithTheme;

var styles = _reactNative.StyleSheet.create({
  safeArea: {
    alignItems: 'flex-end'
  },
  container: (0, _extends2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
    justifyContent: 'flex-end'
  }),
  fab: {
    marginHorizontal: 16,
    marginBottom: 16,
    marginTop: 0
  },
  backdrop: (0, _extends2.default)({}, _reactNative.StyleSheet.absoluteFillObject),
  label: {
    borderRadius: 5,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginVertical: 8,
    marginHorizontal: 16,
    elevation: 2
  },
  item: {
    marginBottom: 16,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bWVzIjpbIkZBQkdyb3VwIiwiYWN0aW9ucyIsImljb24iLCJvcGVuIiwib25QcmVzcyIsImFjY2Vzc2liaWxpdHlMYWJlbCIsInRoZW1lIiwic3R5bGUiLCJmYWJTdHlsZSIsInZpc2libGUiLCJ0ZXN0SUQiLCJvblN0YXRlQ2hhbmdlIiwiY29sb3JQcm9wIiwiY29sb3IiLCJSZWFjdCIsInVzZVJlZiIsIkFuaW1hdGVkIiwiVmFsdWUiLCJiYWNrZHJvcCIsImN1cnJlbnQiLCJhbmltYXRpb25zIiwibWFwIiwidXNlU3RhdGUiLCJwcmV2QWN0aW9ucyIsInNldFByZXZBY3Rpb25zIiwic2NhbGUiLCJhbmltYXRpb24iLCJ1c2VFZmZlY3QiLCJwYXJhbGxlbCIsInRpbWluZyIsInRvVmFsdWUiLCJkdXJhdGlvbiIsInVzZU5hdGl2ZURyaXZlciIsInN0YWdnZXIiLCJyZXZlcnNlIiwic3RhcnQiLCJjbG9zZSIsInRvZ2dsZSIsImNvbG9ycyIsImxhYmVsQ29sb3IiLCJkYXJrIiwidGV4dCIsImZhZGUiLCJyZ2IiLCJzdHJpbmciLCJiYWNrZHJvcE9wYWNpdHkiLCJpbnRlcnBvbGF0ZSIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsIm9wYWNpdGllcyIsInNjYWxlcyIsIm9wYWNpdHkiLCJsZW5ndGgiLCJfIiwiaSIsIl9yZWFjdE5hdGl2ZSIsInBvaW50ZXJFdmVudHMiLCJzdHlsZXMiLCJjb250YWluZXIiLCJWaWV3IiwiYmFja2dyb3VuZENvbG9yIiwic2FmZUFyZWEiLCJpdCIsImtleSIsIml0ZW0iLCJtYXJnaW5Ib3Jpem9udGFsIiwic21hbGwiLCJsYWJlbCIsIl9DYXJkIiwidHJhbnNmb3JtIiwibGFiZWxTdHlsZSIsImFjY2Vzc2liaWxpdHlUcmFpdHMiLCJhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZSIsImFjY2Vzc2liaWxpdHlSb2xlIiwiX1RleHQiLCJsYWJlbFRleHRDb2xvciIsIl9GQUIiLCJzdXJmYWNlIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwiZXhwYW5kZWQiLCJmYWIiLCJkaXNwbGF5TmFtZSIsIkZBQkdyb3VwV2l0aFRoZW1lIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImFsaWduSXRlbXMiLCJhYnNvbHV0ZUZpbGxPYmplY3QiLCJqdXN0aWZ5Q29udGVudCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImJvcmRlclJhZGl1cyIsInBhZGRpbmdIb3Jpem9udGFsIiwicGFkZGluZ1ZlcnRpY2FsIiwibWFyZ2luVmVydGljYWwiLCJlbGV2YXRpb24iLCJmbGV4RGlyZWN0aW9uIl0sInNvdXJjZXMiOlsiRkFCR3JvdXAudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFN0eWxlUHJvcCxcbiAgU3R5bGVTaGVldCxcbiAgQW5pbWF0ZWQsXG4gIFNhZmVBcmVhVmlldyxcbiAgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLFxuICBWaWV3LFxuICBWaWV3U3R5bGUsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgY29sb3IgZnJvbSAnY29sb3InO1xuaW1wb3J0IEZBQiBmcm9tICcuL0ZBQic7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi9UeXBvZ3JhcGh5L1RleHQnO1xuaW1wb3J0IENhcmQgZnJvbSAnLi4vQ2FyZC9DYXJkJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uLy4uL2NvcmUvdGhlbWluZyc7XG5pbXBvcnQgdHlwZSB7IEljb25Tb3VyY2UgfSBmcm9tICcuLi9JY29uJztcblxudHlwZSBQcm9wcyA9IHtcbiAgLyoqXG4gICAqIEFjdGlvbiBpdGVtcyB0byBkaXNwbGF5IGluIHRoZSBmb3JtIG9mIGEgc3BlZWQgZGlhbC5cbiAgICogQW4gYWN0aW9uIGl0ZW0gc2hvdWxkIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKiAtIGBpY29uYDogaWNvbiB0byBkaXNwbGF5IChyZXF1aXJlZClcbiAgICogLSBgbGFiZWxgOiBvcHRpb25hbCBsYWJlbCB0ZXh0XG4gICAqIC0gYGFjY2Vzc2liaWxpdHlMYWJlbGA6IGFjY2Vzc2liaWxpdHkgbGFiZWwgZm9yIHRoZSBhY3Rpb24sIHVzZXMgbGFiZWwgYnkgZGVmYXVsdCBpZiBzcGVjaWZpZWRcbiAgICogLSBgY29sb3JgOiBjdXN0b20gaWNvbiBjb2xvciBvZiB0aGUgYWN0aW9uIGl0ZW1cbiAgICogLSBgbGFiZWxUZXh0Q29sb3JgOiBjdXN0b20gbGFiZWwgdGV4dCBjb2xvciBvZiB0aGUgYWN0aW9uIGl0ZW1cbiAgICogLSBgc3R5bGVgOiBwYXNzIGFkZGl0aW9uYWwgc3R5bGVzIGZvciB0aGUgZmFiIGl0ZW0sIGZvciBleGFtcGxlLCBgYmFja2dyb3VuZENvbG9yYFxuICAgKiAtIGBsYWJlbFN0eWxlYDogcGFzcyBhZGRpdGlvbmFsIHN0eWxlcyBmb3IgdGhlIGZhYiBpdGVtIGxhYmVsLCBmb3IgZXhhbXBsZSwgYGJhY2tncm91bmRDb2xvcmBcbiAgICogLSBgc21hbGxgOiBib29sZWFuIGRlc2NyaWJpbmcgd2hldGhlciBzbWFsbCBvciBub3JtYWwgc2l6ZWQgRkFCIGlzIHJlbmRlcmVkLiBEZWZhdWx0cyB0byBgdHJ1ZWBcbiAgICogLSBgb25QcmVzc2A6IGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gYEZBQmAgaXMgcHJlc3NlZCAocmVxdWlyZWQpXG4gICAqL1xuICBhY3Rpb25zOiBBcnJheTx7XG4gICAgaWNvbjogSWNvblNvdXJjZTtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBjb2xvcj86IHN0cmluZztcbiAgICBsYWJlbFRleHRDb2xvcj86IHN0cmluZztcbiAgICBhY2Nlc3NpYmlsaXR5TGFiZWw/OiBzdHJpbmc7XG4gICAgc3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbiAgICBsYWJlbFN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG4gICAgc21hbGw/OiBib29sZWFuO1xuICAgIG9uUHJlc3M6ICgpID0+IHZvaWQ7XG4gICAgdGVzdElEPzogc3RyaW5nO1xuICB9PjtcbiAgLyoqXG4gICAqIEljb24gdG8gZGlzcGxheSBmb3IgdGhlIGBGQUJgLlxuICAgKiBZb3UgY2FuIHRvZ2dsZSBpdCBiYXNlZCBvbiB3aGV0aGVyIHRoZSBzcGVlZCBkaWFsIGlzIG9wZW4gdG8gZGlzcGxheSBhIGRpZmZlcmVudCBpY29uLlxuICAgKi9cbiAgaWNvbjogSWNvblNvdXJjZTtcbiAgLyoqXG4gICAqIEFjY2Vzc2liaWxpdHkgbGFiZWwgZm9yIHRoZSBGQUIuIFRoaXMgaXMgcmVhZCBieSB0aGUgc2NyZWVuIHJlYWRlciB3aGVuIHRoZSB1c2VyIHRhcHMgdGhlIEZBQi5cbiAgICovXG4gIGFjY2Vzc2liaWxpdHlMYWJlbD86IHN0cmluZztcbiAgLyoqXG4gICAqIEN1c3RvbSBjb2xvciBmb3IgdGhlIGBGQUJgLlxuICAgKi9cbiAgY29sb3I/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIHByZXNzaW5nIHRoZSBgRkFCYC5cbiAgICovXG4gIG9uUHJlc3M/OiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogV2hldGhlciB0aGUgc3BlZWQgZGlhbCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogYm9vbGVhbjtcbiAgLyoqXG4gICAqIENhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBvbiBvcGVuaW5nIGFuZCBjbG9zaW5nIHRoZSBzcGVlZCBkaWFsLlxuICAgKiBUaGUgb3BlbiBzdGF0ZSBuZWVkcyB0byBiZSB1cGRhdGVkIHdoZW4gaXQncyBjYWxsZWQsIG90aGVyd2lzZSB0aGUgY2hhbmdlIGlzIGRyb3BwZWQuXG4gICAqL1xuICBvblN0YXRlQ2hhbmdlOiAoc3RhdGU6IHsgb3BlbjogYm9vbGVhbiB9KSA9PiB2b2lkO1xuICAvKipcbiAgICogV2hldGhlciBgRkFCYCBpcyBjdXJyZW50bHkgdmlzaWJsZS5cbiAgICovXG4gIHZpc2libGU6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBTdHlsZSBmb3IgdGhlIGdyb3VwLiBZb3UgY2FuIHVzZSBpdCB0byBwYXNzIGFkZGl0aW9uYWwgc3R5bGVzIGlmIHlvdSBuZWVkLlxuICAgKiBGb3IgZXhhbXBsZSwgeW91IGNhbiBzZXQgYW4gYWRkaXRpb25hbCBwYWRkaW5nIGlmIHlvdSBoYXZlIGEgdGFiIGJhciBhdCB0aGUgYm90dG9tLlxuICAgKi9cbiAgc3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbiAgLyoqXG4gICAqIFN0eWxlIGZvciB0aGUgRkFCLiBJdCBhbGxvd3MgdG8gcGFzcyB0aGUgRkFCIGJ1dHRvbiBzdHlsZXMsIHN1Y2ggYXMgYmFja2dyb3VuZENvbG9yLlxuICAgKi9cbiAgZmFiU3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFJlYWN0TmF0aXZlUGFwZXIuVGhlbWU7XG4gIC8qKlxuICAgKiBQYXNzIGRvd24gdGVzdElEIGZyb20gR3JvdXAgcHJvcHMgdG8gRkFCLlxuICAgKi9cbiAgdGVzdElEPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB0byBkaXNwbGF5IGEgc3RhY2sgb2YgRkFCcyB3aXRoIHJlbGF0ZWQgYWN0aW9ucyBpbiBhIHNwZWVkIGRpYWwuXG4gKiBUbyByZW5kZXIgdGhlIGdyb3VwIGFib3ZlIG90aGVyIGNvbXBvbmVudHMsIHlvdSdsbCBuZWVkIHRvIHdyYXAgaXQgd2l0aCB0aGUgW2BQb3J0YWxgXShwb3J0YWwuaHRtbCkgY29tcG9uZW50LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL2ZhYi1ncm91cC5wbmdcIiAvPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBGQUIsIFBvcnRhbCwgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG4gKlxuICogICBjb25zdCBvblN0YXRlQ2hhbmdlID0gKHsgb3BlbiB9KSA9PiBzZXRTdGF0ZSh7IG9wZW4gfSk7XG4gKlxuICogICBjb25zdCB7IG9wZW4gfSA9IHN0YXRlO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8UHJvdmlkZXI+XG4gKiAgICAgICA8UG9ydGFsPlxuICogICAgICAgICA8RkFCLkdyb3VwXG4gKiAgICAgICAgICAgb3Blbj17b3Blbn1cbiAqICAgICAgICAgICBpY29uPXtvcGVuID8gJ2NhbGVuZGFyLXRvZGF5JyA6ICdwbHVzJ31cbiAqICAgICAgICAgICBhY3Rpb25zPXtbXG4gKiAgICAgICAgICAgICB7IGljb246ICdwbHVzJywgb25QcmVzczogKCkgPT4gY29uc29sZS5sb2coJ1ByZXNzZWQgYWRkJykgfSxcbiAqICAgICAgICAgICAgIHtcbiAqICAgICAgICAgICAgICAgaWNvbjogJ3N0YXInLFxuICogICAgICAgICAgICAgICBsYWJlbDogJ1N0YXInLFxuICogICAgICAgICAgICAgICBvblByZXNzOiAoKSA9PiBjb25zb2xlLmxvZygnUHJlc3NlZCBzdGFyJyksXG4gKiAgICAgICAgICAgICB9LFxuICogICAgICAgICAgICAge1xuICogICAgICAgICAgICAgICBpY29uOiAnZW1haWwnLFxuICogICAgICAgICAgICAgICBsYWJlbDogJ0VtYWlsJyxcbiAqICAgICAgICAgICAgICAgb25QcmVzczogKCkgPT4gY29uc29sZS5sb2coJ1ByZXNzZWQgZW1haWwnKSxcbiAqICAgICAgICAgICAgIH0sXG4gKiAgICAgICAgICAgICB7XG4gKiAgICAgICAgICAgICAgIGljb246ICdiZWxsJyxcbiAqICAgICAgICAgICAgICAgbGFiZWw6ICdSZW1pbmQnLFxuICogICAgICAgICAgICAgICBvblByZXNzOiAoKSA9PiBjb25zb2xlLmxvZygnUHJlc3NlZCBub3RpZmljYXRpb25zJyksXG4gKiAgICAgICAgICAgICAgIHNtYWxsOiBmYWxzZSxcbiAqICAgICAgICAgICAgIH0sXG4gKiAgICAgICAgICAgXX1cbiAqICAgICAgICAgICBvblN0YXRlQ2hhbmdlPXtvblN0YXRlQ2hhbmdlfVxuICogICAgICAgICAgIG9uUHJlc3M9eygpID0+IHtcbiAqICAgICAgICAgICAgIGlmIChvcGVuKSB7XG4gKiAgICAgICAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBpZiB0aGUgc3BlZWQgZGlhbCBpcyBvcGVuXG4gKiAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgfX1cbiAqICAgICAgICAgLz5cbiAqICAgICAgIDwvUG9ydGFsPlxuICogICAgIDwvUHJvdmlkZXI+XG4gKiAgICk7XG4gKiB9O1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IE15Q29tcG9uZW50O1xuICogYGBgXG4gKi9cbmNvbnN0IEZBQkdyb3VwID0gKHtcbiAgYWN0aW9ucyxcbiAgaWNvbixcbiAgb3BlbixcbiAgb25QcmVzcyxcbiAgYWNjZXNzaWJpbGl0eUxhYmVsLFxuICB0aGVtZSxcbiAgc3R5bGUsXG4gIGZhYlN0eWxlLFxuICB2aXNpYmxlLFxuICB0ZXN0SUQsXG4gIG9uU3RhdGVDaGFuZ2UsXG4gIGNvbG9yOiBjb2xvclByb3AsXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IGN1cnJlbnQ6IGJhY2tkcm9wIH0gPSBSZWFjdC51c2VSZWY8QW5pbWF0ZWQuVmFsdWU+KFxuICAgIG5ldyBBbmltYXRlZC5WYWx1ZSgwKVxuICApO1xuICBjb25zdCBhbmltYXRpb25zID0gUmVhY3QudXNlUmVmPEFuaW1hdGVkLlZhbHVlW10+KFxuICAgIGFjdGlvbnMubWFwKCgpID0+IG5ldyBBbmltYXRlZC5WYWx1ZShvcGVuID8gMSA6IDApKVxuICApO1xuXG4gIGNvbnN0IFtwcmV2QWN0aW9ucywgc2V0UHJldkFjdGlvbnNdID0gUmVhY3QudXNlU3RhdGU8XG4gICAgfCB7XG4gICAgICAgIGljb246IEljb25Tb3VyY2U7XG4gICAgICAgIGxhYmVsPzogc3RyaW5nO1xuICAgICAgICBjb2xvcj86IHN0cmluZztcbiAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPzogc3RyaW5nO1xuICAgICAgICBzdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuICAgICAgICBvblByZXNzOiAoKSA9PiB2b2lkO1xuICAgICAgICB0ZXN0SUQ/OiBzdHJpbmc7XG4gICAgICB9W11cbiAgICB8IG51bGxcbiAgPihudWxsKTtcblxuICBjb25zdCB7IHNjYWxlIH0gPSB0aGVtZS5hbmltYXRpb247XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAob3Blbikge1xuICAgICAgQW5pbWF0ZWQucGFyYWxsZWwoW1xuICAgICAgICBBbmltYXRlZC50aW1pbmcoYmFja2Ryb3AsIHtcbiAgICAgICAgICB0b1ZhbHVlOiAxLFxuICAgICAgICAgIGR1cmF0aW9uOiAyNTAgKiBzY2FsZSxcbiAgICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IHRydWUsXG4gICAgICAgIH0pLFxuICAgICAgICBBbmltYXRlZC5zdGFnZ2VyKFxuICAgICAgICAgIDUwICogc2NhbGUsXG4gICAgICAgICAgYW5pbWF0aW9ucy5jdXJyZW50XG4gICAgICAgICAgICAubWFwKChhbmltYXRpb24pID0+XG4gICAgICAgICAgICAgIEFuaW1hdGVkLnRpbWluZyhhbmltYXRpb24sIHtcbiAgICAgICAgICAgICAgICB0b1ZhbHVlOiAxLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxNTAgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IHRydWUsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICksXG4gICAgICBdKS5zdGFydCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBBbmltYXRlZC5wYXJhbGxlbChbXG4gICAgICAgIEFuaW1hdGVkLnRpbWluZyhiYWNrZHJvcCwge1xuICAgICAgICAgIHRvVmFsdWU6IDAsXG4gICAgICAgICAgZHVyYXRpb246IDIwMCAqIHNjYWxlLFxuICAgICAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcbiAgICAgICAgfSksXG4gICAgICAgIC4uLmFuaW1hdGlvbnMuY3VycmVudC5tYXAoKGFuaW1hdGlvbikgPT5cbiAgICAgICAgICBBbmltYXRlZC50aW1pbmcoYW5pbWF0aW9uLCB7XG4gICAgICAgICAgICB0b1ZhbHVlOiAwLFxuICAgICAgICAgICAgZHVyYXRpb246IDE1MCAqIHNjYWxlLFxuICAgICAgICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0cnVlLFxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICBdKS5zdGFydCgpO1xuICAgIH1cbiAgfSwgW29wZW4sIGFjdGlvbnMsIGJhY2tkcm9wLCBzY2FsZV0pO1xuXG4gIGNvbnN0IGNsb3NlID0gKCkgPT4gb25TdGF0ZUNoYW5nZSh7IG9wZW46IGZhbHNlIH0pO1xuXG4gIGNvbnN0IHRvZ2dsZSA9ICgpID0+IG9uU3RhdGVDaGFuZ2UoeyBvcGVuOiAhb3BlbiB9KTtcblxuICBjb25zdCB7IGNvbG9ycyB9ID0gdGhlbWU7XG5cbiAgY29uc3QgbGFiZWxDb2xvciA9IHRoZW1lLmRhcmtcbiAgICA/IGNvbG9ycy50ZXh0XG4gICAgOiBjb2xvcihjb2xvcnMudGV4dCkuZmFkZSgwLjU0KS5yZ2IoKS5zdHJpbmcoKTtcbiAgY29uc3QgYmFja2Ryb3BPcGFjaXR5ID0gb3BlblxuICAgID8gYmFja2Ryb3AuaW50ZXJwb2xhdGUoe1xuICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMC41LCAxXSxcbiAgICAgICAgb3V0cHV0UmFuZ2U6IFswLCAxLCAxXSxcbiAgICAgIH0pXG4gICAgOiBiYWNrZHJvcDtcblxuICBjb25zdCBvcGFjaXRpZXMgPSBhbmltYXRpb25zLmN1cnJlbnQ7XG4gIGNvbnN0IHNjYWxlcyA9IG9wYWNpdGllcy5tYXAoKG9wYWNpdHkpID0+XG4gICAgb3BlblxuICAgICAgPyBvcGFjaXR5LmludGVycG9sYXRlKHtcbiAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgb3V0cHV0UmFuZ2U6IFswLjgsIDFdLFxuICAgICAgICB9KVxuICAgICAgOiAxXG4gICk7XG5cbiAgaWYgKGFjdGlvbnMubGVuZ3RoICE9PSBwcmV2QWN0aW9ucz8ubGVuZ3RoKSB7XG4gICAgYW5pbWF0aW9ucy5jdXJyZW50ID0gYWN0aW9ucy5tYXAoXG4gICAgICAoXywgaSkgPT4gYW5pbWF0aW9ucy5jdXJyZW50W2ldIHx8IG5ldyBBbmltYXRlZC5WYWx1ZShvcGVuID8gMSA6IDApXG4gICAgKTtcbiAgICBzZXRQcmV2QWN0aW9ucyhhY3Rpb25zKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFZpZXcgcG9pbnRlckV2ZW50cz1cImJveC1ub25lXCIgc3R5bGU9e1tzdHlsZXMuY29udGFpbmVyLCBzdHlsZV19PlxuICAgICAgPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayBvblByZXNzPXtjbG9zZX0+XG4gICAgICAgIDxBbmltYXRlZC5WaWV3XG4gICAgICAgICAgcG9pbnRlckV2ZW50cz17b3BlbiA/ICdhdXRvJyA6ICdub25lJ31cbiAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgc3R5bGVzLmJhY2tkcm9wLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBvcGFjaXR5OiBiYWNrZHJvcE9wYWNpdHksXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLmJhY2tkcm9wLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdfVxuICAgICAgICAvPlxuICAgICAgPC9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2s+XG4gICAgICA8U2FmZUFyZWFWaWV3IHBvaW50ZXJFdmVudHM9XCJib3gtbm9uZVwiIHN0eWxlPXtzdHlsZXMuc2FmZUFyZWF9PlxuICAgICAgICA8VmlldyBwb2ludGVyRXZlbnRzPXtvcGVuID8gJ2JveC1ub25lJyA6ICdub25lJ30+XG4gICAgICAgICAge2FjdGlvbnMubWFwKChpdCwgaSkgPT4gKFxuICAgICAgICAgICAgPFZpZXdcbiAgICAgICAgICAgICAga2V5PXtpfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L25vLWFycmF5LWluZGV4LWtleVxuICAgICAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgICAgIHN0eWxlcy5pdGVtLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG1hcmdpbkhvcml6b250YWw6XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpdC5zbWFsbCA9PT0gJ3VuZGVmaW5lZCcgfHwgaXQuc21hbGwgPyAyNCA6IDE2LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM9e29wZW4gPyAnYm94LW5vbmUnIDogJ25vbmUnfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7aXQubGFiZWwgJiYgKFxuICAgICAgICAgICAgICAgIDxWaWV3PlxuICAgICAgICAgICAgICAgICAgPENhcmRcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e1xuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlcy5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBbeyBzY2FsZTogc2NhbGVzW2ldIH1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXRpZXNbaV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgaXQubGFiZWxTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICBdIGFzIFN0eWxlUHJvcDxWaWV3U3R5bGU+XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb25QcmVzcz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGl0Lm9uUHJlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e1xuICAgICAgICAgICAgICAgICAgICAgIGl0LmFjY2Vzc2liaWxpdHlMYWJlbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gaXQuYWNjZXNzaWJpbGl0eUxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGl0LmxhYmVsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBrZWVwIG9sZCBhMTF5IHByb3BzIGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggb2xkIFJOIHZlcnNpb25zXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlUcmFpdHM9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3sgY29sb3I6IGl0LmxhYmVsVGV4dENvbG9yID8/IGxhYmVsQ29sb3IgfX0+XG4gICAgICAgICAgICAgICAgICAgICAge2l0LmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8RkFCXG4gICAgICAgICAgICAgICAgc21hbGw9e3R5cGVvZiBpdC5zbWFsbCAhPT0gJ3VuZGVmaW5lZCcgPyBpdC5zbWFsbCA6IHRydWV9XG4gICAgICAgICAgICAgICAgaWNvbj17aXQuaWNvbn1cbiAgICAgICAgICAgICAgICBjb2xvcj17aXQuY29sb3J9XG4gICAgICAgICAgICAgICAgc3R5bGU9e1xuICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBbeyBzY2FsZTogc2NhbGVzW2ldIH1dLFxuICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdGllc1tpXSxcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy5zdXJmYWNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpdC5zdHlsZSxcbiAgICAgICAgICAgICAgICAgIF0gYXMgU3R5bGVQcm9wPFZpZXdTdHlsZT5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25QcmVzcz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaXQub25QcmVzcygpO1xuICAgICAgICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD17XG4gICAgICAgICAgICAgICAgICB0eXBlb2YgaXQuYWNjZXNzaWJpbGl0eUxhYmVsICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICA/IGl0LmFjY2Vzc2liaWxpdHlMYWJlbFxuICAgICAgICAgICAgICAgICAgICA6IGl0LmxhYmVsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2Uga2VlcCBvbGQgYTExeSBwcm9wcyBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIG9sZCBSTiB2ZXJzaW9uc1xuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlUcmFpdHM9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgdGVzdElEPXtpdC50ZXN0SUR9XG4gICAgICAgICAgICAgICAgdmlzaWJsZT17b3Blbn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9WaWV3PlxuICAgICAgICA8RkFCXG4gICAgICAgICAgb25QcmVzcz17KCkgPT4ge1xuICAgICAgICAgICAgb25QcmVzcz8uKCk7XG4gICAgICAgICAgICB0b2dnbGUoKTtcbiAgICAgICAgICB9fVxuICAgICAgICAgIGljb249e2ljb259XG4gICAgICAgICAgY29sb3I9e2NvbG9yUHJvcH1cbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2FjY2Vzc2liaWxpdHlMYWJlbH1cbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGtlZXAgb2xkIGExMXkgcHJvcHMgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBvbGQgUk4gdmVyc2lvbnNcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5VHJhaXRzPVwiYnV0dG9uXCJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZT17eyBleHBhbmRlZDogb3BlbiB9fVxuICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLmZhYiwgZmFiU3R5bGVdfVxuICAgICAgICAgIHZpc2libGU9e3Zpc2libGV9XG4gICAgICAgICAgdGVzdElEPXt0ZXN0SUR9XG4gICAgICAgIC8+XG4gICAgICA8L1NhZmVBcmVhVmlldz5cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5GQUJHcm91cC5kaXNwbGF5TmFtZSA9ICdGQUIuR3JvdXAnO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoRkFCR3JvdXApO1xuXG4vLyBAY29tcG9uZW50LWRvY3MgaWdub3JlLW5leHQtbGluZVxuY29uc3QgRkFCR3JvdXBXaXRoVGhlbWUgPSB3aXRoVGhlbWUoRkFCR3JvdXApO1xuLy8gQGNvbXBvbmVudC1kb2NzIGlnbm9yZS1uZXh0LWxpbmVcbmV4cG9ydCB7IEZBQkdyb3VwV2l0aFRoZW1lIGFzIEZBQkdyb3VwIH07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgc2FmZUFyZWE6IHtcbiAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnLFxuICB9LFxuICBjb250YWluZXI6IHtcbiAgICAuLi5TdHlsZVNoZWV0LmFic29sdXRlRmlsbE9iamVjdCxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgfSxcbiAgZmFiOiB7XG4gICAgbWFyZ2luSG9yaXpvbnRhbDogMTYsXG4gICAgbWFyZ2luQm90dG9tOiAxNixcbiAgICBtYXJnaW5Ub3A6IDAsXG4gIH0sXG4gIGJhY2tkcm9wOiB7XG4gICAgLi4uU3R5bGVTaGVldC5hYnNvbHV0ZUZpbGxPYmplY3QsXG4gIH0sXG4gIGxhYmVsOiB7XG4gICAgYm9yZGVyUmFkaXVzOiA1LFxuICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxMixcbiAgICBwYWRkaW5nVmVydGljYWw6IDYsXG4gICAgbWFyZ2luVmVydGljYWw6IDgsXG4gICAgbWFyZ2luSG9yaXpvbnRhbDogMTYsXG4gICAgZWxldmF0aW9uOiAyLFxuICB9LFxuICBpdGVtOiB7XG4gICAgbWFyZ2luQm90dG9tOiAxNixcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSxcbn0pO1xuIl19