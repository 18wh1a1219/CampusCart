{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,EAApB;;AAoEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAYP;EAAA,qBAXXC,IAWW;EAAA,IAXXA,IAWW,0BAXJF,WAWI;EAAA,IAVXG,MAUW,QAVXA,MAUW;EAAA,IATXC,KASW,QATXA,KASW;EAAA,IARXC,OAQW,QARXA,OAQW;EAAA,IAPXC,QAOW,QAPXA,QAOW;EAAA,IANXC,MAMW,QANXA,MAMW;EAAA,IALXC,SAKW,QALXA,SAKW;EAAA,IAJXC,WAIW,QAJXA,WAIW;EAAA,IAHXC,UAGW,QAHXA,UAGW;EAAA,IAFXC,KAEW,QAFXA,KAEW;EAAA,IADRC,IACQ;EACX,IAAQC,MAAR,GAAmBF,KAAnB,CAAQE,MAAR;;EAEA,YAA6CC,wBAAWC,OAAXD,CAAmBV,KAAnBU,KAA6B,EAA1E;EAAA,kCAAQE,eAAR;EAAA,IAAQA,eAAR,sCAA0BH,MAAM,CAACI,OAAjC;;EAEA,OACEC,oBAACC,iBAAD;IACEf,KAAK,EAAE,CACL;MACEgB,KAAK,EAAElB,IADT;MAEEmB,MAAM,EAAEnB,IAFV;MAGEoB,YAAY,EAAEpB,IAAI,GAAG,CAHvB;MAIEc;IAJF,CADK,EAOLZ,KAPK;EADT,GAUMQ,IAVN,GAYG,OAAOT,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAAC;IAAED;EAAF,CAAD,CAZzC,EAaG,OAAOC,MAAP,KAAkB,UAAlB,IACCe,oBAACC,kBAAD;IACEhB,MAAM,EAAEA,MADV;IAEEC,KAAK,EAAE;MAAEgB,KAAK,EAAElB,IAAT;MAAemB,MAAM,EAAEnB,IAAvB;MAA6BoB,YAAY,EAAEpB,IAAI,GAAG;IAAlD,CAFT;IAGEG,OAAO,EAAEA,OAHX;IAIEC,QAAQ,EAAEA,QAJZ;IAKEC,MAAM,EAAEA,MALV;IAMEC,SAAS,EAAEA,SANb;IAOEC,WAAW,EAAEA,WAPf;IAQEC,UAAU,EAAEA;EARd,EAdJ,CADF;AAjBF;;AA+CAT,WAAW,CAACsB,WAAZtB,GAA0B,cAA1BA;;eAEe,wBAAUA,WAAV","names":["defaultSize","AvatarImage","size","source","style","onError","onLayout","onLoad","onLoadEnd","onLoadStart","onProgress","theme","rest","colors","StyleSheet","flatten","backgroundColor","primary","React","_reactNative","width","height","borderRadius","displayName"],"sources":["AvatarImage.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  ImageSourcePropType,\n  ImageProps,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\n\nconst defaultSize = 64;\n\nexport type AvatarImageSource =\n  | ImageSourcePropType\n  | ((props: { size: number }) => React.ReactNode);\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Image to display for the `Avatar`.\n   * It accepts a standard React Native Image `source` prop\n   * Or a function that returns an `Image`.\n   */\n  source: AvatarImageSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Invoked on load error.\n   */\n  onError?: ImageProps['onError'];\n  /**\n   * Invoked on mount and on layout changes.\n   */\n  onLayout?: ImageProps['onLayout'];\n  /**\n   * Invoked when load completes successfully.\n   */\n  onLoad?: ImageProps['onLoad'];\n  /**\n   * Invoked when load either succeeds or fails.\n   */\n  onLoadEnd?: ImageProps['onLoadEnd'];\n  /**\n   * Invoked on load start.\n   */\n  onLoadStart?: ImageProps['onLoadStart'];\n  /**\n   * Invoked on download progress.\n   */\n  onProgress?: ImageProps['onProgress'];\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-image.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Image size={24} source={require('../assets/avatar.png')} />\n * );\n * export default MyComponent\n * ```\n */\nconst AvatarImage = ({\n  size = defaultSize,\n  source,\n  style,\n  onError,\n  onLayout,\n  onLoad,\n  onLoadEnd,\n  onLoadStart,\n  onProgress,\n  theme,\n  ...rest\n}: Props) => {\n  const { colors } = theme;\n\n  const { backgroundColor = colors.primary } = StyleSheet.flatten(style) || {};\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {typeof source === 'function' && source({ size })}\n      {typeof source !== 'function' && (\n        <Image\n          source={source}\n          style={{ width: size, height: size, borderRadius: size / 2 }}\n          onError={onError}\n          onLayout={onLayout}\n          onLoad={onLoad}\n          onLoadEnd={onLoadEnd}\n          onLoadStart={onLoadStart}\n          onProgress={onProgress}\n        />\n      )}\n    </View>\n  );\n};\n\nAvatarImage.displayName = 'Avatar.Image';\n\nexport default withTheme(AvatarImage);\n"]}