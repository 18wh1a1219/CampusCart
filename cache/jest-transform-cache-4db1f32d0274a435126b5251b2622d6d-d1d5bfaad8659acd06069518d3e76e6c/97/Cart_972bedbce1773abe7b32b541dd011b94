fad03c114bdefc3f7564550790804a7c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Cart;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _firebase = _interopRequireDefault(require("firebase"));

var _reactNative = require("react-native");

var _reactNativePaper = require("react-native-paper");

var _native = require("@react-navigation/native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _Loaddd = _interopRequireDefault(require("./Loaddd"));

var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Cart(_ref) {
  var navigation = _ref.navigation,
      route = _ref.route;

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      cartProducts = _useState2[0],
      setcartProducts = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      newArray = _useState4[0],
      setnewArray = _useState4[1];

  var _useState5 = (0, _react.useState)(true),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      cond = _useState6[0],
      setCond = _useState6[1];

  var _useState7 = (0, _react.useState)(true),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      loading = _useState8[0],
      setLoading = _useState8[1];

  var isFocused = (0, _native.useIsFocused)();
  (0, _react.useEffect)(function () {
    function fetchUserPosts() {
      _firebase.default.firestore().collection('Cartt').doc(_firebase.default.auth().currentUser.uid).collection('cart').get().then(function (snapshot) {
        var posts = snapshot.docs.map(function (doc) {
          var data = doc.data();

          _firebase.default.storage().ref('/' + data.image).getDownloadURL();

          return (0, _extends2.default)({}, data);
        });
        cartProducts.forEach(function (obj) {
          if (!newArray.some(function (o) {
            return o.image === obj.image;
          })) {
            newArray.push(obj);
          }

          if (!newArray.some(function (o) {
            return o.userId === obj.userId;
          })) {
            setCond(false);
          }
        });
        setcartProducts(posts);
      });
    }

    isFocused && fetchUserPosts();
  }, [isFocused]);

  var proceed = function _callee() {
    var h;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            h = 0;
            cartProducts.forEach(function (x) {
              _firebase.default.firestore().collection("posts").doc(x.id).get().then(function (snapshot) {
                var data = snapshot.data();
                console.log(data);
                console.log(data.status);

                if (data.status === 'sold') {
                  alert("An item is sold out");
                  navigation.navigate('Cart');
                }
              });
            });
            navigation.navigate('Payment', {
              paramKey: cartProducts
            });

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  };

  var remove = function remove(iid) {
    setLoading(false);
    var count = -1;

    _firebase.default.firestore().collection('Cartt/' + _firebase.default.auth().currentUser.uid + '/cart').get().then(function (res) {
      console.log("hey");
      res.forEach(function (ele) {
        count = count + 1;
        var j = ele.id;
        console.log(j, iid);

        if (j === iid || j.localeCompare(iid)) {
          _firebase.default.firestore().collection('Cartt/' + _firebase.default.auth().currentUser.uid + '/cart').get().then(function (querySnapshot) {
            querySnapshot.docs[count].ref.delete().then(function (re) {
              _firebase.default.firestore().collection('Cartt').doc(_firebase.default.auth().currentUser.uid).collection('cart').get().then(function (snapshot) {
                var posts = snapshot.docs.map(function (doc) {
                  var data = doc.data();

                  _firebase.default.storage().ref('/' + data.image).getDownloadURL();

                  return (0, _extends2.default)({}, data);
                });
                setLoading(true);
                setcartProducts(posts);
              });
            });
          });
        }
      });
    });
  };

  return _react.default.createElement(_reactNative.View, null, loading ? _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.View, null, cartProducts.length > 0 ? cartProducts.map(function (item, i) {
    return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.View, {
      style: {
        padding: 5
      }
    }, _react.default.createElement(_reactNative.View, {
      style: styles.card_template1
    }, _react.default.createElement(_reactNativePaper.Card, {
      style: styles.card_template1
    }, _react.default.createElement(_reactNativePaper.Card.Content, null, _react.default.createElement(_reactNativePaper.Title, null, item.productName, _react.default.createElement(_reactNativePaper.Button, {
      onPress: function onPress() {
        return remove(item.id);
      }
    }, "Remove from Cart")), _react.default.createElement(_MaterialCommunityIcons.default, {
      onPress: function onPress() {
        return remove(item.id);
      },
      name: "delete",
      size: 26
    })), _react.default.createElement(_reactNativePaper.Card.Cover, {
      style: styles.card_image1,
      source: {
        uri: item.image
      }
    }), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title1
    }, "Details: ", item.desc, " "), _react.default.createElement(_reactNative.Text, {
      style: styles.card_title1
    }, "Price: ", item.price)))), _react.default.createElement(_reactNative.View, null));
  }) : _react.default.createElement(_reactNative.Text, {
    style: {
      marginLeft: '10%',
      marginTop: '20%'
    }
  }, " No items in cart"), _react.default.createElement(_reactNative.View, null, cartProducts.length > 0 ? _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {
    onPress: function onPress() {
      return proceed();
    }
  }, _react.default.createElement(_reactNativePaper.Button, {
    style: {
      backgroundColor: '#ffd60a',
      borderRadius: 15,
      height: 43,
      width: 300,
      alignSelf: 'center'
    }
  }, _react.default.createElement(_reactNative.Text, {
    style: {
      alignItems: "center",
      color: 'darkblue'
    }
  }, "Proceed to Next Step"))) : null))) : _react.default.createElement(_Loaddd.default, null));
}

var styles = _reactNative.StyleSheet.create({
  buttonText1: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    textAlign: 'center',
    width: 365
  },
  con: {
    marginTop: '2%'
  },
  name: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    marginTop: -80,
    marginLeft: 80,
    marginBottom: 35
  },
  Sold: {
    color: 'white'
  },
  box: {
    backgroundColor: '#ffffff',
    width: 450,
    height: 400,
    marginLeft: -60,
    paddingLeft: 20
  },
  heading: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    marginTop: 19,
    marginLeft: 100
  },
  b1: {
    top: '0.5%',
    left: '-12%',
    marginTop: 20
  },
  card_template1: {
    width: '100%',
    height: 230
  },
  card_image1: {
    left: 17,
    width: 100,
    height: 150,
    borderRadius: 10
  },
  text_container1: {
    position: "absolute",
    width: 250,
    height: 100,
    bottom: 0,
    padding: 5,
    backgroundColor: "rgba(0,0,0, 0.3)",
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10
  },
  card_title1: {
    top: -120,
    left: 180,
    color: "black",
    fontStyle: 'italic',
    fontSize: 15
  },
  background1: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  button1: {
    left: 250,
    width: 120,
    padding: 0,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 10,
    alignSelf: 'center'
  },
  buttonText1: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    textAlign: 'center',
    width: 365
  },
  container1: {
    height: '100%',
    width: '100%',
    backgroundColor: '#c0f3ff',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text1: {
    textAlign: 'center',
    fontSize: 20,
    fontStyle: 'italic',
    marginTop: '2%',
    marginBottom: '10%',
    fontWeight: 'bold',
    color: 'black'
  },
  titleText1: {
    textAlign: 'center',
    fontSize: 20,
    fontWeight: 'bold',
    color: 'black',
    top: '-23%',
    left: '-30%'
  },
  input: {
    top: '2%'
  },
  div: {
    left: '15%',
    alignContent: 'center',
    height: '100%'
  },
  formInput: {
    width: 365,
    fontSize: 15,
    borderBottomColor: 'black',
    borderBottomWidth: 1,
    borderColor: '#48494B',
    padding: 10,
    margin: 5
  },
  b: {
    top: '5%',
    left: '18%'
  },
  card_template: {
    width: 250,
    height: 900
  },
  card_image: {
    width: 100,
    height: 100,
    borderRadius: 80,
    left: '-10%',
    top: '7%',
    backgroundColor: '#ffffff'
  },
  text_container: {
    position: "absolute",
    width: 250,
    height: 100,
    bottom: 0,
    padding: 5,
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10
  },
  card_title: {
    color: "black"
  },
  background: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  button: {
    top: '35%',
    left: '-15%',
    width: 370,
    padding: 10,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: '#ffd60a',
    borderRadius: 15,
    alignSelf: 'center',
    height: 50,
    marginLeft: 70
  },
  button2: {
    top: '99%',
    width: 250,
    padding: 10,
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: '#ffd60a',
    borderRadius: 15,
    alignSelf: 'center',
    height: 50,
    marginRight: 270,
    marginLeft: 250,
    marginTop: -10
  },
  button3: {
    top: '-35%',
    width: 120,
    padding: 5,
    backgroundColor: 'red',
    borderWidth: 2,
    borderColor: 'red',
    marginTop: 10,
    borderRadius: 15,
    alignSelf: 'center',
    height: 50,
    color: 'white',
    marginRight: 290,
    marginLeft: 170
  },
  buttonText: {
    fontSize: 18,
    color: 'black',
    fontWeight: 'bold',
    textAlign: 'center'
  },
  container: {
    height: '100%',
    width: '100%',
    backgroundColor: '#ECF3FB',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    textAlign: 'center',
    fontSize: 20,
    fontStyle: 'italic',
    marginTop: '2%',
    marginBottom: '10%',
    fontWeight: 'bold',
    color: 'black'
  },
  titleText: {
    textAlign: 'center',
    fontSize: 20,
    fontWeight: 'bold',
    color: 'black',
    top: '-23%',
    left: '-30%'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,