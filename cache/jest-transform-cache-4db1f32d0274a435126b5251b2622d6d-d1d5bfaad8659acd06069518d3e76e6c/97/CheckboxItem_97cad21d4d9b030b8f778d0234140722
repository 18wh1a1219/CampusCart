1eb0abc77f7af8cc897b73535be55f1d
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["style", "status", "label", "onPress", "labelStyle", "theme", "testID", "mode", "position", "disabled"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CheckboxItem = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Checkbox = _interopRequireDefault(require("./Checkbox"));

var _CheckboxAndroid = _interopRequireDefault(require("./CheckboxAndroid"));

var _CheckboxIOS = _interopRequireDefault(require("./CheckboxIOS"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var CheckboxItem = function CheckboxItem(_ref) {
  var style = _ref.style,
      status = _ref.status,
      label = _ref.label,
      onPress = _ref.onPress,
      labelStyle = _ref.labelStyle,
      theme = _ref.theme,
      testID = _ref.testID,
      mode = _ref.mode,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'trailing' : _ref$position,
      disabled = _ref.disabled,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var checkboxProps = (0, _extends2.default)({}, props, {
    status: status,
    theme: theme,
    disabled: disabled
  });
  var isLeading = position === 'leading';
  var checkbox;

  if (mode === 'android') {
    checkbox = React.createElement(_CheckboxAndroid.default, checkboxProps);
  } else if (mode === 'ios') {
    checkbox = React.createElement(_CheckboxIOS.default, checkboxProps);
  } else {
    checkbox = React.createElement(_Checkbox.default, checkboxProps);
  }

  return React.createElement(_TouchableRipple.default, {
    accessibilityLabel: label,
    accessibilityRole: "checkbox",
    accessibilityState: {
      checked: status === 'checked',
      disabled: disabled
    },
    onPress: onPress,
    testID: testID,
    disabled: disabled
  }, React.createElement(_reactNative.View, {
    style: [styles.container, style],
    pointerEvents: "none",
    importantForAccessibility: "no-hide-descendants"
  }, isLeading && checkbox, React.createElement(_Text.default, {
    style: [styles.label, {
      color: disabled ? theme.colors.disabled : theme.colors.text,
      textAlign: isLeading ? 'right' : 'left'
    }, labelStyle]
  }, label), !isLeading && checkbox));
};

CheckboxItem.displayName = 'Checkbox.Item';

var _default = (0, _theming.withTheme)(CheckboxItem);

exports.default = _default;
var CheckboxItemWithTheme = (0, _theming.withTheme)(CheckboxItem);
exports.CheckboxItem = CheckboxItemWithTheme;

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 8,
    paddingHorizontal: 16
  },
  label: {
    fontSize: 16,
    flexShrink: 1,
    flexGrow: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,