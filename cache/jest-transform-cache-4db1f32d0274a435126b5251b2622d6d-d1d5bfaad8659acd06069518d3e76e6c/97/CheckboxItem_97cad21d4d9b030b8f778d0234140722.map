{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;;AAEA;;AAQA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAYR;EAAA,IAXXC,KAWW,QAXXA,KAWW;EAAA,IAVXC,MAUW,QAVXA,MAUW;EAAA,IATXC,KASW,QATXA,KASW;EAAA,IARXC,OAQW,QARXA,OAQW;EAAA,IAPXC,UAOW,QAPXA,UAOW;EAAA,IANXC,KAMW,QANXA,KAMW;EAAA,IALXC,MAKW,QALXA,MAKW;EAAA,IAJXC,IAIW,QAJXA,IAIW;EAAA,yBAHXC,QAGW;EAAA,IAHXA,QAGW,8BAHA,UAGA;EAAA,IAFXC,QAEW,QAFXA,QAEW;EAAA,IADRC,KACQ;EACX,IAAMC,aAAa,8BAAQD,KAAR;IAAeT,MAAZ,EAAYA,MAAf;IAAuBI,KAApB,EAAoBA,KAAvB;IAA8BI;EAA9B,EAAnB;EACA,IAAMG,SAAS,GAAGJ,QAAQ,KAAK,SAA/B;EACA,IAAIK,QAAJ;;EAEA,IAAIN,IAAI,KAAK,SAAb,EAAwB;IACtBM,QAAQ,GAAGC,oBAACC,wBAAD,EAAqBJ,aAArB,CAAXE;EADF,OAEO,IAAIN,IAAI,KAAK,KAAb,EAAoB;IACzBM,QAAQ,GAAGC,oBAACE,oBAAD,EAAiBL,aAAjB,CAAXE;EADK,OAEA;IACLA,QAAQ,GAAGC,oBAACG,iBAAD,EAAcN,aAAd,CAAXE;EACD;;EAED,OACEC,oBAACI,wBAAD;IACEC,kBAAkB,EAAEjB,KADtB;IAEEkB,iBAAiB,EAAC,UAFpB;IAGEC,kBAAkB,EAAE;MAClBC,OAAO,EAAErB,MAAM,KAAK,SADF;MAElBQ;IAFkB,CAHtB;IAOEN,OAAO,EAAEA,OAPX;IAQEG,MAAM,EAAEA,MARV;IASEG,QAAQ,EAAEA;EATZ,GAWEK,oBAACS,iBAAD;IACEvB,KAAK,EAAE,CAACwB,MAAM,CAACC,SAAR,EAAmBzB,KAAnB,CADT;IAEE0B,aAAa,EAAC,MAFhB;IAGEC,yBAAyB,EAAC;EAH5B,GAKGf,SAAS,IAAIC,QALhB,EAMEC,oBAACc,aAAD;IACE5B,KAAK,EAAE,CACLwB,MAAM,CAACtB,KADF,EAEL;MACE2B,KAAK,EAAEpB,QAAQ,GAAGJ,KAAK,CAACyB,MAANzB,CAAaI,QAAhB,GAA2BJ,KAAK,CAACyB,MAANzB,CAAa0B,IADzD;MAEEC,SAAS,EAAEpB,SAAS,GAAG,OAAH,GAAa;IAFnC,CAFK,EAMLR,UANK;EADT,GAUGF,KAVH,CANF,EAkBG,CAACU,SAAD,IAAcC,QAlBjB,CAXF,CADF;AAzBF;;AA6DAd,YAAY,CAACkC,WAAblC,GAA2B,eAA3BA;;eAEe,wBAAUA,YAAV;;;AAGf,IAAMmC,qBAAqB,GAAG,wBAAUnC,YAAV,CAA9B;;;AAIA,IAAMyB,MAAM,GAAGW,wBAAWC,MAAXD,CAAkB;EAC/BV,SAAS,EAAE;IACTY,aAAa,EAAE,KADN;IAETC,UAAU,EAAE,QAFH;IAGTC,cAAc,EAAE,eAHP;IAITC,eAAe,EAAE,CAJR;IAKTC,iBAAiB,EAAE;EALV,CADoB;EAQ/BvC,KAAK,EAAE;IACLwC,QAAQ,EAAE,EADL;IAELC,UAAU,EAAE,CAFP;IAGLC,QAAQ,EAAE;EAHL;AARwB,CAAlBT,CAAf","names":["CheckboxItem","style","status","label","onPress","labelStyle","theme","testID","mode","position","disabled","props","checkboxProps","isLeading","checkbox","React","_CheckboxAndroid","_CheckboxIOS","_Checkbox","_TouchableRipple","accessibilityLabel","accessibilityRole","accessibilityState","checked","_reactNative","styles","container","pointerEvents","importantForAccessibility","_Text","color","colors","text","textAlign","displayName","CheckboxItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"sources":["CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  disabled,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={label}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          style={[\n            styles.label,\n            {\n              color: disabled ? theme.colors.disabled : theme.colors.text,\n              textAlign: isLeading ? 'right' : 'left',\n            },\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]}