b95ad7dd801f666c894d291c8b737f70
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Cart;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _firebase = _interopRequireDefault(require("firebase"));

var _reactNative = require("react-native");

var _reactNativeSimpleRadioButton = _interopRequireDefault(require("react-native-simple-radio-button"));

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _reactNativeSmtpMailer = _interopRequireDefault(require("react-native-smtp-mailer"));

var _reactNativePopupMenu = require("react-native-popup-menu");

var _Loaddd = _interopRequireDefault(require("./Loaddd"));

var _reactNativePaper = require("react-native-paper");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var UPI = _reactNative.NativeModules.UPI;

function Cart(_ref) {
  var navigation = _ref.navigation,
      route = _ref.route;

  var _useState = (0, _react.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      dest = _useState2[0],
      setDest = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      paymode = _useState4[0],
      setPayMode = _useState4[1];

  var _useState5 = (0, _react.useState)(true),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      loading = _useState6[0],
      setLoading = _useState6[1];

  var _useState7 = (0, _react.useState)([]),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      cartProducts = _useState8[0],
      setcartProducts = _useState8[1];

  (0, _react.useEffect)(function () {
    function fetchUserPosts() {
      _firebase.default.firestore().collection('Cartt').doc(_firebase.default.auth().currentUser.uid).collection('cart').get().then(function (snapshot) {
        var posts = snapshot.docs.map(function (doc) {
          var data = doc.data();

          _firebase.default.storage().ref('/' + data.image).getDownloadURL();

          return (0, _extends2.default)({}, data);
        });
        setcartProducts(posts);
      });
    }

    fetchUserPosts();
  }, []);

  var openLink = function _callee() {
    var UpiUrl, response;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (dest === '') {
              alert("Choose a delivery option");
            }

            if (paymode === '') {
              alert("Choose a mode of Payment");
            }

            if (dest != '' && paymode === "Cash") {
              setLoading(false);
              cartProducts.forEach(function (d) {
                _firebase.default.firestore().collection('posts').where("image", "==", d.image).get().then(function (querySnapshot) {
                  var id = 0;
                  querySnapshot.forEach(function (doc) {
                    return id = doc.id;
                  });

                  _firebase.default.firestore().collection('posts').doc(id).update({
                    status: "sold",
                    buyer: _firebase.default.auth().currentUser.uid
                  });

                  _firebase.default.firestore().collection('orders').doc().set({
                    productName: d.productName,
                    price: d.price,
                    buyer: _firebase.default.auth().currentUser.uid,
                    seller: d.userId,
                    rating: 0
                  });

                  setTimeout(function () {
                    return _firebase.default.firestore().collection('posts').doc(id).get().then(function (querySnapshot) {
                      var data = querySnapshot.data();
                      console.log(data.buyer, _firebase.default.auth().currentUser.uid);

                      if (data.buyer === _firebase.default.auth().currentUser.uid) {
                        setLoading(true);
                        alert("Order Confirmed!!!");
                        navigation.navigate('Profile');
                      } else {
                        setLoading(true);
                        alert("Sorry, the product is already booked ");
                        navigation.navigate('Profile');
                      }
                    });
                  }, 6000);
                });
              });

              _firebase.default.firestore().collection('Cartt/' + _firebase.default.auth().currentUser.uid + '/cart').get().then(function (res) {
                res.forEach(function (element) {
                  element.ref.delete();
                });
              });
            }

            if (!(dest != '' && paymode === "Phonepe")) {
              _context.next = 9;
              break;
            }

            UpiUrl = "phonepe://pay?pa=9652324155@ybl&pn=chandrika&tr=kdahskjahs275787fsdfasdas&am=1&mam=null&cu=INR&url=https://MyUPIApp&refUrl=https://MyUPIApp";
            _context.next = 7;
            return _regenerator.default.awrap(UPI.openLink(UpiUrl));

          case 7:
            response = _context.sent;

            if (response === "failure") {} else {
              _firebase.default.firestore().collection('Cartt/' + _firebase.default.auth().currentUser.uid + '/cart').get().then(function (res) {
                res.forEach(function (element) {
                  element.ref.delete();
                });
              });
            }

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  };

  var _useState9 = (0, _react.useState)(''),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      chosenOption = _useState10[0],
      setChosenOption = _useState10[1];

  var options = [{
    label: 'Meet Offline',
    value: 'Meet Offline'
  }, {
    label: 'Send to Address',
    value: 'Send to Address'
  }];

  var _useState11 = (0, _react.useState)(''),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      chosenPayOption = _useState12[0],
      setChosenPayOption = _useState12[1];

  var payoptions = [{
    label: 'Cash',
    value: 'Cash'
  }, {
    label: 'Phonepe',
    value: 'Phonepe'
  }];
  return _react.default.createElement(_reactNative.ImageBackground, {
    style: styles.background,
    source: require('../assets/Signing.png')
  }, loading ? _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, {
    style: {
      color: 'white',
      fontSize: 18,
      fontWeight: '500',
      marginBottom: '40%'
    }
  }, " Thank you for shopping!!"), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, {
    style: {
      color: 'black',
      fontWeight: '500',
      fontSize: 18
    }
  }, " Choose  address for delivery  "), _react.default.createElement(_reactNativeSimpleRadioButton.default, {
    buttonColor: '#00244c',
    selectedButtonColor: '#00244c',
    style: {
      alignSelf: 'center',
      marginTop: '2%',
      buttonColor: '#001d3d'
    },
    radio_props: options,
    initial: 0,
    onSelect: function onSelect() {
      setDest(value);
    },
    onPress: function onPress(value) {
      setDest(value);
      setChosenOption(value);
    }
  }), _react.default.createElement(_reactNative.Text, {
    style: {
      alignSelf: 'center',
      color: 'darkblue',
      fontWeight: '600'
    }
  }, " ", chosenOption), _react.default.createElement(_reactNative.Text, {
    style: {
      marginTop: '5%',
      color: 'black',
      ontWeight: '500',
      fontSize: 18
    }
  }, " Choose payment mode  "), _react.default.createElement(_reactNativeSimpleRadioButton.default, {
    buttonColor: '#00244c',
    selectedButtonColor: '#00244c',
    style: {
      alignSelf: 'center',
      marginLeft: '-9%',
      marginTop: '2%',
      buttonColor: '#001d3d'
    },
    radio_props: payoptions,
    initial: 0,
    onSelect: function onSelect() {
      return setPayMode(value);
    },
    onPress: function onPress(value) {
      setPayMode(value);
      setChosenPayOption(value);
    }
  }), _react.default.createElement(_reactNative.Text, {
    style: {
      alignSelf: 'center',
      color: 'darkblue',
      fontWeight: '600'
    }
  }, " ", chosenPayOption), _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {
    style: styles.paymentButton,
    onPress: function onPress() {
      return openLink();
    }
  }, _react.default.createElement(_reactNative.Text, {
    style: {
      fontWeight: '500',
      fontSize: 17,
      color: "#00244c"
    }
  }, "Make Payment")))) : _react.default.createElement(_Loaddd.default, null));
}

var styles = _reactNative.StyleSheet.create({
  background: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    height: '30%'
  },
  container: {
    paddingVertical: 150,
    flex: 1,
    alignItems: "center",
    backgroundColor: "#F5FCFF"
  },
  TextInput: {
    width: "80%",
    height: 40,
    borderColor: "gray",
    borderWidth: 1
  },
  paymentButton: {
    width: '100%',
    height: 60,
    borderRadius: 10,
    alignItems: "center",
    justifyContent: "center",
    marginTop: '10%',
    backgroundColor: '#ffd60a',
    borderWidth: 2,
    borderColor: '#ffd60a',
    borderRadius: 10,
    alignSelf: 'center'
  },
  welcome: {
    fontSize: 20,
    textAlign: "center",
    margin: 10
  },
  instructions: {
    textAlign: "center",
    color: "#333333",
    marginBottom: 5
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,