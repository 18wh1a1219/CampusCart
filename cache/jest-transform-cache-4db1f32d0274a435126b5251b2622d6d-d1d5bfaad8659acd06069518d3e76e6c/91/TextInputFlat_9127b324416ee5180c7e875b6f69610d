bf65a73dbbc0b46cc5a0c3124829ae6d
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["disabled", "editable", "label", "error", "selectionColor", "underlineColor", "activeUnderlineColor", "dense", "style", "theme", "render", "multiline", "parentState", "innerRef", "onFocus", "forceFocus", "onBlur", "onChangeText", "onLayoutAnimatedText", "onLeftAffixLayoutChange", "onRightAffixLayoutChange", "left", "right", "placeholderTextColor"],
    _excluded2 = ["fontSize", "fontWeight", "height", "paddingHorizontal", "textAlign"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _InputLabel = _interopRequireDefault(require("./Label/InputLabel"));

var _TextInputAdornment = _interopRequireWildcard(require("./Adornment/TextInputAdornment"));

var _constants = require("./constants");

var _helpers = require("./helpers");

var _enums = require("./Adornment/enums");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var MINIMIZED_LABEL_Y_OFFSET = -18;
var LABEL_PADDING_TOP = 30;
var LABEL_PADDING_TOP_DENSE = 24;
var MIN_HEIGHT = 64;
var MIN_DENSE_HEIGHT_WL = 52;
var MIN_DENSE_HEIGHT = 40;

var TextInputFlat = function TextInputFlat(_ref) {
  var _affixTopPosition, _onAffixChange, _topPosition;

  var _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$editable = _ref.editable,
      editable = _ref$editable === void 0 ? true : _ref$editable,
      label = _ref.label,
      _ref$error = _ref.error,
      error = _ref$error === void 0 ? false : _ref$error,
      selectionColor = _ref.selectionColor,
      underlineColor = _ref.underlineColor,
      activeUnderlineColor = _ref.activeUnderlineColor,
      dense = _ref.dense,
      style = _ref.style,
      theme = _ref.theme,
      _ref$render = _ref.render,
      render = _ref$render === void 0 ? function (props) {
    return React.createElement(_reactNative.TextInput, props);
  } : _ref$render,
      _ref$multiline = _ref.multiline,
      multiline = _ref$multiline === void 0 ? false : _ref$multiline,
      parentState = _ref.parentState,
      innerRef = _ref.innerRef,
      onFocus = _ref.onFocus,
      forceFocus = _ref.forceFocus,
      onBlur = _ref.onBlur,
      onChangeText = _ref.onChangeText,
      onLayoutAnimatedText = _ref.onLayoutAnimatedText,
      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,
      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,
      left = _ref.left,
      right = _ref.right,
      placeholderTextColor = _ref.placeholderTextColor,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var isAndroid = _reactNative.Platform.OS === 'android';
  var colors = theme.colors,
      fonts = theme.fonts;
  var font = fonts.regular;
  var hasActiveOutline = parentState.focused || error;

  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},
      fontSizeStyle = _ref3.fontSize,
      fontWeight = _ref3.fontWeight,
      height = _ref3.height,
      paddingHorizontal = _ref3.paddingHorizontal,
      textAlign = _ref3.textAlign,
      viewStyle = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);

  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;
  var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';
  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({
    left: left,
    right: right
  });

  var _ref4 = (0, _helpers.calculateFlatInputHorizontalPadding)({
    adornmentConfig: adornmentConfig
  }),
      paddingLeft = _ref4.paddingLeft,
      paddingRight = _ref4.paddingRight;

  if (isPaddingHorizontalPassed) {
    paddingLeft = paddingHorizontal;
    paddingRight = paddingHorizontal;
  }

  var leftLayout = parentState.leftLayout,
      rightLayout = parentState.rightLayout;
  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({
    adornmentConfig: adornmentConfig,
    rightAffixWidth: rightAffixWidth,
    leftAffixWidth: leftAffixWidth,
    paddingHorizontal: paddingHorizontal,
    inputOffset: _constants.FLAT_INPUT_OFFSET,
    mode: _enums.InputMode.Flat
  });
  var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;

  if (disabled) {
    inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();
    placeholderColor = colors.disabled;
    underlineColorCustom = 'transparent';
  } else {
    inputTextColor = colors.text;
    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;
    placeholderColor = colors.placeholder;
    errorColor = colors.error;
    underlineColorCustom = underlineColor || colors.disabled;
  }

  var containerStyle = {
    backgroundColor: theme.dark ? (0, _color.default)(colors.background).lighten(0.24).rgb().string() : (0, _color.default)(colors.background).darken(0.06).rgb().string(),
    borderTopLeftRadius: theme.roundness,
    borderTopRightRadius: theme.roundness
  };
  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;
  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;
  var labelWidth = parentState.labelLayout.width;
  var labelHeight = parentState.labelLayout.height;
  var labelHalfWidth = labelWidth / 2;
  var labelHalfHeight = labelHeight / 2;
  var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (_reactNative.I18nManager.isRTL ? -1 : 1) * paddingLeft;
  var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;
  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);
  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);

  if (height && typeof height !== 'number') {
    console.warn('Currently we support only numbers in height prop');
  }

  var paddingSettings = {
    height: height ? +height : null,
    labelHalfHeight: labelHalfHeight,
    offset: _constants.FLAT_INPUT_OFFSET,
    multiline: multiline ? multiline : null,
    dense: dense ? dense : null,
    topPosition: topPosition,
    fontSize: fontSize,
    label: label,
    scale: fontScale,
    isAndroid: isAndroid,
    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)
  };
  var pad = (0, _helpers.calculatePadding)(paddingSettings);
  var paddingFlat = (0, _helpers.adjustPaddingFlat)((0, _extends2.default)({}, paddingSettings, {
    pad: pad
  }));
  var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);
  var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;
  var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);
  var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);
  var iconTopPosition = (flatHeight - _constants.ADORNMENT_SIZE) / 2;
  var leftAffixTopPosition = leftLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)((0, _extends2.default)({
    height: flatHeight
  }, paddingFlat, {
    affixHeight: leftLayout.height
  })) : null;
  var rightAffixTopPosition = rightLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)((0, _extends2.default)({
    height: flatHeight
  }, paddingFlat, {
    affixHeight: rightLayout.height
  })) : null;
  var labelProps = {
    label: label,
    onLayoutAnimatedText: onLayoutAnimatedText,
    placeholderOpacity: placeholderOpacity,
    error: error,
    placeholderStyle: styles.placeholder,
    baseLabelTranslateY: baseLabelTranslateY,
    baseLabelTranslateX: baseLabelTranslateX,
    font: font,
    fontSize: fontSize,
    fontWeight: fontWeight,
    labelScale: labelScale,
    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,
    topPosition: topPosition,
    paddingOffset: {
      paddingLeft: paddingLeft,
      paddingRight: paddingRight
    },
    hasActiveOutline: hasActiveOutline,
    activeColor: activeColor,
    placeholderColor: placeholderColor,
    errorColor: errorColor,
    roundness: theme.roundness,
    maxFontSizeMultiplier: rest.maxFontSizeMultiplier
  };
  var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);
  var onAffixChange = (_onAffixChange = {}, (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);
  var adornmentProps = {
    paddingHorizontal: paddingHorizontal,
    adornmentConfig: adornmentConfig,
    forceFocus: forceFocus,
    topPosition: (_topPosition = {}, (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), _topPosition),
    onAffixChange: onAffixChange,
    isTextInputFocused: parentState.focused,
    maxFontSizeMultiplier: rest.maxFontSizeMultiplier
  };

  if (adornmentConfig.length) {
    adornmentProps = (0, _extends2.default)({}, adornmentProps, {
      left: left,
      right: right,
      textStyle: (0, _extends2.default)({}, font, {
        fontSize: fontSize,
        fontWeight: fontWeight
      }),
      visible: parentState.labeled
    });
  }

  return React.createElement(_reactNative.View, {
    style: [containerStyle, viewStyle]
  }, React.createElement(Underline, {
    parentState: parentState,
    underlineColorCustom: underlineColorCustom,
    error: error,
    colors: colors,
    activeColor: activeColor
  }), React.createElement(_reactNative.View, {
    style: [styles.labelContainer, {
      minHeight: minHeight
    }]
  }, !isAndroid && multiline && label && React.createElement(_reactNative.View, {
    testID: "patch-container",
    pointerEvents: "none",
    style: [_reactNative.StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {
      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,
      left: paddingLeft,
      right: paddingRight
    }]
  }), React.createElement(_InputLabel.default, {
    parentState: parentState,
    labelProps: labelProps
  }), render === null || render === void 0 ? void 0 : render((0, _extends2.default)({
    testID: 'text-input-flat'
  }, rest, {
    ref: innerRef,
    onChangeText: onChangeText,
    placeholder: label ? parentState.placeholder : rest.placeholder,
    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,
    editable: !disabled && editable,
    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,
    onFocus: onFocus,
    onBlur: onBlur,
    underlineColorAndroid: 'transparent',
    multiline: multiline,
    style: [styles.input, {
      paddingLeft: paddingLeft,
      paddingRight: paddingRight
    }, !multiline || multiline && height ? {
      height: flatHeight
    } : {}, paddingFlat, (0, _extends2.default)({}, font, {
      fontSize: fontSize,
      fontWeight: fontWeight,
      color: inputTextColor,
      textAlignVertical: multiline ? 'top' : 'center',
      textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'
    }), _reactNative.Platform.OS === 'web' && {
      outline: 'none'
    }, adornmentStyleAdjustmentForNativeInput]
  }))), React.createElement(_TextInputAdornment.default, adornmentProps));
};

var _default = TextInputFlat;
exports.default = _default;

var Underline = function Underline(_ref2) {
  var parentState = _ref2.parentState,
      error = _ref2.error,
      colors = _ref2.colors,
      activeColor = _ref2.activeColor,
      underlineColorCustom = _ref2.underlineColorCustom;
  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;
  if (error) backgroundColor = colors.error;
  return React.createElement(_reactNative.Animated.View, {
    style: [styles.underline, {
      backgroundColor: backgroundColor,
      transform: [{
        scaleY: parentState.focused ? 1 : 0.5
      }]
    }]
  });
};

var styles = _reactNative.StyleSheet.create({
  placeholder: {
    position: 'absolute',
    left: 0
  },
  underline: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    height: 2,
    zIndex: 1
  },
  labelContainer: {
    paddingTop: 0,
    paddingBottom: 0
  },
  input: {
    flexGrow: 1,
    margin: 0
  },
  inputFlat: {
    paddingTop: 24,
    paddingBottom: 4
  },
  inputFlatDense: {
    paddingTop: 22,
    paddingBottom: 2
  },
  patchContainer: {
    height: 24,
    zIndex: 2
  },
  densePatchContainer: {
    height: 22,
    zIndex: 2
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,