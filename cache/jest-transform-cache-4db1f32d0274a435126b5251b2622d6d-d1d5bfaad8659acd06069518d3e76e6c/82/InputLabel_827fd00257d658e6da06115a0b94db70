798b6df58a6fb76791416d4ce0f7b30a
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _AnimatedText = _interopRequireDefault(require("../../Typography/AnimatedText"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var InputLabel = function InputLabel(props) {
  var parentState = props.parentState,
      labelBackground = props.labelBackground;
  var _props$labelProps = props.labelProps,
      label = _props$labelProps.label,
      error = _props$labelProps.error,
      onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,
      hasActiveOutline = _props$labelProps.hasActiveOutline,
      activeColor = _props$labelProps.activeColor,
      placeholderStyle = _props$labelProps.placeholderStyle,
      baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,
      baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,
      font = _props$labelProps.font,
      fontSize = _props$labelProps.fontSize,
      fontWeight = _props$labelProps.fontWeight,
      placeholderOpacity = _props$labelProps.placeholderOpacity,
      wiggleOffsetX = _props$labelProps.wiggleOffsetX,
      labelScale = _props$labelProps.labelScale,
      topPosition = _props$labelProps.topPosition,
      paddingOffset = _props$labelProps.paddingOffset,
      placeholderColor = _props$labelProps.placeholderColor,
      errorColor = _props$labelProps.errorColor,
      labelTranslationXOffset = _props$labelProps.labelTranslationXOffset,
      maxFontSizeMultiplier = _props$labelProps.maxFontSizeMultiplier;
  var labelTranslationX = {
    transform: [{
      translateX: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]
      })
    }]
  };
  var labelStyle = (0, _extends2.default)({}, font, {
    fontSize: fontSize,
    fontWeight: fontWeight,
    transform: [{
      translateX: parentState.error.interpolate({
        inputRange: [0, 0.5, 1],
        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]
      })
    }, {
      translateY: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [baseLabelTranslateY, 0]
      })
    }, {
      scale: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [labelScale, 1]
      })
    }]
  });
  return label ? _react.default.createElement(_reactNative.Animated.View, {
    pointerEvents: "none",
    style: [_reactNative.StyleSheet.absoluteFill, styles.labelContainer, {
      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1
    }, labelTranslationX]
  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({
    parentState: parentState,
    labelStyle: labelStyle,
    labelProps: props.labelProps,
    maxFontSizeMultiplier: maxFontSizeMultiplier
  }), _react.default.createElement(_AnimatedText.default, {
    onLayout: onLayoutAnimatedText,
    style: [placeholderStyle, {
      top: topPosition
    }, labelStyle, paddingOffset || {}, {
      color: activeColor,
      opacity: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [hasActiveOutline ? 1 : 0, 0]
      })
    }],
    numberOfLines: 1,
    maxFontSizeMultiplier: maxFontSizeMultiplier
  }, label), _react.default.createElement(_AnimatedText.default, {
    style: [placeholderStyle, {
      top: topPosition
    }, labelStyle, paddingOffset, {
      color: error && errorColor ? errorColor : placeholderColor,
      opacity: placeholderOpacity
    }],
    numberOfLines: 1,
    maxFontSizeMultiplier: maxFontSizeMultiplier
  }, label)) : null;
};

var styles = _reactNative.StyleSheet.create({
  labelContainer: {
    zIndex: 3
  }
});

var _default = InputLabel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,