{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA,SAASA,qBAAT,CACEC,OADF,EAEEC,SAFF,EAGE;EACA;;EACA,OAAOD,OAAP;AACD;;IAEYE,a;;;;;EAIXC,yBAAc;IAAA;;IAAA;IACZ;IAEA,MAAKC,WAAL,GAAmB,sBAAnB;IAHY;EAIb;;;;WAEDC,kBACEC,QADFD,EAEE;MAEA,KAAKE,QAAL,CAAcR,qBAAd,GAAsCA,qBAAtC;MACA,+GAAsBO,QAAtB;IACD;;;EAhBgCE,6B","names":["changeEventCalculator","current","_previous","ManualGesture","constructor","handlerName","onChange","callback","handlers","ContinousBaseGesture"],"sources":["manualGesture.ts"],"sourcesContent":["import { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport { ContinousBaseGesture } from './gesture';\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<Record<string, never>>,\n  _previous?: GestureUpdateEvent<Record<string, never>>\n) {\n  'worklet';\n  return current;\n}\n\nexport class ManualGesture extends ContinousBaseGesture<\n  Record<string, never>,\n  Record<string, never>\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'ManualGestureHandler';\n  }\n\n  onChange(\n    callback: (event: GestureUpdateEvent<Record<string, never>>) => void\n  ) {\n    // @ts-ignore TS being overprotective, Record<string, never> is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type ManualGestureType = InstanceType<typeof ManualGesture>;\n"]}