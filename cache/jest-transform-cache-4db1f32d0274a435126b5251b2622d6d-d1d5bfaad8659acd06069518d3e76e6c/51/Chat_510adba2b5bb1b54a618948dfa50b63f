ad86bb119e6a3b38c5750b60a3de3f9e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Chat;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var firebase = _interopRequireWildcard(require("firebase"));

var _reactNative = require("react-native");

var _reactNativeGestureHandler = require("react-native-gesture-handler");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Chat(_ref) {
  var navigation = _ref.navigation,
      route = _ref.route;

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      users = _useState2[0],
      setUsers = _useState2[1];

  var _useState3 = (0, _react.useState)(""),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      chat = _useState4[0],
      setChat = _useState4[1];

  var _useState5 = (0, _react.useState)(""),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      text = _useState6[0],
      setText = _useState6[1];

  var _useState7 = (0, _react.useState)([]),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      msgs = _useState8[0],
      setMsgs = _useState8[1];

  var _useState9 = (0, _react.useState)(""),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      msg = _useState10[0],
      setMsg = _useState10[1];

  var scrollRef = (0, _react.useRef)();
  var user1 = firebase.auth().currentUser.uid;
  var db = firebase.firestore();
  (0, _react.useEffect)(function () {
    var usersRef = firebase.firestore().collection("users").onSnapshot(function (querySnapshot) {
      var users = [];
      querySnapshot.forEach(function (doc) {
        if (doc.data().email != firebase.auth().currentUser.email) {
          users.push(doc.data());
        }
      });
      setUsers(users);
    });
  }, []);
  (0, _react.useEffect)(function () {
    if (route.params.paramKey && users.length > 0) {
      selectUser(route.params.paramKey);
    }
  }, [route.params.paramKey, users]);

  var open = function open() {
    _reactNative.Linking.openURL('paytm://').catch(function () {
      _reactNative.Linking.openURL('https://www.paytm.com');
    });
  };

  var selectUser = function _callee(user) {
    var selectedUserDetails, user2, id;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            selectedUserDetails = users.find(function (user) {
              return user.fullName === route.params.paramKey;
            });
            setChat(selectedUserDetails);
            user2 = selectedUserDetails.uid;
            id = user1 > user2 ? user1 + user2 : user2 + user1;
            firebase.firestore().collection("messages").doc(id).collection("chat").get().then(function (res) {
              res.forEach(function (d) {
                var s = d.data().from;
                console.log(s, user2);

                if (s === user2) {
                  firebase.firestore().collection("messages").doc(id).collection("chat").doc(d.id).update({
                    read: true
                  });
                }
              });
            });
            _context.next = 7;
            return _regenerator.default.awrap(firebase.firestore().collection("messages").doc(id).collection("chat").orderBy("createdAt", "asc").onSnapshot(function (querySnapshot) {
              var msgs = [];
              querySnapshot.forEach(function (doc) {
                msgs.push(doc.data());
              });

              for (var i = 0; i < msgs.length; i++) {
                var mssgg = "";

                for (var j = 0; j < msgs[i].text.length; j++) {
                  mssgg += String.fromCharCode(msgs[i].text.charCodeAt(j) - 3);
                }

                msgs[i].text = mssgg;
              }

              setMsgs(msgs);
            }));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  };

  var handlePress = function _callee2(e) {
    var user2, id, msgg, i;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(text === '')) {
              _context2.next = 4;
              break;
            }

            alert("Enter a message");
            _context2.next = 13;
            break;

          case 4:
            setMsg(text);
            user2 = chat.uid;
            id = user1 > user2 ? user1 + user2 : user2 + user1;
            msgs.push({
              text: text,
              from: user1,
              to: user2,
              createdAt: new Date(),
              read: false
            });
            msgg = "";

            for (i = 0; i < text.length; i++) {
              msgg += String.fromCharCode(text.charCodeAt(i) + 3);
            }

            _context2.next = 12;
            return _regenerator.default.awrap(firebase.firestore().collection("messages").doc(id).collection("chat").add({
              text: msgg,
              from: user1,
              to: user2,
              createdAt: new Date(),
              read: false
            }));

          case 12:
            setText("");

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  };

  return _react.default.createElement(_reactNative.View, {
    style: {
      height: '100%',
      backgroundColor: '#F0F0F0'
    }
  }, _react.default.createElement(_reactNative.ScrollView, null, _react.default.createElement(_reactNative.Text, {
    style: styles.name
  }, chat ? chat.fullName : 'Start the conversation'), _react.default.createElement(_reactNative.View, null), _react.default.createElement(_reactNative.View, {
    style: {
      top: '6%',
      margin: '3%'
    }
  }, msgs.length ? msgs.map(function (msg, i) {
    return _react.default.createElement(_reactNative.View, {
      style: {
        flex: 1
      }
    }, msg.from != chat.uid ? _react.default.createElement(_reactNative.View, {
      style: {
        flexDirection: 'row'
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.sender
    }, msg.text, " ")) : _react.default.createElement(_reactNative.View, {
      style: {
        flexDirection: 'row'
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.receiver
    }, msg.text, " ")));
  }) : null, _react.default.createElement(_reactNative.TextInput, {
    style: styles.textInput,
    placeholder: "Enter a message",
    value: text,
    onChangeText: function onChangeText(text) {
      return setText(text);
    }
  }), _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {
    style: styles.button2,
    onPress: handlePress
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.buttonText
  }, "Send")))));
}

var styles = _reactNative.StyleSheet.create({
  name: {
    top: '2%',
    fontWeight: 'bold',
    alignSelf: 'center',
    color: 'black',
    position: 'relative'
  },
  sender: {
    alignSelf: 'flex-end',
    right: '-1%',
    padding: '4%',
    flex: 1,
    borderWidth: 1,
    flexWrap: 'wrap',
    width: 30,
    backgroundColor: "#001d3d",
    padding: 10,
    marginLeft: '45%',
    color: 'white',
    marginTop: 5,
    marginRight: "5%",
    maxWidth: '50%',
    alignSelf: 'flex-end',
    borderColor: '#001d3d',
    borderBottomRightRadius: 0,
    borderBottomLeftRadius: 15,
    borderTopRightRadius: 15,
    borderTopLeftRadius: 15,
    borderRadius: 20
  },
  receiver: {
    left: '3%',
    padding: '4%',
    margin: 5,
    flex: 1,
    flexShrink: 1,
    borderWidth: 1,
    borderColor: 'white',
    borderRadius: 50,
    color: "black",
    padding: 10,
    marginLeft: '2%',
    borderRadius: 5,
    marginTop: 5,
    marginRight: "5%",
    maxWidth: '50%',
    alignSelf: 'flex-end',
    backgroundColor: 'white',
    borderBottomRightRadius: 15,
    borderBottomLeftRadius: 15,
    borderTopRightRadius: 15,
    borderTopLeftRadius: 0,
    borderRadius: 20
  },
  buttonText: {
    alignSelf: 'center'
  },
  textInput: {
    width: '96%',
    fontSize: 15,
    borderWidth: 2,
    borderColor: 'lightgray',
    padding: 10,
    height: '6%',
    color: 'black',
    borderRadius: 10,
    left: '0%',
    margin: '1%'
  },
  card_template: {
    height: 250,
    marginTop: '-60%',
    left: '10%'
  },
  b: {
    marginTop: '160%'
  },
  button2: {
    width: '30%',
    borderRadius: 15,
    borderWidth: 3,
    borderColor: '#ffd60a',
    backgroundColor: '#ffd60a',
    padding: 5,
    margin: '2%',
    marginBottom: '25%',
    alignSelf: 'flex-end'
  },
  button: {
    width: 150,
    borderRadius: 15,
    borderWidth: 3,
    borderColor: '#ffd60a',
    backgroundColor: '#ffd60a',
    padding: 5,
    margin: '2%'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,